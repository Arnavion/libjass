<?xml version="1.0" encoding="utf-8" ?>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en">
	<head>
		<title>libjass API Documentation</title>
		<style type="text/css">
		<![CDATA[
			html, body, .navigation, .content {
				height: 100%;
				margin: 0;
			}

			.navigation, .content {
				overflow-y: scroll;
			}

			.navigation {
				float: left;
				background-color: white;
				padding: 0 20px;
				margin-right: 20px;
			}

			.navigation .namespace, .navigation .module {
				margin-top: 1em;
			}

			.navigation .elements {
				margin: 0;
			}

			.content > section:not(:last-child) {
				border-bottom: 1px solid black;
			}

			.clazz, .enum, .function, .interface, .property {
				margin-left: 30px;
				padding: 10px;
			}

			.getter, .setter {
				font-size: large;
			}

			section > .clazz:nth-child(2n), section > .enum:nth-child(2n), section > .function:nth-child(2n), section > .interface:nth-child(2n), section > .property:nth-child(2n) {
				background-color: rgb(221, 250, 238);
			}

			section > .clazz:nth-child(2n + 1), section > .enum:nth-child(2n + 1), section > .function:nth-child(2n + 1), section > .interface:nth-child(2n + 1), section > .property:nth-child(2n + 1) {
				background-color: rgb(244, 250, 221);
			}

			.name {
				font-size: x-large;
			}

			.usage {
				font-size: large;
				font-style: italic;
			}

			.usage legend:before {
				content: "Usage";
			}

			.usage fieldset {
				min-width: initial;
				overflow-x: auto;
			}

			.usage pre {
				margin: 0;
			}

			.clazz .function, .clazz .property, .interface .function, .interface .property, .enum .member {
				background-color: rgb(250, 241, 221);
			}

			.parameter.name {
				font-size: large;
			}

			.type {
				font-style: italic;
			}

			.type:before {
				content: "Type: ";
			}

			.abstract > .name:before {
				content: "abstract ";
			}

			.clazz .private > .name:before {
				content: "private ";
			}

			.clazz .protected > .name:before {
				content: "protected ";
			}

			.static > .name:before {
				content: "static ";
			}

			.abstract.private > .name:before {
				content: "abstract private ";
			}

			.private.static > .name:before {
				content: "static private ";
			}

			.abstract.protected > .name:before {
				content: "abstract protected ";
			}

			.protected.static > .name:before {
				content: "static protected ";
			}

			body:not(.show-private) .clazz .private, body:not(.show-private) .clazz .protected, body:not(.show-private) .module {
				display: none;
			}

			.description .code {
				margin-left: 30px;
			}
		]]>
		</style>
		<script>
		<![CDATA[
			addEventListener("DOMContentLoaded", function () {
				document.querySelector("#show-private").addEventListener("change", function (event) {
					document.body.className = (event.target.checked ? "show-private" : "");
				}, false);

				showPrivateIfNecessary();
			}, false);

			function showPrivateIfNecessary() {
				var jumpToElement = document.querySelector("[id=\"" + location.hash.substr(1) + "\"]");
				if (jumpToElement !== null && jumpToElement.offsetHeight === 0) {
					document.querySelector("#show-private").click()
					jumpToElement.scrollIntoView();
				}
			}

			addEventListener("hashchange", showPrivateIfNecessary, false);
		]]>
		</script>
	</head>
	<body>
		<nav class="navigation">
			<label><input type="checkbox" id="show-private" />Show private</label>
			<fieldset class="namespace">
				<legend><a href="#libjass">libjass</a></legend>
				<ul class="elements">
					<li><a href="#libjass.debugMode">debugMode</a></li>
					<li><a href="#libjass.Map">Map</a></li>
					<li><a href="#libjass.Promise">Promise</a></li>
					<li><a href="#libjass.Set">Set</a></li>
					<li><a href="#libjass.verboseMode">verboseMode</a></li>
					<li><a href="#libjass.ASS">ASS</a></li>
					<li><a href="#libjass.Attachment">Attachment</a></li>
					<li><a href="#libjass.DeferredPromise">DeferredPromise</a></li>
					<li><a href="#libjass.Dialogue">Dialogue</a></li>
					<li><a href="#libjass.ScriptProperties">ScriptProperties</a></li>
					<li><a href="#libjass.Style">Style</a></li>
					<li><a href="#libjass.AttachmentType">AttachmentType</a></li>
					<li><a href="#libjass.BorderStyle">BorderStyle</a></li>
					<li><a href="#libjass.Format">Format</a></li>
					<li><a href="#libjass.WrappingStyle">WrappingStyle</a></li>
				</ul>
			</fieldset>

			<fieldset class="namespace">
				<legend><a href="#libjass.parser">libjass.parser</a></legend>
				<ul class="elements">
					<li><a href="#libjass.parser.parse">parse</a></li>
					<li><a href="#libjass.parser.Stream">Stream</a></li>
					<li><a href="#libjass.parser.BrowserReadableStream">BrowserReadableStream</a></li>
					<li><a href="#libjass.parser.SrtStreamParser">SrtStreamParser</a></li>
					<li><a href="#libjass.parser.StreamParser">StreamParser</a></li>
					<li><a href="#libjass.parser.StringStream">StringStream</a></li>
					<li><a href="#libjass.parser.XhrStream">XhrStream</a></li>
				</ul>
			</fieldset>

			<fieldset class="namespace">
				<legend><a href="#libjass.parts">libjass.parts</a></legend>
				<ul class="elements">
					<li><a href="#libjass.parts.Part">Part</a></li>
					<li><a href="#libjass.parts.Alignment">Alignment</a></li>
					<li><a href="#libjass.parts.Alpha">Alpha</a></li>
					<li><a href="#libjass.parts.Blur">Blur</a></li>
					<li><a href="#libjass.parts.Bold">Bold</a></li>
					<li><a href="#libjass.parts.Border">Border</a></li>
					<li><a href="#libjass.parts.BorderX">BorderX</a></li>
					<li><a href="#libjass.parts.BorderY">BorderY</a></li>
					<li><a href="#libjass.parts.Color">Color</a></li>
					<li><a href="#libjass.parts.ColorKaraoke">ColorKaraoke</a></li>
					<li><a href="#libjass.parts.Comment">Comment</a></li>
					<li><a href="#libjass.parts.ComplexFade">ComplexFade</a></li>
					<li><a href="#libjass.parts.DrawingBaselineOffset">DrawingBaselineOffset</a></li>
					<li><a href="#libjass.parts.DrawingInstructions">DrawingInstructions</a></li>
					<li><a href="#libjass.parts.DrawingMode">DrawingMode</a></li>
					<li><a href="#libjass.parts.Fade">Fade</a></li>
					<li><a href="#libjass.parts.FontName">FontName</a></li>
					<li><a href="#libjass.parts.FontScaleX">FontScaleX</a></li>
					<li><a href="#libjass.parts.FontScaleY">FontScaleY</a></li>
					<li><a href="#libjass.parts.FontSize">FontSize</a></li>
					<li><a href="#libjass.parts.FontSizeMinus">FontSizeMinus</a></li>
					<li><a href="#libjass.parts.FontSizePlus">FontSizePlus</a></li>
					<li><a href="#libjass.parts.GaussianBlur">GaussianBlur</a></li>
					<li><a href="#libjass.parts.Italic">Italic</a></li>
					<li><a href="#libjass.parts.LetterSpacing">LetterSpacing</a></li>
					<li><a href="#libjass.parts.Move">Move</a></li>
					<li><a href="#libjass.parts.NewLine">NewLine</a></li>
					<li><a href="#libjass.parts.OutlineAlpha">OutlineAlpha</a></li>
					<li><a href="#libjass.parts.OutlineColor">OutlineColor</a></li>
					<li><a href="#libjass.parts.OutlineKaraoke">OutlineKaraoke</a></li>
					<li><a href="#libjass.parts.Position">Position</a></li>
					<li><a href="#libjass.parts.PrimaryAlpha">PrimaryAlpha</a></li>
					<li><a href="#libjass.parts.PrimaryColor">PrimaryColor</a></li>
					<li><a href="#libjass.parts.RectangularClip">RectangularClip</a></li>
					<li><a href="#libjass.parts.Reset">Reset</a></li>
					<li><a href="#libjass.parts.RotateX">RotateX</a></li>
					<li><a href="#libjass.parts.RotateY">RotateY</a></li>
					<li><a href="#libjass.parts.RotateZ">RotateZ</a></li>
					<li><a href="#libjass.parts.RotationOrigin">RotationOrigin</a></li>
					<li><a href="#libjass.parts.SecondaryAlpha">SecondaryAlpha</a></li>
					<li><a href="#libjass.parts.SecondaryColor">SecondaryColor</a></li>
					<li><a href="#libjass.parts.Shadow">Shadow</a></li>
					<li><a href="#libjass.parts.ShadowAlpha">ShadowAlpha</a></li>
					<li><a href="#libjass.parts.ShadowColor">ShadowColor</a></li>
					<li><a href="#libjass.parts.ShadowX">ShadowX</a></li>
					<li><a href="#libjass.parts.ShadowY">ShadowY</a></li>
					<li><a href="#libjass.parts.SkewX">SkewX</a></li>
					<li><a href="#libjass.parts.SkewY">SkewY</a></li>
					<li><a href="#libjass.parts.StrikeThrough">StrikeThrough</a></li>
					<li><a href="#libjass.parts.SweepingColorKaraoke">SweepingColorKaraoke</a></li>
					<li><a href="#libjass.parts.Text">Text</a></li>
					<li><a href="#libjass.parts.Transform">Transform</a></li>
					<li><a href="#libjass.parts.Underline">Underline</a></li>
					<li><a href="#libjass.parts.VectorClip">VectorClip</a></li>
					<li><a href="#libjass.parts.WrappingStyle">WrappingStyle</a></li>
				</ul>
			</fieldset>

			<fieldset class="namespace">
				<legend><a href="#libjass.parts.drawing">libjass.parts.drawing</a></legend>
				<ul class="elements">
					<li><a href="#libjass.parts.drawing.Instruction">Instruction</a></li>
					<li><a href="#libjass.parts.drawing.CubicBezierCurveInstruction">CubicBezierCurveInstruction</a></li>
					<li><a href="#libjass.parts.drawing.LineInstruction">LineInstruction</a></li>
					<li><a href="#libjass.parts.drawing.MoveInstruction">MoveInstruction</a></li>
				</ul>
			</fieldset>

			<fieldset class="namespace">
				<legend><a href="#libjass.renderers">libjass.renderers</a></legend>
				<ul class="elements">
					<li><a href="#libjass.renderers.Clock">Clock</a></li>
					<li><a href="#libjass.renderers.AutoClock">AutoClock</a></li>
					<li><a href="#libjass.renderers.DefaultRenderer">DefaultRenderer</a></li>
					<li><a href="#libjass.renderers.EventSource">EventSource</a></li>
					<li><a href="#libjass.renderers.ManualClock">ManualClock</a></li>
					<li><a href="#libjass.renderers.NullRenderer">NullRenderer</a></li>
					<li><a href="#libjass.renderers.RendererSettings">RendererSettings</a></li>
					<li><a href="#libjass.renderers.VideoClock">VideoClock</a></li>
					<li><a href="#libjass.renderers.WebRenderer">WebRenderer</a></li>
					<li><a href="#libjass.renderers.ClockEvent">ClockEvent</a></li>
				</ul>
			</fieldset>

			<fieldset class="namespace">
				<legend><a href="#libjass.webworker">libjass.webworker</a></legend>
				<ul class="elements">
					<li><a href="#libjass.webworker.supported">supported</a></li>
					<li><a href="#libjass.webworker.createWorker">createWorker</a></li>
					<li><a href="#libjass.webworker.WorkerChannel">WorkerChannel</a></li>
					<li><a href="#libjass.webworker.WorkerCommands">WorkerCommands</a></li>
				</ul>
			</fieldset>

			<fieldset class="module">
				<legend><a href="#./parser/misc">./parser/misc</a></legend>
				<ul class="elements">
					<li><a href="#./parser/misc.parseLineIntoProperty">parseLineIntoProperty</a></li>
					<li><a href="#./parser/misc.parseLineIntoTypedTemplate">parseLineIntoTypedTemplate</a></li>
				</ul>
			</fieldset>

			<fieldset class="module">
				<legend><a href="#./parser/parse">./parser/parse</a></legend>
				<ul class="elements">
					<li><a href="#./parser/parse.ParseNode">ParseNode</a></li>
					<li><a href="#./parser/parse.makeTagParserFunction">makeTagParserFunction</a></li>
					<li><a href="#./parser/parse.ParserRun">ParserRun</a></li>
				</ul>
			</fieldset>

			<fieldset class="module">
				<legend><a href="#./parser/stream-parsers">./parser/stream-parsers</a></legend>
				<ul class="elements">
					<li><a href="#./parser/stream-parsers.uuencodedToBase64">uuencodedToBase64</a></li>
					<li><a href="#./parser/stream-parsers.Section">Section</a></li>
				</ul>
			</fieldset>

			<fieldset class="module">
				<legend><a href="#./parser/streams">./parser/streams</a></legend>
				<ul class="elements">
					<li><a href="#./parser/streams.ReadableStream">ReadableStream</a></li>
					<li><a href="#./parser/streams.TextDecoder">TextDecoder</a></li>
					<li><a href="#./parser/streams.TextDecoderConstructor">TextDecoderConstructor</a></li>
					<li><a href="#./parser/streams.ReadableStreamReader">ReadableStreamReader</a></li>
				</ul>
			</fieldset>

			<fieldset class="module">
				<legend><a href="#./parser/ttf">./parser/ttf</a></legend>
				<ul class="elements">
					<li><a href="#./parser/ttf.getTtfNames">getTtfNames</a></li>
					<li><a href="#./parser/ttf.field">field</a></li>
					<li><a href="#./parser/ttf.struct">struct</a></li>
					<li><a href="#./parser/ttf.NameRecord">NameRecord</a></li>
					<li><a href="#./parser/ttf.NameTableHeader">NameTableHeader</a></li>
					<li><a href="#./parser/ttf.OffsetTable">OffsetTable</a></li>
					<li><a href="#./parser/ttf.TableRecord">TableRecord</a></li>
					<li><a href="#./parser/ttf.DataType">DataType</a></li>
				</ul>
			</fieldset>

			<fieldset class="module">
				<legend><a href="#./renderers/settings">./renderers/settings</a></legend>
				<ul class="elements">
					<li><a href="#./renderers/settings.isFontFaceRule">isFontFaceRule</a></li>
				</ul>
			</fieldset>

			<fieldset class="module">
				<legend><a href="#./renderers/web/animation-collection">./renderers/web/animation-collection</a></legend>
				<ul class="elements">
					<li><a href="#./renderers/web/animation-collection.AnimationCollection">AnimationCollection</a></li>
				</ul>
			</fieldset>

			<fieldset class="module">
				<legend><a href="#./renderers/web/drawing-styles">./renderers/web/drawing-styles</a></legend>
				<ul class="elements">
					<li><a href="#./renderers/web/drawing-styles.DrawingStyles">DrawingStyles</a></li>
				</ul>
			</fieldset>

			<fieldset class="module">
				<legend><a href="#./renderers/web/font-size">./renderers/web/font-size</a></legend>
				<ul class="elements">
					<li><a href="#./renderers/web/font-size.calculateFontMetrics">calculateFontMetrics</a></li>
					<li><a href="#./renderers/web/font-size.fontSizeForLineHeight">fontSizeForLineHeight</a></li>
					<li><a href="#./renderers/web/font-size.fontMetricsFromLineHeights">fontMetricsFromLineHeights</a></li>
					<li><a href="#./renderers/web/font-size.fontSizeFromMetrics">fontSizeFromMetrics</a></li>
					<li><a href="#./renderers/web/font-size.lineHeightForFontSize">lineHeightForFontSize</a></li>
					<li><a href="#./renderers/web/font-size.lineHeightForFontSizeSync">lineHeightForFontSizeSync</a></li>
					<li><a href="#./renderers/web/font-size.prepareFontSizeElement">prepareFontSizeElement</a></li>
				</ul>
			</fieldset>

			<fieldset class="module">
				<legend><a href="#./renderers/web/keyframe">./renderers/web/keyframe</a></legend>
				<ul class="elements">
					<li><a href="#./renderers/web/keyframe.Keyframe">Keyframe</a></li>
				</ul>
			</fieldset>

			<fieldset class="module">
				<legend><a href="#./renderers/web/renderer">./renderers/web/renderer</a></legend>
				<ul class="elements">
					<li><a href="#./renderers/web/renderer.FontFace">FontFace</a></li>
					<li><a href="#./renderers/web/renderer.FontFaceSet">FontFaceSet</a></li>
					<li><a href="#./renderers/web/renderer.PreRenderedSub">PreRenderedSub</a></li>
				</ul>
			</fieldset>

			<fieldset class="module">
				<legend><a href="#./renderers/web/span-styles">./renderers/web/span-styles</a></legend>
				<ul class="elements">
					<li><a href="#./renderers/web/span-styles.SpanStyles">SpanStyles</a></li>
				</ul>
			</fieldset>

			<fieldset class="module">
				<legend><a href="#./settings">./settings</a></legend>
				<ul class="elements">
					<li><a href="#./settings.setDebugMode">setDebugMode</a></li>
					<li><a href="#./settings.setVerboseMode">setVerboseMode</a></li>
				</ul>
			</fieldset>

			<fieldset class="module">
				<legend><a href="#./types/misc">./types/misc</a></legend>
				<ul class="elements">
					<li><a href="#./types/misc.valueOrDefault">valueOrDefault</a></li>
					<li><a href="#./types/misc.Property">Property</a></li>
					<li><a href="#./types/misc.TypedTemplate">TypedTemplate</a></li>
				</ul>
			</fieldset>

			<fieldset class="module">
				<legend><a href="#./utility/map">./utility/map</a></legend>
				<ul class="elements">
					<li><a href="#./utility/map.setImplementation">setImplementation</a></li>
					<li><a href="#./utility/map.SimpleMap">SimpleMap</a></li>
				</ul>
			</fieldset>

			<fieldset class="module">
				<legend><a href="#./utility/mixin">./utility/mixin</a></legend>
				<ul class="elements">
					<li><a href="#./utility/mixin.mixin">mixin</a></li>
				</ul>
			</fieldset>

			<fieldset class="module">
				<legend><a href="#./utility/promise">./utility/promise</a></legend>
				<ul class="elements">
					<li><a href="#./utility/promise.any">any</a></li>
					<li><a href="#./utility/promise.first">first</a></li>
					<li><a href="#./utility/promise.lastly">lastly</a></li>
					<li><a href="#./utility/promise.setImplementation">setImplementation</a></li>
					<li><a href="#./utility/promise.Thenable">Thenable</a></li>
					<li><a href="#./utility/promise.ThenableThen">ThenableThen</a></li>
					<li><a href="#./utility/promise.first_rec">first_rec</a></li>
					<li><a href="#./utility/promise.FulfilledPromiseReaction">FulfilledPromiseReaction</a></li>
					<li><a href="#./utility/promise.RejectedPromiseReaction">RejectedPromiseReaction</a></li>
					<li><a href="#./utility/promise.SimplePromise">SimplePromise</a></li>
					<li><a href="#./utility/promise.SimplePromiseState">SimplePromiseState</a></li>
				</ul>
			</fieldset>

			<fieldset class="module">
				<legend><a href="#./utility/set">./utility/set</a></legend>
				<ul class="elements">
					<li><a href="#./utility/set.setImplementation">setImplementation</a></li>
					<li><a href="#./utility/set.SimpleSet">SimpleSet</a></li>
				</ul>
			</fieldset>

			<fieldset class="module">
				<legend><a href="#./utility/ts-helpers">./utility/ts-helpers</a></legend>
				<ul class="elements">
					<li><a href="#./utility/ts-helpers.___decorate">___decorate</a></li>
					<li><a href="#./utility/ts-helpers.___extends">___extends</a></li>
					<li><a href="#./utility/ts-helpers.decorateClass">decorateClass</a></li>
					<li><a href="#./utility/ts-helpers.decorateField">decorateField</a></li>
				</ul>
			</fieldset>

			<fieldset class="module">
				<legend><a href="#./webworker/channel">./webworker/channel</a></legend>
				<ul class="elements">
					<li><a href="#./webworker/channel.WorkerCommandHandler">WorkerCommandHandler</a></li>
					<li><a href="#./webworker/channel.WorkerChannelImpl">WorkerChannelImpl</a></li>
					<li><a href="#./webworker/channel.WorkerCommunication">WorkerCommunication</a></li>
					<li><a href="#./webworker/channel.WorkerRequestMessage">WorkerRequestMessage</a></li>
					<li><a href="#./webworker/channel.WorkerResponseMessage">WorkerResponseMessage</a></li>
				</ul>
			</fieldset>

			<fieldset class="module">
				<legend><a href="#./webworker/misc">./webworker/misc</a></legend>
				<ul class="elements">
					<li><a href="#./webworker/misc.deserialize">deserialize</a></li>
					<li><a href="#./webworker/misc.getWorkerCommandHandler">getWorkerCommandHandler</a></li>
					<li><a href="#./webworker/misc.registerClassPrototype">registerClassPrototype</a></li>
					<li><a href="#./webworker/misc.registerWorkerCommand">registerWorkerCommand</a></li>
					<li><a href="#./webworker/misc.serialize">serialize</a></li>
				</ul>
			</fieldset>

		</nav>

		<div class="content">
			<section class="namespace">
				<h1 id="libjass">Namespace libjass</h1>
				<section>
					<h2>Properties</h2>
					<dl id="libjass.debugMode" class="property">
						<dt class="name"><a href="#libjass.debugMode">debugMode</a></dt>
						<dt class="getter">Getter</dt>
						<dd class="description">
							Debug mode. When true, libjass logs some debug messages.
						</dd>
						<dd class="usage"><fieldset><legend /><pre><code>var result = libjass.debugMode;</code></pre></fieldset></dd>
						<dd class="return type">boolean</dd>
						<dt class="setter">Setter</dt>
						<dd class="description">
							Debug mode. When true, libjass logs some debug messages.
						</dd>
						<dd class="usage"><fieldset><legend /><pre><code>libjass.debugMode = value;</code></pre></fieldset></dd>
						<dd class="parameters">
							<dl>
								<dt class="parameter name">value</dt>
								<dd class="parameter type">boolean</dd>
								<dd class="parameter description"></dd>
							</dl>
						</dd>
					</dl>
					<dl id="libjass.Map" class="property">
						<dt class="name"><a href="#libjass.Map">Map</a></dt>
						<dt class="getter">Getter</dt>
						<dd class="description">
							<p>Set to the global implementation of Map if the environment has one, else set to <a href="#./utility/map.SimpleMap">./utility/map.SimpleMap</a></p><p>Set it to null to force <a href="#./utility/map.SimpleMap">./utility/map.SimpleMap</a> to be used even if a global Map is present.</p>
						</dd>
						<dd class="usage"><fieldset><legend /><pre><code>var result = libjass.Map;</code></pre></fieldset></dd>
						<dd class="return type">function(new:Map, !Array.&lt;!Array.&lt;*&gt;&gt;=)</dd>
						<dt class="setter">Setter</dt>
						<dd class="description">
							<p>Set to the global implementation of Map if the environment has one, else set to <a href="#./utility/map.SimpleMap">./utility/map.SimpleMap</a></p><p>Set it to null to force <a href="#./utility/map.SimpleMap">./utility/map.SimpleMap</a> to be used even if a global Map is present.</p>
						</dd>
						<dd class="usage"><fieldset><legend /><pre><code>libjass.Map = value;</code></pre></fieldset></dd>
						<dd class="parameters">
							<dl>
								<dt class="parameter name">value</dt>
								<dd class="parameter type">function(new:Map, !Array.&lt;!Array.&lt;*&gt;&gt;=)</dd>
								<dd class="parameter description"></dd>
							</dl>
						</dd>
					</dl>
					<dl id="libjass.Promise" class="property">
						<dt class="name"><a href="#libjass.Promise">Promise</a></dt>
						<dt class="getter">Getter</dt>
						<dd class="description">
							<p>Set to the global implementation of Promise if the environment has one, else set to <a href="#./utility/promise.SimplePromise">./utility/promise.SimplePromise</a></p><p>Set it to null to force <a href="#./utility/promise.SimplePromise">./utility/promise.SimplePromise</a> to be used even if a global Promise is present.</p>
						</dd>
						<dd class="usage"><fieldset><legend /><pre><code>var result = libjass.Promise;</code></pre></fieldset></dd>
						<dd class="return type">function(new:Promise)</dd>
						<dt class="setter">Setter</dt>
						<dd class="description">
							<p>Set to the global implementation of Promise if the environment has one, else set to <a href="#./utility/promise.SimplePromise">./utility/promise.SimplePromise</a></p><p>Set it to null to force <a href="#./utility/promise.SimplePromise">./utility/promise.SimplePromise</a> to be used even if a global Promise is present.</p>
						</dd>
						<dd class="usage"><fieldset><legend /><pre><code>libjass.Promise = value;</code></pre></fieldset></dd>
						<dd class="parameters">
							<dl>
								<dt class="parameter name">value</dt>
								<dd class="parameter type">function(new:Promise)</dd>
								<dd class="parameter description"></dd>
							</dl>
						</dd>
					</dl>
					<dl id="libjass.Set" class="property">
						<dt class="name"><a href="#libjass.Set">Set</a></dt>
						<dt class="getter">Getter</dt>
						<dd class="description">
							<p>Set to the global implementation of Set if the environment has one, else set to <a href="#./utility/set.SimpleSet">./utility/set.SimpleSet</a></p><p>Set it to null to force <a href="#./utility/set.SimpleSet">./utility/set.SimpleSet</a> to be used even if a global Set is present.</p>
						</dd>
						<dd class="usage"><fieldset><legend /><pre><code>var result = libjass.Set;</code></pre></fieldset></dd>
						<dd class="return type">function(new:Set, !Array.&lt;T&gt;=)</dd>
						<dt class="setter">Setter</dt>
						<dd class="description">
							<p>Set to the global implementation of Set if the environment has one, else set to <a href="#./utility/set.SimpleSet">./utility/set.SimpleSet</a></p><p>Set it to null to force <a href="#./utility/set.SimpleSet">./utility/set.SimpleSet</a> to be used even if a global Set is present.</p>
						</dd>
						<dd class="usage"><fieldset><legend /><pre><code>libjass.Set = value;</code></pre></fieldset></dd>
						<dd class="parameters">
							<dl>
								<dt class="parameter name">value</dt>
								<dd class="parameter type">function(new:Set, !Array.&lt;T&gt;=)</dd>
								<dd class="parameter description"></dd>
							</dl>
						</dd>
					</dl>
					<dl id="libjass.verboseMode" class="property">
						<dt class="name"><a href="#libjass.verboseMode">verboseMode</a></dt>
						<dt class="getter">Getter</dt>
						<dd class="description">
							Verbose debug mode. When true, libjass logs some more debug messages. This setting is independent of <a href="#libjass.debugMode">libjass.debugMode</a>
						</dd>
						<dd class="usage"><fieldset><legend /><pre><code>var result = libjass.verboseMode;</code></pre></fieldset></dd>
						<dd class="return type">boolean</dd>
						<dt class="setter">Setter</dt>
						<dd class="description">
							Verbose debug mode. When true, libjass logs some more debug messages. This setting is independent of <a href="#libjass.debugMode">libjass.debugMode</a>
						</dd>
						<dd class="usage"><fieldset><legend /><pre><code>libjass.verboseMode = value;</code></pre></fieldset></dd>
						<dd class="parameters">
							<dl>
								<dt class="parameter name">value</dt>
								<dd class="parameter type">boolean</dd>
								<dd class="parameter description"></dd>
							</dl>
						</dd>
					</dl>
				</section>
				<section>
					<h2>Classes</h2>
					<dl id="libjass.ASS" class="clazz">
						<dt class="name">class <a href="#libjass.ASS">ASS</a></dt>
						<dd class="description">
							This class represents an ASS script. It contains the <a href="#libjass.ScriptProperties">libjass.ScriptProperties</a>, an array of <a href="#libjass.Style">libjass.Style</a>s, and an array of <a href="#libjass.Dialogue">libjass.Dialogue</a>s.
						</dd>
						<dd class="usage"><fieldset><legend /><pre><code>var ass = new libjass.ASS();</code></pre></fieldset></dd>
						<dd class="members">
							<dl id="libjass.ASS.attachments" class="property">
								<dt class="name"><a href="#libjass.ASS.attachments">attachments</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									The attachments of this script.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = ass.attachments;</code></pre></fieldset></dd>
								<dd class="return type">!Array.&lt;!libjass.Attachment&gt;</dd>
							</dl>

							<dl id="libjass.ASS.dialogues" class="property">
								<dt class="name"><a href="#libjass.ASS.dialogues">dialogues</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									The dialogues in this script.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = ass.dialogues;</code></pre></fieldset></dd>
								<dd class="return type">!Array.&lt;!libjass.Dialogue&gt;</dd>
							</dl>

							<dl id="libjass.ASS.dialoguesFormatSpecifier" class="property">
								<dt class="name"><a href="#libjass.ASS.dialoguesFormatSpecifier">dialoguesFormatSpecifier</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									The format specifier for the styles section.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = ass.dialoguesFormatSpecifier;</code></pre></fieldset></dd>
								<dd class="return type">!Array.&lt;string&gt;</dd>
								<dt class="setter">Setter</dt>
								<dd class="description">
									The format specifier for the events section.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>ass.dialoguesFormatSpecifier = value;</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">value</dt>
										<dd class="parameter type">!Array.&lt;string&gt;</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
							</dl>

							<dl id="libjass.ASS.properties" class="property">
								<dt class="name"><a href="#libjass.ASS.properties">properties</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									The properties of this script.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = ass.properties;</code></pre></fieldset></dd>
								<dd class="return type">!libjass.ScriptProperties</dd>
							</dl>

							<dl id="libjass.ASS.styles" class="property">
								<dt class="name"><a href="#libjass.ASS.styles">styles</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									The styles in this script.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = ass.styles;</code></pre></fieldset></dd>
								<dd class="return type">!Map.&lt;string, !libjass.Style&gt;</dd>
							</dl>

							<dl id="libjass.ASS.stylesFormatSpecifier" class="property">
								<dt class="name"><a href="#libjass.ASS.stylesFormatSpecifier">stylesFormatSpecifier</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									The format specifier for the styles section.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = ass.stylesFormatSpecifier;</code></pre></fieldset></dd>
								<dd class="return type">!Array.&lt;string&gt;</dd>
								<dt class="setter">Setter</dt>
								<dd class="description">
									The format specifier for the events section.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>ass.stylesFormatSpecifier = value;</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">value</dt>
										<dd class="parameter type">!Array.&lt;string&gt;</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
							</dl>

							<dl id="libjass.ASS.addAttachment" class="function">
								<dt class="name"><a href="#libjass.ASS.addAttachment">addAttachment</a></dt>
								<dd class="description">
									Add an attachment to this ASS script.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>ass.addAttachment(attachment);</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">attachment</dt>
										<dd class="parameter type">!libjass.Attachment</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
							</dl>

							<dl id="libjass.ASS.addEvent" class="function">
								<dt class="name"><a href="#libjass.ASS.addEvent">addEvent</a></dt>
								<dd class="description">
									Add an event to this ASS script.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>ass.addEvent(line);</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">line</dt>
										<dd class="parameter type">string</dd>
										<dd class="parameter description">The line from the script that contains the new event.</dd>
									</dl>
								</dd>
							</dl>

							<dl id="libjass.ASS.addStyle" class="function">
								<dt class="name"><a href="#libjass.ASS.addStyle">addStyle</a></dt>
								<dd class="description">
									Add a style to this ASS script.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>ass.addStyle(line);</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">line</dt>
										<dd class="parameter type">string</dd>
										<dd class="parameter description">The line from the script that contains the new style.</dd>
									</dl>
								</dd>
							</dl>

							<dl id="libjass.ASS.fromReadableStream" class="function static">
								<dt class="name"><a href="#libjass.ASS.fromReadableStream">fromReadableStream</a></dt>
								<dd class="description">
									Creates an ASS object from the given ReadableStream.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = libjass.ASS.fromReadableStream(stream, encoding, type);</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">stream</dt>
										<dd class="parameter type">!ReadableStream</dd>
										<dd class="parameter description"></dd>
										<dt class="parameter name">encoding</dt>
										<dd class="parameter type">string="utf-8"</dd>
										<dd class="parameter description"></dd>
										<dt class="parameter name">type</dt>
										<dd class="parameter type">number=0</dd>
										<dd class="parameter description">The type of the script. One of the <a href="#libjass.Format">libjass.Format</a> constants.</dd>
									</dl>
								</dd>
								<dt>Returns</dt>
								<dd class="return type">!Promise.&lt;!libjass.ASS&gt;</dd>
								<dd class="return description">A promise that will be resolved with the ASS object when it has been fully parsed</dd>
							</dl>

							<dl id="libjass.ASS.fromStream" class="function static">
								<dt class="name"><a href="#libjass.ASS.fromStream">fromStream</a></dt>
								<dd class="description">
									Creates an ASS object from the given <a href="#libjass.parser.Stream">libjass.parser.Stream</a>.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = libjass.ASS.fromStream(stream, type);</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">stream</dt>
										<dd class="parameter type">!libjass.parser.Stream</dd>
										<dd class="parameter description">The stream to parse the script from</dd>
										<dt class="parameter name">type</dt>
										<dd class="parameter type">number=0</dd>
										<dd class="parameter description">The type of the script. One of the <a href="#libjass.Format">libjass.Format</a> constants.</dd>
									</dl>
								</dd>
								<dt>Returns</dt>
								<dd class="return type">!Promise.&lt;!libjass.ASS&gt;</dd>
								<dd class="return description">A promise that will be resolved with the ASS object when it has been fully parsed</dd>
							</dl>

							<dl id="libjass.ASS.fromString" class="function static">
								<dt class="name"><a href="#libjass.ASS.fromString">fromString</a></dt>
								<dd class="description">
									Creates an ASS object from the raw text of an ASS script.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = libjass.ASS.fromString(raw, type);</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">raw</dt>
										<dd class="parameter type">string</dd>
										<dd class="parameter description">The raw text of the script.</dd>
										<dt class="parameter name">type</dt>
										<dd class="parameter type">number=0</dd>
										<dd class="parameter description">The type of the script. One of the <a href="#libjass.Format">libjass.Format</a> constants.</dd>
									</dl>
								</dd>
								<dt>Returns</dt>
								<dd class="return type">!Promise.&lt;!libjass.ASS&gt;</dd>
								<dd class="return description"></dd>
							</dl>

							<dl id="libjass.ASS.fromUrl" class="function static">
								<dt class="name"><a href="#libjass.ASS.fromUrl">fromUrl</a></dt>
								<dd class="description">
									Creates an ASS object from the given URL.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = libjass.ASS.fromUrl(url, type);</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">url</dt>
										<dd class="parameter type">string</dd>
										<dd class="parameter description">The URL of the script.</dd>
										<dt class="parameter name">type</dt>
										<dd class="parameter type">number=0</dd>
										<dd class="parameter description">The type of the script. One of the <a href="#libjass.Format">libjass.Format</a> constants.</dd>
									</dl>
								</dd>
								<dt>Returns</dt>
								<dd class="return type">!Promise.&lt;!libjass.ASS&gt;</dd>
								<dd class="return description">A promise that will be resolved with the ASS object when it has been fully parsed</dd>
							</dl>

						</dd>
					</dl>
					<dl id="libjass.Attachment" class="clazz">
						<dt class="name">class <a href="#libjass.Attachment">Attachment</a></dt>
						<dd class="description">
							This class represents an attachment in a <a href="#libjass.ASS">libjass.ASS</a> script.
						</dd>
						<dd class="usage"><fieldset><legend /><pre><code>var attachment = new libjass.Attachment(filename, type);</code></pre></fieldset></dd>
						<dd class="parameters">
							<dl>
								<dt class="parameter name">filename</dt>
								<dd class="parameter type">string</dd>
								<dd class="parameter description">The filename of this attachment.</dd>
								<dt class="parameter name">type</dt>
								<dd class="parameter type">number</dd>
								<dd class="parameter description">The type of this attachment.</dd>
							</dl>
						</dd>
						<dd class="members">
							<dl id="libjass.Attachment.contents" class="property">
								<dt class="name"><a href="#libjass.Attachment.contents">contents</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									The contents of this attachment in base64 encoding.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = attachment.contents;</code></pre></fieldset></dd>
								<dd class="return type">number</dd>
								<dt class="setter">Setter</dt>
								<dd class="description">
									The contents of this attachment in base64 encoding.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>attachment.contents = value;</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">value</dt>
										<dd class="parameter type">number</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
							</dl>

							<dl id="libjass.Attachment.filename" class="property">
								<dt class="name"><a href="#libjass.Attachment.filename">filename</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									The filename of this attachment.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = attachment.filename;</code></pre></fieldset></dd>
								<dd class="return type">number</dd>
							</dl>

							<dl id="libjass.Attachment.type" class="property">
								<dt class="name"><a href="#libjass.Attachment.type">type</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									The type of this attachment.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = attachment.type;</code></pre></fieldset></dd>
								<dd class="return type">number</dd>
							</dl>

						</dd>
					</dl>
					<dl id="libjass.DeferredPromise" class="clazz">
						<dt class="name">class <a href="#libjass.DeferredPromise">DeferredPromise.&lt;T&gt;</a></dt>
						<dd class="description">
							A deferred promise.
						</dd>
						<dd class="usage"><fieldset><legend /><pre><code>var deferredPromise = new libjass.DeferredPromise();</code></pre></fieldset></dd>
						<dd class="members">
							<dl id="libjass.DeferredPromise.promise" class="property">
								<dt class="name"><a href="#libjass.DeferredPromise.promise">promise</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = deferredPromise.promise;</code></pre></fieldset></dd>
								<dd class="return type">!Promise.&lt;T&gt;</dd>
							</dl>

							<dl id="libjass.DeferredPromise.reject" class="property">
								<dt class="name"><a href="#libjass.DeferredPromise.reject">reject</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = deferredPromise.reject;</code></pre></fieldset></dd>
								<dd class="return type">function(*)</dd>
								<dt class="setter">Setter</dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>deferredPromise.reject = value;</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">value</dt>
										<dd class="parameter type">function(*)</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
							</dl>

							<dl id="libjass.DeferredPromise.resolve" class="property">
								<dt class="name"><a href="#libjass.DeferredPromise.resolve">resolve</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = deferredPromise.resolve;</code></pre></fieldset></dd>
								<dd class="return type">function(T|!Thenable.&lt;T&gt;)</dd>
								<dt class="setter">Setter</dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>deferredPromise.resolve = value;</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">value</dt>
										<dd class="parameter type">function(T|!Thenable.&lt;T&gt;)</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
							</dl>

						</dd>
					</dl>
					<dl id="libjass.Dialogue" class="clazz">
						<dt class="name">class <a href="#libjass.Dialogue">Dialogue</a></dt>
						<dd class="description">
							This class represents a dialogue in a <a href="#libjass.ASS">libjass.ASS</a> script.
						</dd>
						<dd class="usage"><fieldset><legend /><pre><code>var dialogue = new libjass.Dialogue(template, ass);</code></pre></fieldset></dd>
						<dd class="parameters">
							<dl>
								<dt class="parameter name">template</dt>
								<dd class="parameter type">!Map.&lt;string, string&gt;</dd>
								<dd class="parameter description">The template object that contains the dialogue's properties. It is a map of the string values read from the ASS file.</dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">"Style"</dt>
										<dd class="parameter type">string</dd>
										<dd class="parameter description">The name of the default style of this dialogue</dd>
										<dt class="parameter name">"Start"</dt>
										<dd class="parameter type">string</dd>
										<dd class="parameter description">The start time</dd>
										<dt class="parameter name">"End"</dt>
										<dd class="parameter type">string</dd>
										<dd class="parameter description">The end time</dd>
										<dt class="parameter name">"Layer"</dt>
										<dd class="parameter type">string</dd>
										<dd class="parameter description">The layer number</dd>
										<dt class="parameter name">"Text"</dt>
										<dd class="parameter type">string</dd>
										<dd class="parameter description">The text of this dialogue</dd>
									</dl>
								</dd>
								<dt class="parameter name">ass</dt>
								<dd class="parameter type">!libjass.ASS</dd>
								<dd class="parameter description">The ASS object to which this dialogue belongs</dd>
							</dl>
						</dd>
						<dd class="members">
							<dl id="libjass.Dialogue.alignment" class="property">
								<dt class="name"><a href="#libjass.Dialogue.alignment">alignment</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									The alignment number of this dialogue.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = dialogue.alignment;</code></pre></fieldset></dd>
								<dd class="return type">number</dd>
							</dl>

							<dl id="libjass.Dialogue.containsTransformTag" class="property">
								<dt class="name"><a href="#libjass.Dialogue.containsTransformTag">containsTransformTag</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									Convenience getter for whether this dialogue contains a {\t} tag.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = dialogue.containsTransformTag;</code></pre></fieldset></dd>
								<dd class="return type">boolean</dd>
							</dl>

							<dl id="libjass.Dialogue.end" class="property">
								<dt class="name"><a href="#libjass.Dialogue.end">end</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									The end time of this dialogue.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = dialogue.end;</code></pre></fieldset></dd>
								<dd class="return type">number</dd>
							</dl>

							<dl id="libjass.Dialogue.id" class="property">
								<dt class="name"><a href="#libjass.Dialogue.id">id</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									The unique ID of this dialogue. Auto-generated.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = dialogue.id;</code></pre></fieldset></dd>
								<dd class="return type">number</dd>
							</dl>

							<dl id="libjass.Dialogue.layer" class="property">
								<dt class="name"><a href="#libjass.Dialogue.layer">layer</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									The layer number of this dialogue.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = dialogue.layer;</code></pre></fieldset></dd>
								<dd class="return type">number</dd>
							</dl>

							<dl id="libjass.Dialogue.parts" class="property">
								<dt class="name"><a href="#libjass.Dialogue.parts">parts</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									The <a href="#libjass.parts">libjass.parts</a> of this dialogue.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = dialogue.parts;</code></pre></fieldset></dd>
								<dd class="return type">!Array.&lt;!libjass.parts.Part&gt;</dd>
							</dl>

							<dl id="libjass.Dialogue.start" class="property">
								<dt class="name"><a href="#libjass.Dialogue.start">start</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									The start time of this dialogue.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = dialogue.start;</code></pre></fieldset></dd>
								<dd class="return type">number</dd>
							</dl>

							<dl id="libjass.Dialogue.style" class="property">
								<dt class="name"><a href="#libjass.Dialogue.style">style</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									The default style of this dialogue.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = dialogue.style;</code></pre></fieldset></dd>
								<dd class="return type">!libjass.Style</dd>
							</dl>

							<dl id="libjass.Dialogue.toString" class="function">
								<dt class="name"><a href="#libjass.Dialogue.toString">toString</a></dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = dialogue.toString();</code></pre></fieldset></dd>
								<dt>Returns</dt>
								<dd class="return type">string</dd>
								<dd class="return description">A simple representation of this dialogue's properties and parts.</dd>
							</dl>

							<dl id="libjass.Dialogue._parsePartsString" class="function private">
								<dt class="name"><a href="#libjass.Dialogue._parsePartsString">_parsePartsString</a></dt>
								<dd class="description">
									Parses this dialogue's parts from the raw parts string.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>dialogue._parsePartsString();</code></pre></fieldset></dd>
							</dl>

							<dl id="libjass.Dialogue._toTime" class="function private static">
								<dt class="name"><a href="#libjass.Dialogue._toTime">_toTime</a></dt>
								<dd class="description">
									Converts this string into the number of seconds it represents. This string must be in the form of hh:mm:ss.MMM
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = libjass.Dialogue._toTime(str);</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">str</dt>
										<dd class="parameter type">string</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
								<dt>Returns</dt>
								<dd class="return type">number</dd>
								<dd class="return description"></dd>
							</dl>

						</dd>
					</dl>
					<dl id="libjass.ScriptProperties" class="clazz">
						<dt class="name">class <a href="#libjass.ScriptProperties">ScriptProperties</a></dt>
						<dd class="description">
							This class represents the properties of a <a href="#libjass.ASS">libjass.ASS</a> script.
						</dd>
						<dd class="usage"><fieldset><legend /><pre><code>var scriptProperties = new libjass.ScriptProperties();</code></pre></fieldset></dd>
						<dd class="members">
							<dl id="libjass.ScriptProperties.resolutionX" class="property">
								<dt class="name"><a href="#libjass.ScriptProperties.resolutionX">resolutionX</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									The horizontal script resolution.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = scriptProperties.resolutionX;</code></pre></fieldset></dd>
								<dd class="return type">number</dd>
								<dt class="setter">Setter</dt>
								<dd class="description">
									The horizontal script resolution.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>scriptProperties.resolutionX = value;</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">value</dt>
										<dd class="parameter type">number</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
							</dl>

							<dl id="libjass.ScriptProperties.resolutionY" class="property">
								<dt class="name"><a href="#libjass.ScriptProperties.resolutionY">resolutionY</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									The vertical script resolution.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = scriptProperties.resolutionY;</code></pre></fieldset></dd>
								<dd class="return type">number</dd>
								<dt class="setter">Setter</dt>
								<dd class="description">
									The vertical script resolution.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>scriptProperties.resolutionY = value;</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">value</dt>
										<dd class="parameter type">number</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
							</dl>

							<dl id="libjass.ScriptProperties.scaleBorderAndShadow" class="property">
								<dt class="name"><a href="#libjass.ScriptProperties.scaleBorderAndShadow">scaleBorderAndShadow</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									Whether to scale outline widths and shadow depths from script resolution to video resolution or not. If true, widths and depths are scaled.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = scriptProperties.scaleBorderAndShadow;</code></pre></fieldset></dd>
								<dd class="return type">boolean</dd>
								<dt class="setter">Setter</dt>
								<dd class="description">
									Whether to scale outline widths and shadow depths from script resolution to video resolution or not. If true, widths and depths are scaled.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>scriptProperties.scaleBorderAndShadow = value;</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">value</dt>
										<dd class="parameter type">boolean</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
							</dl>

							<dl id="libjass.ScriptProperties.wrappingStyle" class="property">
								<dt class="name"><a href="#libjass.ScriptProperties.wrappingStyle">wrappingStyle</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									The wrap style. One of the <a href="#libjass.WrappingStyle">libjass.WrappingStyle</a> constants.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = scriptProperties.wrappingStyle;</code></pre></fieldset></dd>
								<dd class="return type">number</dd>
								<dt class="setter">Setter</dt>
								<dd class="description">
									The wrap style. One of the <a href="#libjass.WrappingStyle">libjass.WrappingStyle</a> constants.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>scriptProperties.wrappingStyle = value;</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">value</dt>
										<dd class="parameter type">number</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
							</dl>

						</dd>
					</dl>
					<dl id="libjass.Style" class="clazz">
						<dt class="name">class <a href="#libjass.Style">Style</a></dt>
						<dd class="description">
							This class represents a single global style declaration in a <a href="#libjass.ASS">libjass.ASS</a> script. The styles can be obtained via the <a href="#libjass.ASS.styles">libjass.ASS.styles</a> property.
						</dd>
						<dd class="usage"><fieldset><legend /><pre><code>var style = new libjass.Style(template);</code></pre></fieldset></dd>
						<dd class="parameters">
							<dl>
								<dt class="parameter name">template</dt>
								<dd class="parameter type">!Map.&lt;string, string&gt;</dd>
								<dd class="parameter description">The template object that contains the style's properties. It is a map of the string values read from the ASS file.</dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">"Name"</dt>
										<dd class="parameter type">string</dd>
										<dd class="parameter description">The name of the style</dd>
										<dt class="parameter name">"Italic"</dt>
										<dd class="parameter type">string</dd>
										<dd class="parameter description">-1 if the style is italicized</dd>
										<dt class="parameter name">"Bold"</dt>
										<dd class="parameter type">string</dd>
										<dd class="parameter description">-1 if the style is bold</dd>
										<dt class="parameter name">"Underline"</dt>
										<dd class="parameter type">string</dd>
										<dd class="parameter description">-1 if the style is underlined</dd>
										<dt class="parameter name">"StrikeOut"</dt>
										<dd class="parameter type">string</dd>
										<dd class="parameter description">-1 if the style is struck-through</dd>
										<dt class="parameter name">"Fontname"</dt>
										<dd class="parameter type">string</dd>
										<dd class="parameter description">The name of the font</dd>
										<dt class="parameter name">"Fontsize"</dt>
										<dd class="parameter type">string</dd>
										<dd class="parameter description">The size of the font</dd>
										<dt class="parameter name">"ScaleX"</dt>
										<dd class="parameter type">string</dd>
										<dd class="parameter description">The horizontal scaling of the font</dd>
										<dt class="parameter name">"ScaleY"</dt>
										<dd class="parameter type">string</dd>
										<dd class="parameter description">The vertical scaling of the font</dd>
										<dt class="parameter name">"Spacing"</dt>
										<dd class="parameter type">string</dd>
										<dd class="parameter description">The letter spacing of the font</dd>
										<dt class="parameter name">"PrimaryColour"</dt>
										<dd class="parameter type">string</dd>
										<dd class="parameter description">The primary color</dd>
										<dt class="parameter name">"OutlineColour"</dt>
										<dd class="parameter type">string</dd>
										<dd class="parameter description">The outline color</dd>
										<dt class="parameter name">"BackColour"</dt>
										<dd class="parameter type">string</dd>
										<dd class="parameter description">The shadow color</dd>
										<dt class="parameter name">"Outline"</dt>
										<dd class="parameter type">string</dd>
										<dd class="parameter description">The outline thickness</dd>
										<dt class="parameter name">"Shadow"</dt>
										<dd class="parameter type">string</dd>
										<dd class="parameter description">The shadow depth</dd>
										<dt class="parameter name">"Alignment"</dt>
										<dd class="parameter type">string</dd>
										<dd class="parameter description">The alignment number</dd>
										<dt class="parameter name">"MarginL"</dt>
										<dd class="parameter type">string</dd>
										<dd class="parameter description">The left margin</dd>
										<dt class="parameter name">"MarginR"</dt>
										<dd class="parameter type">string</dd>
										<dd class="parameter description">The right margin</dd>
										<dt class="parameter name">"MarginV"</dt>
										<dd class="parameter type">string</dd>
										<dd class="parameter description">The vertical margin</dd>
									</dl>
								</dd>
							</dl>
						</dd>
						<dd class="members">
							<dl id="libjass.Style.alignment" class="property">
								<dt class="name"><a href="#libjass.Style.alignment">alignment</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									The alignment of dialogues of this style.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = style.alignment;</code></pre></fieldset></dd>
								<dd class="return type">number</dd>
							</dl>

							<dl id="libjass.Style.bold" class="property">
								<dt class="name"><a href="#libjass.Style.bold">bold</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									Whether this style is bold or not.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = style.bold;</code></pre></fieldset></dd>
								<dd class="return type">boolean</dd>
							</dl>

							<dl id="libjass.Style.borderStyle" class="property">
								<dt class="name"><a href="#libjass.Style.borderStyle">borderStyle</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									The border style of this style.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = style.borderStyle;</code></pre></fieldset></dd>
								<dd class="return type">number</dd>
							</dl>

							<dl id="libjass.Style.fontName" class="property">
								<dt class="name"><a href="#libjass.Style.fontName">fontName</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									The name of this style's font.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = style.fontName;</code></pre></fieldset></dd>
								<dd class="return type">string</dd>
							</dl>

							<dl id="libjass.Style.fontScaleX" class="property">
								<dt class="name"><a href="#libjass.Style.fontScaleX">fontScaleX</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									The horizontal scaling of this style's font.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = style.fontScaleX;</code></pre></fieldset></dd>
								<dd class="return type">number</dd>
							</dl>

							<dl id="libjass.Style.fontScaleY" class="property">
								<dt class="name"><a href="#libjass.Style.fontScaleY">fontScaleY</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									The vertical scaling of this style's font.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = style.fontScaleY;</code></pre></fieldset></dd>
								<dd class="return type">number</dd>
							</dl>

							<dl id="libjass.Style.fontSize" class="property">
								<dt class="name"><a href="#libjass.Style.fontSize">fontSize</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									The size of this style's font.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = style.fontSize;</code></pre></fieldset></dd>
								<dd class="return type">number</dd>
							</dl>

							<dl id="libjass.Style.italic" class="property">
								<dt class="name"><a href="#libjass.Style.italic">italic</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									Whether this style is italicized or not.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = style.italic;</code></pre></fieldset></dd>
								<dd class="return type">string</dd>
							</dl>

							<dl id="libjass.Style.letterSpacing" class="property">
								<dt class="name"><a href="#libjass.Style.letterSpacing">letterSpacing</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									The letter spacing scaling of this style's font.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = style.letterSpacing;</code></pre></fieldset></dd>
								<dd class="return type">number</dd>
							</dl>

							<dl id="libjass.Style.marginLeft" class="property">
								<dt class="name"><a href="#libjass.Style.marginLeft">marginLeft</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									The left margin of dialogues of this style.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = style.marginLeft;</code></pre></fieldset></dd>
								<dd class="return type">number</dd>
							</dl>

							<dl id="libjass.Style.marginRight" class="property">
								<dt class="name"><a href="#libjass.Style.marginRight">marginRight</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									The right margin of dialogues of this style.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = style.marginRight;</code></pre></fieldset></dd>
								<dd class="return type">number</dd>
							</dl>

							<dl id="libjass.Style.marginVertical" class="property">
								<dt class="name"><a href="#libjass.Style.marginVertical">marginVertical</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									The vertical margin of dialogues of this style.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = style.marginVertical;</code></pre></fieldset></dd>
								<dd class="return type">number</dd>
							</dl>

							<dl id="libjass.Style.name" class="property">
								<dt class="name"><a href="#libjass.Style.name">name</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									The name of this style.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = style.name;</code></pre></fieldset></dd>
								<dd class="return type">string</dd>
							</dl>

							<dl id="libjass.Style.outlineColor" class="property">
								<dt class="name"><a href="#libjass.Style.outlineColor">outlineColor</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									The color of this style's outline.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = style.outlineColor;</code></pre></fieldset></dd>
								<dd class="return type">!libjass.parts.Color</dd>
							</dl>

							<dl id="libjass.Style.outlineThickness" class="property">
								<dt class="name"><a href="#libjass.Style.outlineThickness">outlineThickness</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									The thickness of this style's outline.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = style.outlineThickness;</code></pre></fieldset></dd>
								<dd class="return type">number</dd>
							</dl>

							<dl id="libjass.Style.primaryColor" class="property">
								<dt class="name"><a href="#libjass.Style.primaryColor">primaryColor</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									The color of this style's font.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = style.primaryColor;</code></pre></fieldset></dd>
								<dd class="return type">!libjass.parts.Color</dd>
							</dl>

							<dl id="libjass.Style.rotationZ" class="property">
								<dt class="name"><a href="#libjass.Style.rotationZ">rotationZ</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									The default Z-rotation of this style.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = style.rotationZ;</code></pre></fieldset></dd>
								<dd class="return type">number</dd>
							</dl>

							<dl id="libjass.Style.secondaryColor" class="property">
								<dt class="name"><a href="#libjass.Style.secondaryColor">secondaryColor</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									The alternate color of this style's font, used in karaoke.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = style.secondaryColor;</code></pre></fieldset></dd>
								<dd class="return type">!libjass.parts.Color</dd>
							</dl>

							<dl id="libjass.Style.shadowColor" class="property">
								<dt class="name"><a href="#libjass.Style.shadowColor">shadowColor</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									The color of this style's shadow.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = style.shadowColor;</code></pre></fieldset></dd>
								<dd class="return type">!libjass.parts.Color</dd>
							</dl>

							<dl id="libjass.Style.shadowDepth" class="property">
								<dt class="name"><a href="#libjass.Style.shadowDepth">shadowDepth</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									The depth of this style's shadow.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = style.shadowDepth;</code></pre></fieldset></dd>
								<dd class="return type">number</dd>
							</dl>

							<dl id="libjass.Style.strikeThrough" class="property">
								<dt class="name"><a href="#libjass.Style.strikeThrough">strikeThrough</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									Whether this style is struck-through or not.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = style.strikeThrough;</code></pre></fieldset></dd>
								<dd class="return type">boolean</dd>
							</dl>

							<dl id="libjass.Style.underline" class="property">
								<dt class="name"><a href="#libjass.Style.underline">underline</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									Whether this style is underlined or not.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = style.underline;</code></pre></fieldset></dd>
								<dd class="return type">boolean</dd>
							</dl>

						</dd>
					</dl>
				</section>
				<section>
					<h2>Enums</h2>
					<dl id="libjass.AttachmentType" class="enum">
						<dt class="name">enum <a href="#libjass.AttachmentType">AttachmentType</a></dt>
						<dd class="description">
							The type of an attachment.
						</dd>
						<dd class="members">
							<dl id="libjass.AttachmentType.Font" class="member">
								<dt class="name"><a href="#libjass.AttachmentType.Font">Font</a> = 0</dt>
								<dd class="description">
									
								</dd>
							</dl>
							<dl id="libjass.AttachmentType.Graphic" class="member">
								<dt class="name"><a href="#libjass.AttachmentType.Graphic">Graphic</a> = 1</dt>
								<dd class="description">
									
								</dd>
							</dl>
						</dd>
					</dl>
					<dl id="libjass.BorderStyle" class="enum">
						<dt class="name">enum <a href="#libjass.BorderStyle">BorderStyle</a></dt>
						<dd class="description">
							The border style defined in the <a href="#libjass.Style">libjass.Style</a> properties.
						</dd>
						<dd class="members">
							<dl id="libjass.BorderStyle.Outline" class="member">
								<dt class="name"><a href="#libjass.BorderStyle.Outline">Outline</a> = 1</dt>
								<dd class="description">
									
								</dd>
							</dl>
							<dl id="libjass.BorderStyle.OpaqueBox" class="member">
								<dt class="name"><a href="#libjass.BorderStyle.OpaqueBox">OpaqueBox</a> = 3</dt>
								<dd class="description">
									
								</dd>
							</dl>
						</dd>
					</dl>
					<dl id="libjass.Format" class="enum">
						<dt class="name">enum <a href="#libjass.Format">Format</a></dt>
						<dd class="description">
							The format of the string passed to <a href="#libjass.ASS.fromString">libjass.ASS.fromString</a>
						</dd>
						<dd class="members">
							<dl id="libjass.Format.ASS" class="member">
								<dt class="name"><a href="#libjass.Format.ASS">ASS</a> = 0</dt>
								<dd class="description">
									
								</dd>
							</dl>
							<dl id="libjass.Format.SRT" class="member">
								<dt class="name"><a href="#libjass.Format.SRT">SRT</a> = 1</dt>
								<dd class="description">
									
								</dd>
							</dl>
						</dd>
					</dl>
					<dl id="libjass.WrappingStyle" class="enum">
						<dt class="name">enum <a href="#libjass.WrappingStyle">WrappingStyle</a></dt>
						<dd class="description">
							The wrapping style defined in the <a href="#libjass.ScriptProperties">libjass.ScriptProperties</a>
						</dd>
						<dd class="members">
							<dl id="libjass.WrappingStyle.SmartWrappingWithWiderTopLine" class="member">
								<dt class="name"><a href="#libjass.WrappingStyle.SmartWrappingWithWiderTopLine">SmartWrappingWithWiderTopLine</a> = 0</dt>
								<dd class="description">
									
								</dd>
							</dl>
							<dl id="libjass.WrappingStyle.SmartWrappingWithWiderBottomLine" class="member">
								<dt class="name"><a href="#libjass.WrappingStyle.SmartWrappingWithWiderBottomLine">SmartWrappingWithWiderBottomLine</a> = 3</dt>
								<dd class="description">
									
								</dd>
							</dl>
							<dl id="libjass.WrappingStyle.EndOfLineWrapping" class="member">
								<dt class="name"><a href="#libjass.WrappingStyle.EndOfLineWrapping">EndOfLineWrapping</a> = 1</dt>
								<dd class="description">
									
								</dd>
							</dl>
							<dl id="libjass.WrappingStyle.NoLineWrapping" class="member">
								<dt class="name"><a href="#libjass.WrappingStyle.NoLineWrapping">NoLineWrapping</a> = 2</dt>
								<dd class="description">
									
								</dd>
							</dl>
						</dd>
					</dl>
				</section>
			</section>
			<section class="namespace">
				<h1 id="libjass.parser">Namespace libjass.parser</h1>
				<section>
					<h2>Free functions</h2>
					<dl id="libjass.parser.parse" class="function">
						<dt class="name"><a href="#libjass.parser.parse">parse</a></dt>
						<dd class="description">
							Parses a given string with the specified rule.
						</dd>
						<dd class="usage"><fieldset><legend /><pre><code>var result = libjass.parser.parse(input, rule);</code></pre></fieldset></dd>
						<dd class="parameters">
							<dl>
								<dt class="parameter name">input</dt>
								<dd class="parameter type">string</dd>
								<dd class="parameter description">The string to be parsed.</dd>
								<dt class="parameter name">rule</dt>
								<dd class="parameter type">string</dd>
								<dd class="parameter description">The rule to parse the string with</dd>
							</dl>
						</dd>
						<dt>Returns</dt>
						<dd class="return type">*</dd>
						<dd class="return description">The value returned depends on the rule used.</dd>
					</dl>
				</section>
				<section>
					<h2>Interfaces</h2>
					<dl id="libjass.parser.Stream" class="interface">
						<dt class="name">interface <a href="#libjass.parser.Stream">Stream</a></dt>
						<dd class="description">
							An interface for a stream.
						</dd>
						<dd class="members">
							<dl id="libjass.parser.Stream.nextLine" class="function">
								<dt class="name"><a href="#libjass.parser.Stream.nextLine">nextLine</a></dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = stream.nextLine();</code></pre></fieldset></dd>
								<dt>Returns</dt>
								<dd class="return type">!Promise.&lt;?string&gt;</dd>
								<dd class="return description">A promise that will be resolved with the next line, or null if the stream is exhausted.</dd>
							</dl>

						</dd>
					</dl>
				</section>
				<section>
					<h2>Classes</h2>
					<dl id="libjass.parser.BrowserReadableStream" class="clazz">
						<dt class="name">class <a href="#libjass.parser.BrowserReadableStream">BrowserReadableStream</a> implements <a href="#libjass.parser.Stream">Stream</a></dt>
						<dd class="description">
							A <a href="#libjass.parser.Stream">libjass.parser.Stream</a> that reads from a ReadableStream object.
						</dd>
						<dd class="usage"><fieldset><legend /><pre><code>var browserReadableStream = new libjass.parser.BrowserReadableStream(stream, encoding);</code></pre></fieldset></dd>
						<dd class="parameters">
							<dl>
								<dt class="parameter name">stream</dt>
								<dd class="parameter type">!ReadableStream</dd>
								<dd class="parameter description"></dd>
								<dt class="parameter name">encoding</dt>
								<dd class="parameter type">string</dd>
								<dd class="parameter description"></dd>
							</dl>
						</dd>
						<dd class="members">
							<dl id="libjass.parser.BrowserReadableStream.nextLine" class="function">
								<dt class="name"><a href="#libjass.parser.BrowserReadableStream.nextLine">nextLine</a></dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = browserReadableStream.nextLine();</code></pre></fieldset></dd>
								<dt>Returns</dt>
								<dd class="return type">!Promise.&lt;?string&gt;</dd>
								<dd class="return description">A promise that will be resolved with the next line, or null if the stream is exhausted.</dd>
							</dl>

							<dl id="libjass.parser.BrowserReadableStream._tryResolveNextLine" class="function private">
								<dt class="name"><a href="#libjass.parser.BrowserReadableStream._tryResolveNextLine">_tryResolveNextLine</a></dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>browserReadableStream._tryResolveNextLine();</code></pre></fieldset></dd>
							</dl>

						</dd>
					</dl>
					<dl id="libjass.parser.SrtStreamParser" class="clazz">
						<dt class="name">class <a href="#libjass.parser.SrtStreamParser">SrtStreamParser</a></dt>
						<dd class="description">
							A parser that parses an <a href="#libjass.ASS">libjass.ASS</a> object from a <a href="#libjass.parser.Stream">libjass.parser.Stream</a> of an SRT script.
						</dd>
						<dd class="usage"><fieldset><legend /><pre><code>var srtStreamParser = new libjass.parser.SrtStreamParser(stream);</code></pre></fieldset></dd>
						<dd class="parameters">
							<dl>
								<dt class="parameter name">stream</dt>
								<dd class="parameter type">!libjass.parser.Stream</dd>
								<dd class="parameter description">The <a href="#libjass.parser.Stream">libjass.parser.Stream</a> to parse</dd>
							</dl>
						</dd>
						<dd class="members">
							<dl id="libjass.parser.SrtStreamParser.ass" class="property">
								<dt class="name"><a href="#libjass.parser.SrtStreamParser.ass">ass</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = srtStreamParser.ass;</code></pre></fieldset></dd>
								<dd class="return type">!Promise.&lt;!libjass.ASS&gt;</dd>
							</dl>

							<dl id="libjass.parser.SrtStreamParser._onNextLine" class="function private">
								<dt class="name"><a href="#libjass.parser.SrtStreamParser._onNextLine">_onNextLine</a></dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>srtStreamParser._onNextLine(line);</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">line</dt>
										<dd class="parameter type">string</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
							</dl>

						</dd>
					</dl>
					<dl id="libjass.parser.StreamParser" class="clazz">
						<dt class="name">class <a href="#libjass.parser.StreamParser">StreamParser</a></dt>
						<dd class="description">
							A parser that parses an <a href="#libjass.ASS">libjass.ASS</a> object from a <a href="#libjass.parser.Stream">libjass.parser.Stream</a>.
						</dd>
						<dd class="usage"><fieldset><legend /><pre><code>var streamParser = new libjass.parser.StreamParser(stream);</code></pre></fieldset></dd>
						<dd class="parameters">
							<dl>
								<dt class="parameter name">stream</dt>
								<dd class="parameter type">!libjass.parser.Stream</dd>
								<dd class="parameter description">The <a href="#libjass.parser.Stream">libjass.parser.Stream</a> to parse</dd>
							</dl>
						</dd>
						<dd class="members">
							<dl id="libjass.parser.StreamParser.ass" class="property">
								<dt class="name"><a href="#libjass.parser.StreamParser.ass">ass</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = streamParser.ass;</code></pre></fieldset></dd>
								<dd class="return type">!Promise.&lt;!libjass.ASS&gt;</dd>
							</dl>

							<dl id="libjass.parser.StreamParser.currentSection" class="property">
								<dt class="name"><a href="#libjass.parser.StreamParser.currentSection">currentSection</a></dt>
								<dt class="getter private">Getter</dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = streamParser.currentSection;</code></pre></fieldset></dd>
								<dd class="return type">number</dd>
								<dt class="setter private">Setter</dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>streamParser.currentSection = value;</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">value</dt>
										<dd class="parameter type">number</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
							</dl>

							<dl id="libjass.parser.StreamParser.minimalASS" class="property">
								<dt class="name"><a href="#libjass.parser.StreamParser.minimalASS">minimalASS</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									parsed at the point this promise becomes resolved.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = streamParser.minimalASS;</code></pre></fieldset></dd>
								<dd class="return type">!Promise.&lt;!libjass.ASS&gt;</dd>
							</dl>

							<dl id="libjass.parser.StreamParser._onNextLine" class="function private">
								<dt class="name"><a href="#libjass.parser.StreamParser._onNextLine">_onNextLine</a></dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>streamParser._onNextLine(line);</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">line</dt>
										<dd class="parameter type">string</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
							</dl>

						</dd>
					</dl>
					<dl id="libjass.parser.StringStream" class="clazz">
						<dt class="name">class <a href="#libjass.parser.StringStream">StringStream</a> implements <a href="#libjass.parser.Stream">Stream</a></dt>
						<dd class="description">
							A <a href="#libjass.parser.Stream">libjass.parser.Stream</a> that reads from a string in memory.
						</dd>
						<dd class="usage"><fieldset><legend /><pre><code>var stringStream = new libjass.parser.StringStream(str);</code></pre></fieldset></dd>
						<dd class="parameters">
							<dl>
								<dt class="parameter name">str</dt>
								<dd class="parameter type">string</dd>
								<dd class="parameter description">The string</dd>
							</dl>
						</dd>
						<dd class="members">
							<dl id="libjass.parser.StringStream.nextLine" class="function">
								<dt class="name"><a href="#libjass.parser.StringStream.nextLine">nextLine</a></dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = stringStream.nextLine();</code></pre></fieldset></dd>
								<dt>Returns</dt>
								<dd class="return type">!Promise.&lt;?string&gt;</dd>
								<dd class="return description">A promise that will be resolved with the next line, or null if the string has been completely read.</dd>
							</dl>

						</dd>
					</dl>
					<dl id="libjass.parser.XhrStream" class="clazz">
						<dt class="name">class <a href="#libjass.parser.XhrStream">XhrStream</a> implements <a href="#libjass.parser.Stream">Stream</a></dt>
						<dd class="description">
							A <a href="#libjass.parser.Stream">libjass.parser.Stream</a> that reads from an XMLHttpRequest object.
						</dd>
						<dd class="usage"><fieldset><legend /><pre><code>var xhrStream = new libjass.parser.XhrStream(xhr);</code></pre></fieldset></dd>
						<dd class="parameters">
							<dl>
								<dt class="parameter name">xhr</dt>
								<dd class="parameter type">!XMLHttpRequest</dd>
								<dd class="parameter description">The XMLHttpRequest object. Make sure to not call .open() on this object before passing it in here,
since event handlers cannot be registered after open() has been called.</dd>
							</dl>
						</dd>
						<dd class="members">
							<dl id="libjass.parser.XhrStream.nextLine" class="function">
								<dt class="name"><a href="#libjass.parser.XhrStream.nextLine">nextLine</a></dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = xhrStream.nextLine();</code></pre></fieldset></dd>
								<dt>Returns</dt>
								<dd class="return type">!Promise.&lt;?string&gt;</dd>
								<dd class="return description">A promise that will be resolved with the next line, or null if the stream is exhausted.</dd>
							</dl>

							<dl id="libjass.parser.XhrStream._onXhrError" class="function private">
								<dt class="name"><a href="#libjass.parser.XhrStream._onXhrError">_onXhrError</a></dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>xhrStream._onXhrError(event);</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">event</dt>
										<dd class="parameter type">!ErrorEvent</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
							</dl>

							<dl id="libjass.parser.XhrStream._onXhrLoad" class="function private">
								<dt class="name"><a href="#libjass.parser.XhrStream._onXhrLoad">_onXhrLoad</a></dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>xhrStream._onXhrLoad();</code></pre></fieldset></dd>
							</dl>

							<dl id="libjass.parser.XhrStream._onXhrProgress" class="function private">
								<dt class="name"><a href="#libjass.parser.XhrStream._onXhrProgress">_onXhrProgress</a></dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>xhrStream._onXhrProgress();</code></pre></fieldset></dd>
							</dl>

							<dl id="libjass.parser.XhrStream._tryResolveNextLine" class="function private">
								<dt class="name"><a href="#libjass.parser.XhrStream._tryResolveNextLine">_tryResolveNextLine</a></dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>xhrStream._tryResolveNextLine();</code></pre></fieldset></dd>
							</dl>

						</dd>
					</dl>
				</section>
			</section>
			<section class="namespace">
				<h1 id="libjass.parts">Namespace libjass.parts</h1>
				<section>
					<h2>Interfaces</h2>
					<dl id="libjass.parts.Part" class="interface">
						<dt class="name">interface <a href="#libjass.parts.Part">Part</a></dt>
						<dd class="description">
							The base interface of the ASS tag classes.
						</dd>
						<dd class="members">
						</dd>
					</dl>
				</section>
				<section>
					<h2>Classes</h2>
					<dl id="libjass.parts.Alignment" class="clazz">
						<dt class="name">class <a href="#libjass.parts.Alignment">Alignment</a></dt>
						<dd class="description">
							An alignment tag {\an} or {\a}
						</dd>
						<dd class="usage"><fieldset><legend /><pre><code>var alignment = new libjass.parts.Alignment(value);</code></pre></fieldset></dd>
						<dd class="parameters">
							<dl>
								<dt class="parameter name">value</dt>
								<dd class="parameter type">number</dd>
								<dd class="parameter description">{\an###} -&gt; alignment (number)</dd>
							</dl>
						</dd>
						<dd class="members">
							<dl id="libjass.parts.Alignment.value" class="property">
								<dt class="name"><a href="#libjass.parts.Alignment.value">value</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									The value of this alignment tag.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = alignment.value;</code></pre></fieldset></dd>
								<dd class="return type">?number</dd>
							</dl>

						</dd>
					</dl>
					<dl id="libjass.parts.Alpha" class="clazz">
						<dt class="name">class <a href="#libjass.parts.Alpha">Alpha</a></dt>
						<dd class="description">
							An alpha tag {\alpha}
						</dd>
						<dd class="usage"><fieldset><legend /><pre><code>var alpha = new libjass.parts.Alpha(value);</code></pre></fieldset></dd>
						<dd class="parameters">
							<dl>
								<dt class="parameter name">value</dt>
								<dd class="parameter type">?number</dd>
								<dd class="parameter description">{\alpha###} -&gt; alpha (number), {\alpha} -&gt; null</dd>
							</dl>
						</dd>
						<dd class="members">
							<dl id="libjass.parts.Alpha.value" class="property">
								<dt class="name"><a href="#libjass.parts.Alpha.value">value</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									The value of this alpha tag.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = alpha.value;</code></pre></fieldset></dd>
								<dd class="return type">?number</dd>
							</dl>

						</dd>
					</dl>
					<dl id="libjass.parts.Blur" class="clazz">
						<dt class="name">class <a href="#libjass.parts.Blur">Blur</a></dt>
						<dd class="description">
							A blur tag {\be}
						</dd>
						<dd class="usage"><fieldset><legend /><pre><code>var blur = new libjass.parts.Blur(value);</code></pre></fieldset></dd>
						<dd class="parameters">
							<dl>
								<dt class="parameter name">value</dt>
								<dd class="parameter type">?number</dd>
								<dd class="parameter description">{\be###} -&gt; strength (number), {\be} -&gt; null</dd>
							</dl>
						</dd>
						<dd class="members">
							<dl id="libjass.parts.Blur.value" class="property">
								<dt class="name"><a href="#libjass.parts.Blur.value">value</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									The value of this blur tag.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = blur.value;</code></pre></fieldset></dd>
								<dd class="return type">?number</dd>
							</dl>

						</dd>
					</dl>
					<dl id="libjass.parts.Bold" class="clazz">
						<dt class="name">class <a href="#libjass.parts.Bold">Bold</a></dt>
						<dd class="description">
							A bold tag {\b}
						</dd>
						<dd class="usage"><fieldset><legend /><pre><code>var bold = new libjass.parts.Bold(value);</code></pre></fieldset></dd>
						<dd class="parameters">
							<dl>
								<dt class="parameter name">value</dt>
								<dd class="parameter type">*</dd>
								<dd class="parameter description">{\b1} -&gt; true, {\b0} -&gt; false, {\b###} -&gt; weight of the bold (number), {\b} -&gt; null</dd>
							</dl>
						</dd>
						<dd class="members">
							<dl id="libjass.parts.Bold.value" class="property">
								<dt class="name"><a href="#libjass.parts.Bold.value">value</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									The value of this bold tag.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = bold.value;</code></pre></fieldset></dd>
								<dd class="return type">?boolean|?number</dd>
							</dl>

						</dd>
					</dl>
					<dl id="libjass.parts.Border" class="clazz">
						<dt class="name">class <a href="#libjass.parts.Border">Border</a></dt>
						<dd class="description">
							A border tag {\bord}
						</dd>
						<dd class="usage"><fieldset><legend /><pre><code>var border = new libjass.parts.Border(value);</code></pre></fieldset></dd>
						<dd class="parameters">
							<dl>
								<dt class="parameter name">value</dt>
								<dd class="parameter type">?number</dd>
								<dd class="parameter description">{\bord###} -&gt; width (number), {\bord} -&gt; null</dd>
							</dl>
						</dd>
						<dd class="members">
							<dl id="libjass.parts.Border.value" class="property">
								<dt class="name"><a href="#libjass.parts.Border.value">value</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									The value of this border tag.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = border.value;</code></pre></fieldset></dd>
								<dd class="return type">?number</dd>
							</dl>

						</dd>
					</dl>
					<dl id="libjass.parts.BorderX" class="clazz">
						<dt class="name">class <a href="#libjass.parts.BorderX">BorderX</a></dt>
						<dd class="description">
							A horizontal border tag {\xbord}
						</dd>
						<dd class="usage"><fieldset><legend /><pre><code>var borderX = new libjass.parts.BorderX(value);</code></pre></fieldset></dd>
						<dd class="parameters">
							<dl>
								<dt class="parameter name">value</dt>
								<dd class="parameter type">?number</dd>
								<dd class="parameter description">{\xbord###} -&gt; width (number), {\xbord} -&gt; null</dd>
							</dl>
						</dd>
						<dd class="members">
							<dl id="libjass.parts.BorderX.value" class="property">
								<dt class="name"><a href="#libjass.parts.BorderX.value">value</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									The value of this horizontal border tag.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = borderX.value;</code></pre></fieldset></dd>
								<dd class="return type">?number</dd>
							</dl>

						</dd>
					</dl>
					<dl id="libjass.parts.BorderY" class="clazz">
						<dt class="name">class <a href="#libjass.parts.BorderY">BorderY</a></dt>
						<dd class="description">
							A vertical border tag {\ybord}
						</dd>
						<dd class="usage"><fieldset><legend /><pre><code>var borderY = new libjass.parts.BorderY(value);</code></pre></fieldset></dd>
						<dd class="parameters">
							<dl>
								<dt class="parameter name">value</dt>
								<dd class="parameter type">?number</dd>
								<dd class="parameter description">{\ybord###} -&gt; height (number), {\ybord} -&gt; null</dd>
							</dl>
						</dd>
						<dd class="members">
							<dl id="libjass.parts.BorderY.value" class="property">
								<dt class="name"><a href="#libjass.parts.BorderY.value">value</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									The value of this vertical border tag.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = borderY.value;</code></pre></fieldset></dd>
								<dd class="return type">?number</dd>
							</dl>

						</dd>
					</dl>
					<dl id="libjass.parts.Color" class="clazz">
						<dt class="name">class <a href="#libjass.parts.Color">Color</a></dt>
						<dd class="description">
							<p>Represents a CSS color with red, green, blue and alpha components.</p><p>Instances of this class are immutable.</p>
						</dd>
						<dd class="usage"><fieldset><legend /><pre><code>var color = new libjass.parts.Color(red, green, blue, alpha);</code></pre></fieldset></dd>
						<dd class="parameters">
							<dl>
								<dt class="parameter name">red</dt>
								<dd class="parameter type">number</dd>
								<dd class="parameter description"></dd>
								<dt class="parameter name">green</dt>
								<dd class="parameter type">number</dd>
								<dd class="parameter description"></dd>
								<dt class="parameter name">blue</dt>
								<dd class="parameter type">number</dd>
								<dd class="parameter description"></dd>
								<dt class="parameter name">alpha</dt>
								<dd class="parameter type">number=1</dd>
								<dd class="parameter description"></dd>
							</dl>
						</dd>
						<dd class="members">
							<dl id="libjass.parts.Color.alpha" class="property">
								<dt class="name"><a href="#libjass.parts.Color.alpha">alpha</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									The alpha component of this color as a number between 0 and 1, where 0 means transparent and 1 means opaque.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = color.alpha;</code></pre></fieldset></dd>
								<dd class="return type">number</dd>
							</dl>

							<dl id="libjass.parts.Color.blue" class="property">
								<dt class="name"><a href="#libjass.parts.Color.blue">blue</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									The blue component of this color as a number between 0 and 255.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = color.blue;</code></pre></fieldset></dd>
								<dd class="return type">number</dd>
							</dl>

							<dl id="libjass.parts.Color.green" class="property">
								<dt class="name"><a href="#libjass.parts.Color.green">green</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									The green component of this color as a number between 0 and 255.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = color.green;</code></pre></fieldset></dd>
								<dd class="return type">number</dd>
							</dl>

							<dl id="libjass.parts.Color.red" class="property">
								<dt class="name"><a href="#libjass.parts.Color.red">red</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									The red component of this color as a number between 0 and 255.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = color.red;</code></pre></fieldset></dd>
								<dd class="return type">number</dd>
							</dl>

							<dl id="libjass.parts.Color.interpolate" class="function">
								<dt class="name"><a href="#libjass.parts.Color.interpolate">interpolate</a></dt>
								<dd class="description">
									Returns a new Color by interpolating the current color to the final color by the given progression.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = color.interpolate(final, progression);</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">final</dt>
										<dd class="parameter type">!libjass.parts.Color</dd>
										<dd class="parameter description"></dd>
										<dt class="parameter name">progression</dt>
										<dd class="parameter type">number</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
								<dt>Returns</dt>
								<dd class="return type">!libjass.parts.Color</dd>
								<dd class="return description"></dd>
							</dl>

							<dl id="libjass.parts.Color.toString" class="function">
								<dt class="name"><a href="#libjass.parts.Color.toString">toString</a></dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = color.toString();</code></pre></fieldset></dd>
								<dt>Returns</dt>
								<dd class="return type">string</dd>
								<dd class="return description">The CSS representation "rgba(...)" of this color.</dd>
							</dl>

							<dl id="libjass.parts.Color.withAlpha" class="function">
								<dt class="name"><a href="#libjass.parts.Color.withAlpha">withAlpha</a></dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = color.withAlpha(value);</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">value</dt>
										<dd class="parameter type">?number</dd>
										<dd class="parameter description">The new alpha. If null, the existing alpha is used.</dd>
									</dl>
								</dd>
								<dt>Returns</dt>
								<dd class="return type">!libjass.parts.Color</dd>
								<dd class="return description">Returns a new Color instance with the same color but the provided alpha.</dd>
							</dl>

						</dd>
					</dl>
					<dl id="libjass.parts.ColorKaraoke" class="clazz">
						<dt class="name">class <a href="#libjass.parts.ColorKaraoke">ColorKaraoke</a></dt>
						<dd class="description">
							A color karaoke tag {\k}
						</dd>
						<dd class="usage"><fieldset><legend /><pre><code>var colorKaraoke = new libjass.parts.ColorKaraoke(duration);</code></pre></fieldset></dd>
						<dd class="parameters">
							<dl>
								<dt class="parameter name">duration</dt>
								<dd class="parameter type">number</dd>
								<dd class="parameter description">{\k###} -&gt; duration (number)</dd>
							</dl>
						</dd>
						<dd class="members">
							<dl id="libjass.parts.ColorKaraoke.duration" class="property">
								<dt class="name"><a href="#libjass.parts.ColorKaraoke.duration">duration</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									The duration of this color karaoke tag.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = colorKaraoke.duration;</code></pre></fieldset></dd>
								<dd class="return type">number</dd>
							</dl>

						</dd>
					</dl>
					<dl id="libjass.parts.Comment" class="clazz">
						<dt class="name">class <a href="#libjass.parts.Comment">Comment</a></dt>
						<dd class="description">
							A comment, i.e., any text enclosed in {} that is not understood as an ASS tag.
						</dd>
						<dd class="usage"><fieldset><legend /><pre><code>var comment = new libjass.parts.Comment(value);</code></pre></fieldset></dd>
						<dd class="parameters">
							<dl>
								<dt class="parameter name">value</dt>
								<dd class="parameter type">string</dd>
								<dd class="parameter description">The text of this comment</dd>
							</dl>
						</dd>
						<dd class="members">
							<dl id="libjass.parts.Comment.value" class="property">
								<dt class="name"><a href="#libjass.parts.Comment.value">value</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									The value of this comment.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = comment.value;</code></pre></fieldset></dd>
								<dd class="return type">string</dd>
							</dl>

						</dd>
					</dl>
					<dl id="libjass.parts.ComplexFade" class="clazz">
						<dt class="name">class <a href="#libjass.parts.ComplexFade">ComplexFade</a></dt>
						<dd class="description">
							A complex fade tag {\fade}
						</dd>
						<dd class="usage"><fieldset><legend /><pre><code>var complexFade = new libjass.parts.ComplexFade(a1, a2, a3, t1, t2, t3, t4);</code></pre></fieldset></dd>
						<dd class="parameters">
							<dl>
								<dt class="parameter name">a1</dt>
								<dd class="parameter type">number</dd>
								<dd class="parameter description"></dd>
								<dt class="parameter name">a2</dt>
								<dd class="parameter type">number</dd>
								<dd class="parameter description"></dd>
								<dt class="parameter name">a3</dt>
								<dd class="parameter type">number</dd>
								<dd class="parameter description"></dd>
								<dt class="parameter name">t1</dt>
								<dd class="parameter type">number</dd>
								<dd class="parameter description"></dd>
								<dt class="parameter name">t2</dt>
								<dd class="parameter type">number</dd>
								<dd class="parameter description"></dd>
								<dt class="parameter name">t3</dt>
								<dd class="parameter type">number</dd>
								<dd class="parameter description"></dd>
								<dt class="parameter name">t4</dt>
								<dd class="parameter type">number</dd>
								<dd class="parameter description"></dd>
							</dl>
						</dd>
						<dd class="members">
							<dl id="libjass.parts.ComplexFade.a1" class="property">
								<dt class="name"><a href="#libjass.parts.ComplexFade.a1">a1</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									The alpha value of this complex fade tag at time t2.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = complexFade.a1;</code></pre></fieldset></dd>
								<dd class="return type">number</dd>
							</dl>

							<dl id="libjass.parts.ComplexFade.a2" class="property">
								<dt class="name"><a href="#libjass.parts.ComplexFade.a2">a2</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									The alpha value of this complex fade tag at time t3.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = complexFade.a2;</code></pre></fieldset></dd>
								<dd class="return type">number</dd>
							</dl>

							<dl id="libjass.parts.ComplexFade.a3" class="property">
								<dt class="name"><a href="#libjass.parts.ComplexFade.a3">a3</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									The alpha value of this complex fade tag at time t4.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = complexFade.a3;</code></pre></fieldset></dd>
								<dd class="return type">number</dd>
							</dl>

							<dl id="libjass.parts.ComplexFade.t1" class="property">
								<dt class="name"><a href="#libjass.parts.ComplexFade.t1">t1</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									The starting time of this complex fade tag.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = complexFade.t1;</code></pre></fieldset></dd>
								<dd class="return type">number</dd>
							</dl>

							<dl id="libjass.parts.ComplexFade.t2" class="property">
								<dt class="name"><a href="#libjass.parts.ComplexFade.t2">t2</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									The first intermediate time of this complex fade tag.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = complexFade.t2;</code></pre></fieldset></dd>
								<dd class="return type">number</dd>
							</dl>

							<dl id="libjass.parts.ComplexFade.t3" class="property">
								<dt class="name"><a href="#libjass.parts.ComplexFade.t3">t3</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									The second intermediate time of this complex fade tag.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = complexFade.t3;</code></pre></fieldset></dd>
								<dd class="return type">number</dd>
							</dl>

							<dl id="libjass.parts.ComplexFade.t4" class="property">
								<dt class="name"><a href="#libjass.parts.ComplexFade.t4">t4</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									The ending time of this complex fade tag.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = complexFade.t4;</code></pre></fieldset></dd>
								<dd class="return type">number</dd>
							</dl>

						</dd>
					</dl>
					<dl id="libjass.parts.DrawingBaselineOffset" class="clazz">
						<dt class="name">class <a href="#libjass.parts.DrawingBaselineOffset">DrawingBaselineOffset</a></dt>
						<dd class="description">
							A drawing mode baseline offset tag {\pbo}
						</dd>
						<dd class="usage"><fieldset><legend /><pre><code>var drawingBaselineOffset = new libjass.parts.DrawingBaselineOffset(value);</code></pre></fieldset></dd>
						<dd class="parameters">
							<dl>
								<dt class="parameter name">value</dt>
								<dd class="parameter type">number</dd>
								<dd class="parameter description"></dd>
							</dl>
						</dd>
						<dd class="members">
							<dl id="libjass.parts.DrawingBaselineOffset.value" class="property">
								<dt class="name"><a href="#libjass.parts.DrawingBaselineOffset.value">value</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									The value of this drawing mode baseline offset tag.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = drawingBaselineOffset.value;</code></pre></fieldset></dd>
								<dd class="return type">number</dd>
							</dl>

						</dd>
					</dl>
					<dl id="libjass.parts.DrawingInstructions" class="clazz">
						<dt class="name">class <a href="#libjass.parts.DrawingInstructions">DrawingInstructions</a></dt>
						<dd class="description">
							A pseudo-part representing text interpreted as drawing instructions
						</dd>
						<dd class="usage"><fieldset><legend /><pre><code>var drawingInstructions = new libjass.parts.DrawingInstructions(instructions);</code></pre></fieldset></dd>
						<dd class="parameters">
							<dl>
								<dt class="parameter name">instructions</dt>
								<dd class="parameter type">!Array.&lt;!libjass.parts.drawing.Instruction&gt;</dd>
								<dd class="parameter description"></dd>
							</dl>
						</dd>
						<dd class="members">
							<dl id="libjass.parts.DrawingInstructions.instructions" class="property">
								<dt class="name"><a href="#libjass.parts.DrawingInstructions.instructions">instructions</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									The instructions contained in this drawing instructions part.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = drawingInstructions.instructions;</code></pre></fieldset></dd>
								<dd class="return type">!Array.&lt;!libjass.parts.drawing.Instruction&gt;</dd>
							</dl>

						</dd>
					</dl>
					<dl id="libjass.parts.DrawingMode" class="clazz">
						<dt class="name">class <a href="#libjass.parts.DrawingMode">DrawingMode</a></dt>
						<dd class="description">
							A drawing mode tag {\p}
						</dd>
						<dd class="usage"><fieldset><legend /><pre><code>var drawingMode = new libjass.parts.DrawingMode(scale);</code></pre></fieldset></dd>
						<dd class="parameters">
							<dl>
								<dt class="parameter name">scale</dt>
								<dd class="parameter type">number</dd>
								<dd class="parameter description"></dd>
							</dl>
						</dd>
						<dd class="members">
							<dl id="libjass.parts.DrawingMode.scale" class="property">
								<dt class="name"><a href="#libjass.parts.DrawingMode.scale">scale</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									The scale of this drawing mode tag.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = drawingMode.scale;</code></pre></fieldset></dd>
								<dd class="return type">number</dd>
							</dl>

						</dd>
					</dl>
					<dl id="libjass.parts.Fade" class="clazz">
						<dt class="name">class <a href="#libjass.parts.Fade">Fade</a></dt>
						<dd class="description">
							A simple fade tag {\fad}
						</dd>
						<dd class="usage"><fieldset><legend /><pre><code>var fade = new libjass.parts.Fade(start, end);</code></pre></fieldset></dd>
						<dd class="parameters">
							<dl>
								<dt class="parameter name">start</dt>
								<dd class="parameter type">number</dd>
								<dd class="parameter description"></dd>
								<dt class="parameter name">end</dt>
								<dd class="parameter type">number</dd>
								<dd class="parameter description"></dd>
							</dl>
						</dd>
						<dd class="members">
							<dl id="libjass.parts.Fade.end" class="property">
								<dt class="name"><a href="#libjass.parts.Fade.end">end</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									The end time of this fade tag.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = fade.end;</code></pre></fieldset></dd>
								<dd class="return type">number</dd>
							</dl>

							<dl id="libjass.parts.Fade.start" class="property">
								<dt class="name"><a href="#libjass.parts.Fade.start">start</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									The start time of this fade tag.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = fade.start;</code></pre></fieldset></dd>
								<dd class="return type">number</dd>
							</dl>

						</dd>
					</dl>
					<dl id="libjass.parts.FontName" class="clazz">
						<dt class="name">class <a href="#libjass.parts.FontName">FontName</a></dt>
						<dd class="description">
							A font name tag {\fn}
						</dd>
						<dd class="usage"><fieldset><legend /><pre><code>var fontName = new libjass.parts.FontName(value);</code></pre></fieldset></dd>
						<dd class="parameters">
							<dl>
								<dt class="parameter name">value</dt>
								<dd class="parameter type">?string</dd>
								<dd class="parameter description">{\fn###} -&gt; name (string), {\fn} -&gt; null</dd>
							</dl>
						</dd>
						<dd class="members">
							<dl id="libjass.parts.FontName.value" class="property">
								<dt class="name"><a href="#libjass.parts.FontName.value">value</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									The value of this font name tag.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = fontName.value;</code></pre></fieldset></dd>
								<dd class="return type">?string</dd>
							</dl>

						</dd>
					</dl>
					<dl id="libjass.parts.FontScaleX" class="clazz">
						<dt class="name">class <a href="#libjass.parts.FontScaleX">FontScaleX</a></dt>
						<dd class="description">
							A horizontal font scaling tag {\fscx}
						</dd>
						<dd class="usage"><fieldset><legend /><pre><code>var fontScaleX = new libjass.parts.FontScaleX(value);</code></pre></fieldset></dd>
						<dd class="parameters">
							<dl>
								<dt class="parameter name">value</dt>
								<dd class="parameter type">?number</dd>
								<dd class="parameter description">{\fscx###} -&gt; scale (number), {\fscx} -&gt; null</dd>
							</dl>
						</dd>
						<dd class="members">
							<dl id="libjass.parts.FontScaleX.value" class="property">
								<dt class="name"><a href="#libjass.parts.FontScaleX.value">value</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									The value of this horizontal font scaling tag.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = fontScaleX.value;</code></pre></fieldset></dd>
								<dd class="return type">?number</dd>
							</dl>

						</dd>
					</dl>
					<dl id="libjass.parts.FontScaleY" class="clazz">
						<dt class="name">class <a href="#libjass.parts.FontScaleY">FontScaleY</a></dt>
						<dd class="description">
							A vertical font scaling tag {\fscy}
						</dd>
						<dd class="usage"><fieldset><legend /><pre><code>var fontScaleY = new libjass.parts.FontScaleY(value);</code></pre></fieldset></dd>
						<dd class="parameters">
							<dl>
								<dt class="parameter name">value</dt>
								<dd class="parameter type">?number</dd>
								<dd class="parameter description">{\fscy###} -&gt; scale (number), {\fscy} -&gt; null</dd>
							</dl>
						</dd>
						<dd class="members">
							<dl id="libjass.parts.FontScaleY.value" class="property">
								<dt class="name"><a href="#libjass.parts.FontScaleY.value">value</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									The value of this vertical font scaling tag.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = fontScaleY.value;</code></pre></fieldset></dd>
								<dd class="return type">?number</dd>
							</dl>

						</dd>
					</dl>
					<dl id="libjass.parts.FontSize" class="clazz">
						<dt class="name">class <a href="#libjass.parts.FontSize">FontSize</a></dt>
						<dd class="description">
							A font size tag {\fs}
						</dd>
						<dd class="usage"><fieldset><legend /><pre><code>var fontSize = new libjass.parts.FontSize(value);</code></pre></fieldset></dd>
						<dd class="parameters">
							<dl>
								<dt class="parameter name">value</dt>
								<dd class="parameter type">?number</dd>
								<dd class="parameter description">{\fs###} -&gt; size (number), {\fs} -&gt; null</dd>
							</dl>
						</dd>
						<dd class="members">
							<dl id="libjass.parts.FontSize.value" class="property">
								<dt class="name"><a href="#libjass.parts.FontSize.value">value</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									The value of this font size tag.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = fontSize.value;</code></pre></fieldset></dd>
								<dd class="return type">?number</dd>
							</dl>

						</dd>
					</dl>
					<dl id="libjass.parts.FontSizeMinus" class="clazz">
						<dt class="name">class <a href="#libjass.parts.FontSizeMinus">FontSizeMinus</a></dt>
						<dd class="description">
							A font size decrease tag {\fs-}
						</dd>
						<dd class="usage"><fieldset><legend /><pre><code>var fontSizeMinus = new libjass.parts.FontSizeMinus(value);</code></pre></fieldset></dd>
						<dd class="parameters">
							<dl>
								<dt class="parameter name">value</dt>
								<dd class="parameter type">number</dd>
								<dd class="parameter description">{\fs-###} -&gt; difference (number)</dd>
							</dl>
						</dd>
						<dd class="members">
							<dl id="libjass.parts.FontSizeMinus.value" class="property">
								<dt class="name"><a href="#libjass.parts.FontSizeMinus.value">value</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									The value of this font size decrease tag.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = fontSizeMinus.value;</code></pre></fieldset></dd>
								<dd class="return type">number</dd>
							</dl>

						</dd>
					</dl>
					<dl id="libjass.parts.FontSizePlus" class="clazz">
						<dt class="name">class <a href="#libjass.parts.FontSizePlus">FontSizePlus</a></dt>
						<dd class="description">
							A font size increase tag {\fs+}
						</dd>
						<dd class="usage"><fieldset><legend /><pre><code>var fontSizePlus = new libjass.parts.FontSizePlus(value);</code></pre></fieldset></dd>
						<dd class="parameters">
							<dl>
								<dt class="parameter name">value</dt>
								<dd class="parameter type">number</dd>
								<dd class="parameter description">{\fs+###} -&gt; difference (number)</dd>
							</dl>
						</dd>
						<dd class="members">
							<dl id="libjass.parts.FontSizePlus.value" class="property">
								<dt class="name"><a href="#libjass.parts.FontSizePlus.value">value</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									The value of this font size increase tag.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = fontSizePlus.value;</code></pre></fieldset></dd>
								<dd class="return type">number</dd>
							</dl>

						</dd>
					</dl>
					<dl id="libjass.parts.GaussianBlur" class="clazz">
						<dt class="name">class <a href="#libjass.parts.GaussianBlur">GaussianBlur</a></dt>
						<dd class="description">
							A Gaussian blur tag {\blur}
						</dd>
						<dd class="usage"><fieldset><legend /><pre><code>var gaussianBlur = new libjass.parts.GaussianBlur(value);</code></pre></fieldset></dd>
						<dd class="parameters">
							<dl>
								<dt class="parameter name">value</dt>
								<dd class="parameter type">?number</dd>
								<dd class="parameter description">{\blur###} -&gt; strength (number), {\blur} -&gt; null</dd>
							</dl>
						</dd>
						<dd class="members">
							<dl id="libjass.parts.GaussianBlur.value" class="property">
								<dt class="name"><a href="#libjass.parts.GaussianBlur.value">value</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									The value of this Gaussian blur tag.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = gaussianBlur.value;</code></pre></fieldset></dd>
								<dd class="return type">?number</dd>
							</dl>

						</dd>
					</dl>
					<dl id="libjass.parts.Italic" class="clazz">
						<dt class="name">class <a href="#libjass.parts.Italic">Italic</a></dt>
						<dd class="description">
							An italic tag {\i}
						</dd>
						<dd class="usage"><fieldset><legend /><pre><code>var italic = new libjass.parts.Italic(value);</code></pre></fieldset></dd>
						<dd class="parameters">
							<dl>
								<dt class="parameter name">value</dt>
								<dd class="parameter type">?boolean</dd>
								<dd class="parameter description">{\i1} -&gt; true, {\i0} -&gt; false, {\i} -&gt; null</dd>
							</dl>
						</dd>
						<dd class="members">
							<dl id="libjass.parts.Italic.value" class="property">
								<dt class="name"><a href="#libjass.parts.Italic.value">value</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									The value of this italic tag.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = italic.value;</code></pre></fieldset></dd>
								<dd class="return type">?boolean</dd>
							</dl>

						</dd>
					</dl>
					<dl id="libjass.parts.LetterSpacing" class="clazz">
						<dt class="name">class <a href="#libjass.parts.LetterSpacing">LetterSpacing</a></dt>
						<dd class="description">
							A letter-spacing tag {\fsp}
						</dd>
						<dd class="usage"><fieldset><legend /><pre><code>var letterSpacing = new libjass.parts.LetterSpacing(value);</code></pre></fieldset></dd>
						<dd class="parameters">
							<dl>
								<dt class="parameter name">value</dt>
								<dd class="parameter type">?number</dd>
								<dd class="parameter description">{\fsp###} -&gt; spacing (number), {\fsp} -&gt; null</dd>
							</dl>
						</dd>
						<dd class="members">
							<dl id="libjass.parts.LetterSpacing.value" class="property">
								<dt class="name"><a href="#libjass.parts.LetterSpacing.value">value</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									The value of this letter-spacing tag.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = letterSpacing.value;</code></pre></fieldset></dd>
								<dd class="return type">?number</dd>
							</dl>

						</dd>
					</dl>
					<dl id="libjass.parts.Move" class="clazz">
						<dt class="name">class <a href="#libjass.parts.Move">Move</a></dt>
						<dd class="description">
							A movement tag {\move}
						</dd>
						<dd class="usage"><fieldset><legend /><pre><code>var move = new libjass.parts.Move(x1, y1, x2, y2, t1, t2);</code></pre></fieldset></dd>
						<dd class="parameters">
							<dl>
								<dt class="parameter name">x1</dt>
								<dd class="parameter type">number</dd>
								<dd class="parameter description"></dd>
								<dt class="parameter name">y1</dt>
								<dd class="parameter type">number</dd>
								<dd class="parameter description"></dd>
								<dt class="parameter name">x2</dt>
								<dd class="parameter type">number</dd>
								<dd class="parameter description"></dd>
								<dt class="parameter name">y2</dt>
								<dd class="parameter type">number</dd>
								<dd class="parameter description"></dd>
								<dt class="parameter name">t1</dt>
								<dd class="parameter type">number</dd>
								<dd class="parameter description"></dd>
								<dt class="parameter name">t2</dt>
								<dd class="parameter type">number</dd>
								<dd class="parameter description"></dd>
							</dl>
						</dd>
						<dd class="members">
							<dl id="libjass.parts.Move.t1" class="property">
								<dt class="name"><a href="#libjass.parts.Move.t1">t1</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									The start time of this move tag.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = move.t1;</code></pre></fieldset></dd>
								<dd class="return type">number</dd>
							</dl>

							<dl id="libjass.parts.Move.t2" class="property">
								<dt class="name"><a href="#libjass.parts.Move.t2">t2</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									The end time value of this move tag.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = move.t2;</code></pre></fieldset></dd>
								<dd class="return type">number</dd>
							</dl>

							<dl id="libjass.parts.Move.x1" class="property">
								<dt class="name"><a href="#libjass.parts.Move.x1">x1</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									The starting x value of this move tag.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = move.x1;</code></pre></fieldset></dd>
								<dd class="return type">number</dd>
							</dl>

							<dl id="libjass.parts.Move.x2" class="property">
								<dt class="name"><a href="#libjass.parts.Move.x2">x2</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									The ending x value of this move tag.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = move.x2;</code></pre></fieldset></dd>
								<dd class="return type">number</dd>
							</dl>

							<dl id="libjass.parts.Move.y1" class="property">
								<dt class="name"><a href="#libjass.parts.Move.y1">y1</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									The starting y value of this move tag.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = move.y1;</code></pre></fieldset></dd>
								<dd class="return type">number</dd>
							</dl>

							<dl id="libjass.parts.Move.y2" class="property">
								<dt class="name"><a href="#libjass.parts.Move.y2">y2</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									The ending y value of this move tag.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = move.y2;</code></pre></fieldset></dd>
								<dd class="return type">number</dd>
							</dl>

						</dd>
					</dl>
					<dl id="libjass.parts.NewLine" class="clazz">
						<dt class="name">class <a href="#libjass.parts.NewLine">NewLine</a></dt>
						<dd class="description">
							A newline character \N.
						</dd>
						<dd class="usage"><fieldset><legend /><pre><code>var newLine = new libjass.parts.NewLine();</code></pre></fieldset></dd>
						<dd class="members">
						</dd>
					</dl>
					<dl id="libjass.parts.OutlineAlpha" class="clazz">
						<dt class="name">class <a href="#libjass.parts.OutlineAlpha">OutlineAlpha</a></dt>
						<dd class="description">
							An outline alpha tag {\3a}
						</dd>
						<dd class="usage"><fieldset><legend /><pre><code>var outlineAlpha = new libjass.parts.OutlineAlpha(value);</code></pre></fieldset></dd>
						<dd class="parameters">
							<dl>
								<dt class="parameter name">value</dt>
								<dd class="parameter type">?number</dd>
								<dd class="parameter description">{\3a###} -&gt; alpha (number), {\3a} -&gt; null</dd>
							</dl>
						</dd>
						<dd class="members">
							<dl id="libjass.parts.OutlineAlpha.value" class="property">
								<dt class="name"><a href="#libjass.parts.OutlineAlpha.value">value</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									The value of this outline alpha tag.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = outlineAlpha.value;</code></pre></fieldset></dd>
								<dd class="return type">?number</dd>
							</dl>

						</dd>
					</dl>
					<dl id="libjass.parts.OutlineColor" class="clazz">
						<dt class="name">class <a href="#libjass.parts.OutlineColor">OutlineColor</a></dt>
						<dd class="description">
							An outline color tag {\3c}
						</dd>
						<dd class="usage"><fieldset><legend /><pre><code>var outlineColor = new libjass.parts.OutlineColor(value);</code></pre></fieldset></dd>
						<dd class="parameters">
							<dl>
								<dt class="parameter name">value</dt>
								<dd class="parameter type">libjass.parts.Color</dd>
								<dd class="parameter description">{\3c###} -&gt; color (Color), {\3c} -&gt; null</dd>
							</dl>
						</dd>
						<dd class="members">
							<dl id="libjass.parts.OutlineColor.value" class="property">
								<dt class="name"><a href="#libjass.parts.OutlineColor.value">value</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									The value of this outline color tag.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = outlineColor.value;</code></pre></fieldset></dd>
								<dd class="return type">libjass.parts.Color</dd>
							</dl>

						</dd>
					</dl>
					<dl id="libjass.parts.OutlineKaraoke" class="clazz">
						<dt class="name">class <a href="#libjass.parts.OutlineKaraoke">OutlineKaraoke</a></dt>
						<dd class="description">
							An outline karaoke tag {\ko}
						</dd>
						<dd class="usage"><fieldset><legend /><pre><code>var outlineKaraoke = new libjass.parts.OutlineKaraoke(duration);</code></pre></fieldset></dd>
						<dd class="parameters">
							<dl>
								<dt class="parameter name">duration</dt>
								<dd class="parameter type">number</dd>
								<dd class="parameter description">{\ko###} -&gt; duration (number)</dd>
							</dl>
						</dd>
						<dd class="members">
							<dl id="libjass.parts.OutlineKaraoke.duration" class="property">
								<dt class="name"><a href="#libjass.parts.OutlineKaraoke.duration">duration</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									The duration of this outline karaoke tag.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = outlineKaraoke.duration;</code></pre></fieldset></dd>
								<dd class="return type">number</dd>
							</dl>

						</dd>
					</dl>
					<dl id="libjass.parts.Position" class="clazz">
						<dt class="name">class <a href="#libjass.parts.Position">Position</a></dt>
						<dd class="description">
							A position tag {\pos}
						</dd>
						<dd class="usage"><fieldset><legend /><pre><code>var position = new libjass.parts.Position(x, y);</code></pre></fieldset></dd>
						<dd class="parameters">
							<dl>
								<dt class="parameter name">x</dt>
								<dd class="parameter type">number</dd>
								<dd class="parameter description"></dd>
								<dt class="parameter name">y</dt>
								<dd class="parameter type">number</dd>
								<dd class="parameter description"></dd>
							</dl>
						</dd>
						<dd class="members">
							<dl id="libjass.parts.Position.x" class="property">
								<dt class="name"><a href="#libjass.parts.Position.x">x</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									The x value of this position tag.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = position.x;</code></pre></fieldset></dd>
								<dd class="return type">number</dd>
							</dl>

							<dl id="libjass.parts.Position.y" class="property">
								<dt class="name"><a href="#libjass.parts.Position.y">y</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									The y value of this position tag.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = position.y;</code></pre></fieldset></dd>
								<dd class="return type">number</dd>
							</dl>

						</dd>
					</dl>
					<dl id="libjass.parts.PrimaryAlpha" class="clazz">
						<dt class="name">class <a href="#libjass.parts.PrimaryAlpha">PrimaryAlpha</a></dt>
						<dd class="description">
							A primary alpha tag {\1a}
						</dd>
						<dd class="usage"><fieldset><legend /><pre><code>var primaryAlpha = new libjass.parts.PrimaryAlpha(value);</code></pre></fieldset></dd>
						<dd class="parameters">
							<dl>
								<dt class="parameter name">value</dt>
								<dd class="parameter type">?number</dd>
								<dd class="parameter description">{\1a###} -&gt; alpha (number), {\1a} -&gt; null</dd>
							</dl>
						</dd>
						<dd class="members">
							<dl id="libjass.parts.PrimaryAlpha.value" class="property">
								<dt class="name"><a href="#libjass.parts.PrimaryAlpha.value">value</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									The value of this primary alpha tag.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = primaryAlpha.value;</code></pre></fieldset></dd>
								<dd class="return type">?number</dd>
							</dl>

						</dd>
					</dl>
					<dl id="libjass.parts.PrimaryColor" class="clazz">
						<dt class="name">class <a href="#libjass.parts.PrimaryColor">PrimaryColor</a></dt>
						<dd class="description">
							A primary color tag {\c} or {\1c}
						</dd>
						<dd class="usage"><fieldset><legend /><pre><code>var primaryColor = new libjass.parts.PrimaryColor(value);</code></pre></fieldset></dd>
						<dd class="parameters">
							<dl>
								<dt class="parameter name">value</dt>
								<dd class="parameter type">libjass.parts.Color</dd>
								<dd class="parameter description">{\1c###} -&gt; color (Color), {\1c} -&gt; null</dd>
							</dl>
						</dd>
						<dd class="members">
							<dl id="libjass.parts.PrimaryColor.value" class="property">
								<dt class="name"><a href="#libjass.parts.PrimaryColor.value">value</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									The value of this primary color tag.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = primaryColor.value;</code></pre></fieldset></dd>
								<dd class="return type">libjass.parts.Color</dd>
							</dl>

						</dd>
					</dl>
					<dl id="libjass.parts.RectangularClip" class="clazz">
						<dt class="name">class <a href="#libjass.parts.RectangularClip">RectangularClip</a></dt>
						<dd class="description">
							A rectangular clip tag {\clip} or {\iclip}
						</dd>
						<dd class="usage"><fieldset><legend /><pre><code>var rectangularClip = new libjass.parts.RectangularClip(x1, y1, x2, y2, inside);</code></pre></fieldset></dd>
						<dd class="parameters">
							<dl>
								<dt class="parameter name">x1</dt>
								<dd class="parameter type">number</dd>
								<dd class="parameter description"></dd>
								<dt class="parameter name">y1</dt>
								<dd class="parameter type">number</dd>
								<dd class="parameter description"></dd>
								<dt class="parameter name">x2</dt>
								<dd class="parameter type">number</dd>
								<dd class="parameter description"></dd>
								<dt class="parameter name">y2</dt>
								<dd class="parameter type">number</dd>
								<dd class="parameter description"></dd>
								<dt class="parameter name">inside</dt>
								<dd class="parameter type">boolean</dd>
								<dd class="parameter description"></dd>
							</dl>
						</dd>
						<dd class="members">
							<dl id="libjass.parts.RectangularClip.inside" class="property">
								<dt class="name"><a href="#libjass.parts.RectangularClip.inside">inside</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									Whether this rectangular clip tag clips the region it encloses or the region it excludes.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = rectangularClip.inside;</code></pre></fieldset></dd>
								<dd class="return type">boolean</dd>
							</dl>

							<dl id="libjass.parts.RectangularClip.x1" class="property">
								<dt class="name"><a href="#libjass.parts.RectangularClip.x1">x1</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									The X coordinate of the starting position of this rectangular clip tag.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = rectangularClip.x1;</code></pre></fieldset></dd>
								<dd class="return type">number</dd>
							</dl>

							<dl id="libjass.parts.RectangularClip.x2" class="property">
								<dt class="name"><a href="#libjass.parts.RectangularClip.x2">x2</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									The X coordinate of the ending position of this rectangular clip tag.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = rectangularClip.x2;</code></pre></fieldset></dd>
								<dd class="return type">number</dd>
							</dl>

							<dl id="libjass.parts.RectangularClip.y1" class="property">
								<dt class="name"><a href="#libjass.parts.RectangularClip.y1">y1</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									The Y coordinate of the starting position of this rectangular clip tag.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = rectangularClip.y1;</code></pre></fieldset></dd>
								<dd class="return type">number</dd>
							</dl>

							<dl id="libjass.parts.RectangularClip.y2" class="property">
								<dt class="name"><a href="#libjass.parts.RectangularClip.y2">y2</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									The Y coordinate of the ending position of this rectangular clip tag.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = rectangularClip.y2;</code></pre></fieldset></dd>
								<dd class="return type">number</dd>
							</dl>

						</dd>
					</dl>
					<dl id="libjass.parts.Reset" class="clazz">
						<dt class="name">class <a href="#libjass.parts.Reset">Reset</a></dt>
						<dd class="description">
							A style reset tag {\r}
						</dd>
						<dd class="usage"><fieldset><legend /><pre><code>var reset = new libjass.parts.Reset(value);</code></pre></fieldset></dd>
						<dd class="parameters">
							<dl>
								<dt class="parameter name">value</dt>
								<dd class="parameter type">?string</dd>
								<dd class="parameter description">{\r###} -&gt; style name (string), {\r} -&gt; null</dd>
							</dl>
						</dd>
						<dd class="members">
							<dl id="libjass.parts.Reset.value" class="property">
								<dt class="name"><a href="#libjass.parts.Reset.value">value</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									The value of this style reset tag.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = reset.value;</code></pre></fieldset></dd>
								<dd class="return type">?string</dd>
							</dl>

						</dd>
					</dl>
					<dl id="libjass.parts.RotateX" class="clazz">
						<dt class="name">class <a href="#libjass.parts.RotateX">RotateX</a></dt>
						<dd class="description">
							An X-axis rotation tag {\frx}
						</dd>
						<dd class="usage"><fieldset><legend /><pre><code>var rotateX = new libjass.parts.RotateX(value);</code></pre></fieldset></dd>
						<dd class="parameters">
							<dl>
								<dt class="parameter name">value</dt>
								<dd class="parameter type">?number</dd>
								<dd class="parameter description">{\frx###} -&gt; angle (number), {\frx} -&gt; null</dd>
							</dl>
						</dd>
						<dd class="members">
							<dl id="libjass.parts.RotateX.value" class="property">
								<dt class="name"><a href="#libjass.parts.RotateX.value">value</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									The value of this X-axis rotation tag.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = rotateX.value;</code></pre></fieldset></dd>
								<dd class="return type">?number</dd>
							</dl>

						</dd>
					</dl>
					<dl id="libjass.parts.RotateY" class="clazz">
						<dt class="name">class <a href="#libjass.parts.RotateY">RotateY</a></dt>
						<dd class="description">
							A Y-axis rotation tag {\fry}
						</dd>
						<dd class="usage"><fieldset><legend /><pre><code>var rotateY = new libjass.parts.RotateY(value);</code></pre></fieldset></dd>
						<dd class="parameters">
							<dl>
								<dt class="parameter name">value</dt>
								<dd class="parameter type">?number</dd>
								<dd class="parameter description">{\fry###} -&gt; angle (number), {\fry} -&gt; null</dd>
							</dl>
						</dd>
						<dd class="members">
							<dl id="libjass.parts.RotateY.value" class="property">
								<dt class="name"><a href="#libjass.parts.RotateY.value">value</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									The value of this Y-axis rotation tag.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = rotateY.value;</code></pre></fieldset></dd>
								<dd class="return type">?number</dd>
							</dl>

						</dd>
					</dl>
					<dl id="libjass.parts.RotateZ" class="clazz">
						<dt class="name">class <a href="#libjass.parts.RotateZ">RotateZ</a></dt>
						<dd class="description">
							A Z-axis rotation tag {\fr} or {\frz}
						</dd>
						<dd class="usage"><fieldset><legend /><pre><code>var rotateZ = new libjass.parts.RotateZ(value);</code></pre></fieldset></dd>
						<dd class="parameters">
							<dl>
								<dt class="parameter name">value</dt>
								<dd class="parameter type">?number</dd>
								<dd class="parameter description">{\frz###} -&gt; angle (number), {\frz} -&gt; null</dd>
							</dl>
						</dd>
						<dd class="members">
							<dl id="libjass.parts.RotateZ.value" class="property">
								<dt class="name"><a href="#libjass.parts.RotateZ.value">value</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									The value of this Z-axis rotation tag.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = rotateZ.value;</code></pre></fieldset></dd>
								<dd class="return type">?number</dd>
							</dl>

						</dd>
					</dl>
					<dl id="libjass.parts.RotationOrigin" class="clazz">
						<dt class="name">class <a href="#libjass.parts.RotationOrigin">RotationOrigin</a></dt>
						<dd class="description">
							A rotation origin tag {\org}
						</dd>
						<dd class="usage"><fieldset><legend /><pre><code>var rotationOrigin = new libjass.parts.RotationOrigin(x, y);</code></pre></fieldset></dd>
						<dd class="parameters">
							<dl>
								<dt class="parameter name">x</dt>
								<dd class="parameter type">number</dd>
								<dd class="parameter description"></dd>
								<dt class="parameter name">y</dt>
								<dd class="parameter type">number</dd>
								<dd class="parameter description"></dd>
							</dl>
						</dd>
						<dd class="members">
							<dl id="libjass.parts.RotationOrigin.x" class="property">
								<dt class="name"><a href="#libjass.parts.RotationOrigin.x">x</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									The x value of this rotation origin tag.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = rotationOrigin.x;</code></pre></fieldset></dd>
								<dd class="return type">number</dd>
							</dl>

							<dl id="libjass.parts.RotationOrigin.y" class="property">
								<dt class="name"><a href="#libjass.parts.RotationOrigin.y">y</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									The y value of this rotation origin tag.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = rotationOrigin.y;</code></pre></fieldset></dd>
								<dd class="return type">number</dd>
							</dl>

						</dd>
					</dl>
					<dl id="libjass.parts.SecondaryAlpha" class="clazz">
						<dt class="name">class <a href="#libjass.parts.SecondaryAlpha">SecondaryAlpha</a></dt>
						<dd class="description">
							A secondary alpha tag {\2a}
						</dd>
						<dd class="usage"><fieldset><legend /><pre><code>var secondaryAlpha = new libjass.parts.SecondaryAlpha(value);</code></pre></fieldset></dd>
						<dd class="parameters">
							<dl>
								<dt class="parameter name">value</dt>
								<dd class="parameter type">?number</dd>
								<dd class="parameter description">{\2a###} -&gt; alpha (number), {\2a} -&gt; null</dd>
							</dl>
						</dd>
						<dd class="members">
							<dl id="libjass.parts.SecondaryAlpha.value" class="property">
								<dt class="name"><a href="#libjass.parts.SecondaryAlpha.value">value</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									The value of this secondary alpha tag.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = secondaryAlpha.value;</code></pre></fieldset></dd>
								<dd class="return type">?number</dd>
							</dl>

						</dd>
					</dl>
					<dl id="libjass.parts.SecondaryColor" class="clazz">
						<dt class="name">class <a href="#libjass.parts.SecondaryColor">SecondaryColor</a></dt>
						<dd class="description">
							A secondary color tag {\2c}
						</dd>
						<dd class="usage"><fieldset><legend /><pre><code>var secondaryColor = new libjass.parts.SecondaryColor(value);</code></pre></fieldset></dd>
						<dd class="parameters">
							<dl>
								<dt class="parameter name">value</dt>
								<dd class="parameter type">libjass.parts.Color</dd>
								<dd class="parameter description">{\2c###} -&gt; color (Color), {\2c} -&gt; null</dd>
							</dl>
						</dd>
						<dd class="members">
							<dl id="libjass.parts.SecondaryColor.value" class="property">
								<dt class="name"><a href="#libjass.parts.SecondaryColor.value">value</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									The value of this secondary color tag.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = secondaryColor.value;</code></pre></fieldset></dd>
								<dd class="return type">libjass.parts.Color</dd>
							</dl>

						</dd>
					</dl>
					<dl id="libjass.parts.Shadow" class="clazz">
						<dt class="name">class <a href="#libjass.parts.Shadow">Shadow</a></dt>
						<dd class="description">
							A shadow tag {\shad}
						</dd>
						<dd class="usage"><fieldset><legend /><pre><code>var shadow = new libjass.parts.Shadow(value);</code></pre></fieldset></dd>
						<dd class="parameters">
							<dl>
								<dt class="parameter name">value</dt>
								<dd class="parameter type">?number</dd>
								<dd class="parameter description">{\shad###} -&gt; depth (number), {\shad} -&gt; null</dd>
							</dl>
						</dd>
						<dd class="members">
							<dl id="libjass.parts.Shadow.value" class="property">
								<dt class="name"><a href="#libjass.parts.Shadow.value">value</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									The value of this shadow tag.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = shadow.value;</code></pre></fieldset></dd>
								<dd class="return type">?number</dd>
							</dl>

						</dd>
					</dl>
					<dl id="libjass.parts.ShadowAlpha" class="clazz">
						<dt class="name">class <a href="#libjass.parts.ShadowAlpha">ShadowAlpha</a></dt>
						<dd class="description">
							A shadow alpha tag {\4a}
						</dd>
						<dd class="usage"><fieldset><legend /><pre><code>var shadowAlpha = new libjass.parts.ShadowAlpha(value);</code></pre></fieldset></dd>
						<dd class="parameters">
							<dl>
								<dt class="parameter name">value</dt>
								<dd class="parameter type">?number</dd>
								<dd class="parameter description">{\4a###} -&gt; alpha (number), {\4a} -&gt; null</dd>
							</dl>
						</dd>
						<dd class="members">
							<dl id="libjass.parts.ShadowAlpha.value" class="property">
								<dt class="name"><a href="#libjass.parts.ShadowAlpha.value">value</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									The value of this shadow alpha tag.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = shadowAlpha.value;</code></pre></fieldset></dd>
								<dd class="return type">?number</dd>
							</dl>

						</dd>
					</dl>
					<dl id="libjass.parts.ShadowColor" class="clazz">
						<dt class="name">class <a href="#libjass.parts.ShadowColor">ShadowColor</a></dt>
						<dd class="description">
							A shadow color tag {\4c}
						</dd>
						<dd class="usage"><fieldset><legend /><pre><code>var shadowColor = new libjass.parts.ShadowColor(value);</code></pre></fieldset></dd>
						<dd class="parameters">
							<dl>
								<dt class="parameter name">value</dt>
								<dd class="parameter type">libjass.parts.Color</dd>
								<dd class="parameter description">{\4c###} -&gt; color (Color), {\4c} -&gt; null</dd>
							</dl>
						</dd>
						<dd class="members">
							<dl id="libjass.parts.ShadowColor.value" class="property">
								<dt class="name"><a href="#libjass.parts.ShadowColor.value">value</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									The value of this shadow color tag.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = shadowColor.value;</code></pre></fieldset></dd>
								<dd class="return type">libjass.parts.Color</dd>
							</dl>

						</dd>
					</dl>
					<dl id="libjass.parts.ShadowX" class="clazz">
						<dt class="name">class <a href="#libjass.parts.ShadowX">ShadowX</a></dt>
						<dd class="description">
							A horizontal shadow tag {\xshad}
						</dd>
						<dd class="usage"><fieldset><legend /><pre><code>var shadowX = new libjass.parts.ShadowX(value);</code></pre></fieldset></dd>
						<dd class="parameters">
							<dl>
								<dt class="parameter name">value</dt>
								<dd class="parameter type">?number</dd>
								<dd class="parameter description">{\xshad###} -&gt; depth (number), {\xshad} -&gt; null</dd>
							</dl>
						</dd>
						<dd class="members">
							<dl id="libjass.parts.ShadowX.value" class="property">
								<dt class="name"><a href="#libjass.parts.ShadowX.value">value</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									The value of this horizontal shadow tag.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = shadowX.value;</code></pre></fieldset></dd>
								<dd class="return type">?number</dd>
							</dl>

						</dd>
					</dl>
					<dl id="libjass.parts.ShadowY" class="clazz">
						<dt class="name">class <a href="#libjass.parts.ShadowY">ShadowY</a></dt>
						<dd class="description">
							A vertical shadow tag {\yshad}
						</dd>
						<dd class="usage"><fieldset><legend /><pre><code>var shadowY = new libjass.parts.ShadowY(value);</code></pre></fieldset></dd>
						<dd class="parameters">
							<dl>
								<dt class="parameter name">value</dt>
								<dd class="parameter type">?number</dd>
								<dd class="parameter description">{\yshad###} -&gt; depth (number), {\yshad} -&gt; null</dd>
							</dl>
						</dd>
						<dd class="members">
							<dl id="libjass.parts.ShadowY.value" class="property">
								<dt class="name"><a href="#libjass.parts.ShadowY.value">value</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									The value of this vertical shadow tag.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = shadowY.value;</code></pre></fieldset></dd>
								<dd class="return type">?number</dd>
							</dl>

						</dd>
					</dl>
					<dl id="libjass.parts.SkewX" class="clazz">
						<dt class="name">class <a href="#libjass.parts.SkewX">SkewX</a></dt>
						<dd class="description">
							An X-axis shearing tag {\fax}
						</dd>
						<dd class="usage"><fieldset><legend /><pre><code>var skewX = new libjass.parts.SkewX(value);</code></pre></fieldset></dd>
						<dd class="parameters">
							<dl>
								<dt class="parameter name">value</dt>
								<dd class="parameter type">?number</dd>
								<dd class="parameter description">{\fax###} -&gt; angle (number), {\fax} -&gt; null</dd>
							</dl>
						</dd>
						<dd class="members">
							<dl id="libjass.parts.SkewX.value" class="property">
								<dt class="name"><a href="#libjass.parts.SkewX.value">value</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									The value of this X-axis shearing tag.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = skewX.value;</code></pre></fieldset></dd>
								<dd class="return type">?number</dd>
							</dl>

						</dd>
					</dl>
					<dl id="libjass.parts.SkewY" class="clazz">
						<dt class="name">class <a href="#libjass.parts.SkewY">SkewY</a></dt>
						<dd class="description">
							A Y-axis shearing tag {\fay}
						</dd>
						<dd class="usage"><fieldset><legend /><pre><code>var skewY = new libjass.parts.SkewY(value);</code></pre></fieldset></dd>
						<dd class="parameters">
							<dl>
								<dt class="parameter name">value</dt>
								<dd class="parameter type">?number</dd>
								<dd class="parameter description">{\fay###} -&gt; angle (number), {\fay} -&gt; null</dd>
							</dl>
						</dd>
						<dd class="members">
							<dl id="libjass.parts.SkewY.value" class="property">
								<dt class="name"><a href="#libjass.parts.SkewY.value">value</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									The value of this Y-axis shearing tag.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = skewY.value;</code></pre></fieldset></dd>
								<dd class="return type">?number</dd>
							</dl>

						</dd>
					</dl>
					<dl id="libjass.parts.StrikeThrough" class="clazz">
						<dt class="name">class <a href="#libjass.parts.StrikeThrough">StrikeThrough</a></dt>
						<dd class="description">
							A strike-through tag {\s}
						</dd>
						<dd class="usage"><fieldset><legend /><pre><code>var strikeThrough = new libjass.parts.StrikeThrough(value);</code></pre></fieldset></dd>
						<dd class="parameters">
							<dl>
								<dt class="parameter name">value</dt>
								<dd class="parameter type">?boolean</dd>
								<dd class="parameter description">{\s1} -&gt; true, {\s0} -&gt; false, {\s} -&gt; null</dd>
							</dl>
						</dd>
						<dd class="members">
							<dl id="libjass.parts.StrikeThrough.value" class="property">
								<dt class="name"><a href="#libjass.parts.StrikeThrough.value">value</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									The value of this strike-through tag.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = strikeThrough.value;</code></pre></fieldset></dd>
								<dd class="return type">?boolean</dd>
							</dl>

						</dd>
					</dl>
					<dl id="libjass.parts.SweepingColorKaraoke" class="clazz">
						<dt class="name">class <a href="#libjass.parts.SweepingColorKaraoke">SweepingColorKaraoke</a></dt>
						<dd class="description">
							A sweeping color karaoke tag {\K} or {\kf}
						</dd>
						<dd class="usage"><fieldset><legend /><pre><code>var sweepingColorKaraoke = new libjass.parts.SweepingColorKaraoke(duration);</code></pre></fieldset></dd>
						<dd class="parameters">
							<dl>
								<dt class="parameter name">duration</dt>
								<dd class="parameter type">number</dd>
								<dd class="parameter description">{\kf###} -&gt; duration (number)</dd>
							</dl>
						</dd>
						<dd class="members">
							<dl id="libjass.parts.SweepingColorKaraoke.duration" class="property">
								<dt class="name"><a href="#libjass.parts.SweepingColorKaraoke.duration">duration</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									The duration of this sweeping color karaoke tag.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = sweepingColorKaraoke.duration;</code></pre></fieldset></dd>
								<dd class="return type">number</dd>
							</dl>

						</dd>
					</dl>
					<dl id="libjass.parts.Text" class="clazz">
						<dt class="name">class <a href="#libjass.parts.Text">Text</a></dt>
						<dd class="description">
							A block of text, i.e., any text not enclosed in {}. Also includes \h.
						</dd>
						<dd class="usage"><fieldset><legend /><pre><code>var text = new libjass.parts.Text(value);</code></pre></fieldset></dd>
						<dd class="parameters">
							<dl>
								<dt class="parameter name">value</dt>
								<dd class="parameter type">string</dd>
								<dd class="parameter description">The content of this block of text</dd>
							</dl>
						</dd>
						<dd class="members">
							<dl id="libjass.parts.Text.value" class="property">
								<dt class="name"><a href="#libjass.parts.Text.value">value</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									The value of this text part.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = text.value;</code></pre></fieldset></dd>
								<dd class="return type">string</dd>
							</dl>

							<dl id="libjass.parts.Text.toString" class="function">
								<dt class="name"><a href="#libjass.parts.Text.toString">toString</a></dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = text.toString();</code></pre></fieldset></dd>
								<dt>Returns</dt>
								<dd class="return type">string</dd>
								<dd class="return description"></dd>
							</dl>

						</dd>
					</dl>
					<dl id="libjass.parts.Transform" class="clazz">
						<dt class="name">class <a href="#libjass.parts.Transform">Transform</a></dt>
						<dd class="description">
							A transform tag {\t}
						</dd>
						<dd class="usage"><fieldset><legend /><pre><code>var transform = new libjass.parts.Transform(start, end, accel, tags);</code></pre></fieldset></dd>
						<dd class="parameters">
							<dl>
								<dt class="parameter name">start</dt>
								<dd class="parameter type">number</dd>
								<dd class="parameter description"></dd>
								<dt class="parameter name">end</dt>
								<dd class="parameter type">number</dd>
								<dd class="parameter description"></dd>
								<dt class="parameter name">accel</dt>
								<dd class="parameter type">number</dd>
								<dd class="parameter description"></dd>
								<dt class="parameter name">tags</dt>
								<dd class="parameter type">!Array.&lt;!libjass.parts.Tag&gt;</dd>
								<dd class="parameter description"></dd>
							</dl>
						</dd>
						<dd class="members">
							<dl id="libjass.parts.Transform.accel" class="property">
								<dt class="name"><a href="#libjass.parts.Transform.accel">accel</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									The acceleration of this transform tag.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = transform.accel;</code></pre></fieldset></dd>
								<dd class="return type">?number</dd>
							</dl>

							<dl id="libjass.parts.Transform.end" class="property">
								<dt class="name"><a href="#libjass.parts.Transform.end">end</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									The ending time of this transform tag.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = transform.end;</code></pre></fieldset></dd>
								<dd class="return type">?number</dd>
							</dl>

							<dl id="libjass.parts.Transform.start" class="property">
								<dt class="name"><a href="#libjass.parts.Transform.start">start</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									The starting time of this transform tag.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = transform.start;</code></pre></fieldset></dd>
								<dd class="return type">?number</dd>
							</dl>

							<dl id="libjass.parts.Transform.tags" class="property">
								<dt class="name"><a href="#libjass.parts.Transform.tags">tags</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									The tags animated by this transform tag.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = transform.tags;</code></pre></fieldset></dd>
								<dd class="return type">!Array.&lt;!libjass.parts.Tag&gt;</dd>
							</dl>

						</dd>
					</dl>
					<dl id="libjass.parts.Underline" class="clazz">
						<dt class="name">class <a href="#libjass.parts.Underline">Underline</a></dt>
						<dd class="description">
							An underline tag {\u}
						</dd>
						<dd class="usage"><fieldset><legend /><pre><code>var underline = new libjass.parts.Underline(value);</code></pre></fieldset></dd>
						<dd class="parameters">
							<dl>
								<dt class="parameter name">value</dt>
								<dd class="parameter type">?boolean</dd>
								<dd class="parameter description">{\u1} -&gt; true, {\u0} -&gt; false, {\u} -&gt; null</dd>
							</dl>
						</dd>
						<dd class="members">
							<dl id="libjass.parts.Underline.value" class="property">
								<dt class="name"><a href="#libjass.parts.Underline.value">value</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									The value of this underline tag.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = underline.value;</code></pre></fieldset></dd>
								<dd class="return type">?boolean</dd>
							</dl>

						</dd>
					</dl>
					<dl id="libjass.parts.VectorClip" class="clazz">
						<dt class="name">class <a href="#libjass.parts.VectorClip">VectorClip</a></dt>
						<dd class="description">
							A vector clip tag {\clip} or {\iclip}
						</dd>
						<dd class="usage"><fieldset><legend /><pre><code>var vectorClip = new libjass.parts.VectorClip(scale, instructions, inside);</code></pre></fieldset></dd>
						<dd class="parameters">
							<dl>
								<dt class="parameter name">scale</dt>
								<dd class="parameter type">number</dd>
								<dd class="parameter description"></dd>
								<dt class="parameter name">instructions</dt>
								<dd class="parameter type">!Array.&lt;!libjass.parts.drawing.Instruction&gt;</dd>
								<dd class="parameter description"></dd>
								<dt class="parameter name">inside</dt>
								<dd class="parameter type">boolean</dd>
								<dd class="parameter description"></dd>
							</dl>
						</dd>
						<dd class="members">
							<dl id="libjass.parts.VectorClip.inside" class="property">
								<dt class="name"><a href="#libjass.parts.VectorClip.inside">inside</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									Whether this vector clip tag clips the region it encloses or the region it excludes.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = vectorClip.inside;</code></pre></fieldset></dd>
								<dd class="return type">boolean</dd>
							</dl>

							<dl id="libjass.parts.VectorClip.instructions" class="property">
								<dt class="name"><a href="#libjass.parts.VectorClip.instructions">instructions</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									The clip commands of this vector clip tag.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = vectorClip.instructions;</code></pre></fieldset></dd>
								<dd class="return type">string</dd>
							</dl>

							<dl id="libjass.parts.VectorClip.scale" class="property">
								<dt class="name"><a href="#libjass.parts.VectorClip.scale">scale</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									The scale of this vector clip tag.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = vectorClip.scale;</code></pre></fieldset></dd>
								<dd class="return type">number</dd>
							</dl>

						</dd>
					</dl>
					<dl id="libjass.parts.WrappingStyle" class="clazz">
						<dt class="name">class <a href="#libjass.parts.WrappingStyle">WrappingStyle</a></dt>
						<dd class="description">
							A wrapping style tag {\q}
						</dd>
						<dd class="usage"><fieldset><legend /><pre><code>var wrappingStyle = new libjass.parts.WrappingStyle(value);</code></pre></fieldset></dd>
						<dd class="parameters">
							<dl>
								<dt class="parameter name">value</dt>
								<dd class="parameter type">number</dd>
								<dd class="parameter description">{\q###} -&gt; style (number)</dd>
							</dl>
						</dd>
						<dd class="members">
							<dl id="libjass.parts.WrappingStyle.value" class="property">
								<dt class="name"><a href="#libjass.parts.WrappingStyle.value">value</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									The value of this wrapping style tag.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = wrappingStyle.value;</code></pre></fieldset></dd>
								<dd class="return type">number</dd>
							</dl>

						</dd>
					</dl>
				</section>
			</section>
			<section class="namespace">
				<h1 id="libjass.parts.drawing">Namespace libjass.parts.drawing</h1>
				<section>
					<h2>Interfaces</h2>
					<dl id="libjass.parts.drawing.Instruction" class="interface">
						<dt class="name">interface <a href="#libjass.parts.drawing.Instruction">Instruction</a></dt>
						<dd class="description">
							The base interface of the drawing instructions.
						</dd>
						<dd class="members">
						</dd>
					</dl>
				</section>
				<section>
					<h2>Classes</h2>
					<dl id="libjass.parts.drawing.CubicBezierCurveInstruction" class="clazz">
						<dt class="name">class <a href="#libjass.parts.drawing.CubicBezierCurveInstruction">CubicBezierCurveInstruction</a> implements <a href="#libjass.parts.drawing.Instruction">Instruction</a></dt>
						<dd class="description">
							An instruction to draw a cubic bezier curve to a particular position, with two given control points.
						</dd>
						<dd class="usage"><fieldset><legend /><pre><code>var cubicBezierCurveInstruction = new libjass.parts.drawing.CubicBezierCurveInstruction(x1, y1, x2, y2, x3, y3);</code></pre></fieldset></dd>
						<dd class="parameters">
							<dl>
								<dt class="parameter name">x1</dt>
								<dd class="parameter type">number</dd>
								<dd class="parameter description"></dd>
								<dt class="parameter name">y1</dt>
								<dd class="parameter type">number</dd>
								<dd class="parameter description"></dd>
								<dt class="parameter name">x2</dt>
								<dd class="parameter type">number</dd>
								<dd class="parameter description"></dd>
								<dt class="parameter name">y2</dt>
								<dd class="parameter type">number</dd>
								<dd class="parameter description"></dd>
								<dt class="parameter name">x3</dt>
								<dd class="parameter type">number</dd>
								<dd class="parameter description"></dd>
								<dt class="parameter name">y3</dt>
								<dd class="parameter type">number</dd>
								<dd class="parameter description"></dd>
							</dl>
						</dd>
						<dd class="members">
							<dl id="libjass.parts.drawing.CubicBezierCurveInstruction.x1" class="property">
								<dt class="name"><a href="#libjass.parts.drawing.CubicBezierCurveInstruction.x1">x1</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									The X position of the first control point of this cubic bezier curve instruction.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = cubicBezierCurveInstruction.x1;</code></pre></fieldset></dd>
								<dd class="return type">number</dd>
							</dl>

							<dl id="libjass.parts.drawing.CubicBezierCurveInstruction.x2" class="property">
								<dt class="name"><a href="#libjass.parts.drawing.CubicBezierCurveInstruction.x2">x2</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									The X position of the second control point of this cubic bezier curve instruction.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = cubicBezierCurveInstruction.x2;</code></pre></fieldset></dd>
								<dd class="return type">number</dd>
							</dl>

							<dl id="libjass.parts.drawing.CubicBezierCurveInstruction.x3" class="property">
								<dt class="name"><a href="#libjass.parts.drawing.CubicBezierCurveInstruction.x3">x3</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									The ending X position of this cubic bezier curve instruction.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = cubicBezierCurveInstruction.x3;</code></pre></fieldset></dd>
								<dd class="return type">number</dd>
							</dl>

							<dl id="libjass.parts.drawing.CubicBezierCurveInstruction.y1" class="property">
								<dt class="name"><a href="#libjass.parts.drawing.CubicBezierCurveInstruction.y1">y1</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									The Y position of the first control point of this cubic bezier curve instruction.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = cubicBezierCurveInstruction.y1;</code></pre></fieldset></dd>
								<dd class="return type">number</dd>
							</dl>

							<dl id="libjass.parts.drawing.CubicBezierCurveInstruction.y2" class="property">
								<dt class="name"><a href="#libjass.parts.drawing.CubicBezierCurveInstruction.y2">y2</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									The Y position of the second control point of this cubic bezier curve instruction.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = cubicBezierCurveInstruction.y2;</code></pre></fieldset></dd>
								<dd class="return type">number</dd>
							</dl>

							<dl id="libjass.parts.drawing.CubicBezierCurveInstruction.y3" class="property">
								<dt class="name"><a href="#libjass.parts.drawing.CubicBezierCurveInstruction.y3">y3</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									The ending Y position of this cubic bezier curve instruction.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = cubicBezierCurveInstruction.y3;</code></pre></fieldset></dd>
								<dd class="return type">number</dd>
							</dl>

						</dd>
					</dl>
					<dl id="libjass.parts.drawing.LineInstruction" class="clazz">
						<dt class="name">class <a href="#libjass.parts.drawing.LineInstruction">LineInstruction</a> implements <a href="#libjass.parts.drawing.Instruction">Instruction</a></dt>
						<dd class="description">
							An instruction to draw a line to a particular position.
						</dd>
						<dd class="usage"><fieldset><legend /><pre><code>var lineInstruction = new libjass.parts.drawing.LineInstruction(x, y);</code></pre></fieldset></dd>
						<dd class="parameters">
							<dl>
								<dt class="parameter name">x</dt>
								<dd class="parameter type">number</dd>
								<dd class="parameter description"></dd>
								<dt class="parameter name">y</dt>
								<dd class="parameter type">number</dd>
								<dd class="parameter description"></dd>
							</dl>
						</dd>
						<dd class="members">
							<dl id="libjass.parts.drawing.LineInstruction.x" class="property">
								<dt class="name"><a href="#libjass.parts.drawing.LineInstruction.x">x</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									The X position of this line instruction.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = lineInstruction.x;</code></pre></fieldset></dd>
								<dd class="return type">number</dd>
							</dl>

							<dl id="libjass.parts.drawing.LineInstruction.y" class="property">
								<dt class="name"><a href="#libjass.parts.drawing.LineInstruction.y">y</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									The Y position of this line instruction.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = lineInstruction.y;</code></pre></fieldset></dd>
								<dd class="return type">number</dd>
							</dl>

						</dd>
					</dl>
					<dl id="libjass.parts.drawing.MoveInstruction" class="clazz">
						<dt class="name">class <a href="#libjass.parts.drawing.MoveInstruction">MoveInstruction</a> implements <a href="#libjass.parts.drawing.Instruction">Instruction</a></dt>
						<dd class="description">
							An instruction to move to a particular position.
						</dd>
						<dd class="usage"><fieldset><legend /><pre><code>var moveInstruction = new libjass.parts.drawing.MoveInstruction(x, y);</code></pre></fieldset></dd>
						<dd class="parameters">
							<dl>
								<dt class="parameter name">x</dt>
								<dd class="parameter type">number</dd>
								<dd class="parameter description"></dd>
								<dt class="parameter name">y</dt>
								<dd class="parameter type">number</dd>
								<dd class="parameter description"></dd>
							</dl>
						</dd>
						<dd class="members">
							<dl id="libjass.parts.drawing.MoveInstruction.x" class="property">
								<dt class="name"><a href="#libjass.parts.drawing.MoveInstruction.x">x</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									The X position of this move instruction.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = moveInstruction.x;</code></pre></fieldset></dd>
								<dd class="return type">number</dd>
							</dl>

							<dl id="libjass.parts.drawing.MoveInstruction.y" class="property">
								<dt class="name"><a href="#libjass.parts.drawing.MoveInstruction.y">y</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									The Y position of this move instruction.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = moveInstruction.y;</code></pre></fieldset></dd>
								<dd class="return type">number</dd>
							</dl>

						</dd>
					</dl>
				</section>
			</section>
			<section class="namespace">
				<h1 id="libjass.renderers">Namespace libjass.renderers</h1>
				<section>
					<h2>Interfaces</h2>
					<dl id="libjass.renderers.Clock" class="interface">
						<dt class="name">interface <a href="#libjass.renderers.Clock">Clock</a></dt>
						<dd class="description">
							The clock interface. A clock is used by a renderer as a source of <a href="#libjass.renderers.ClockEvent">libjass.renderers.ClockEvent</a>s.
						</dd>
						<dd class="members">
							<dl id="libjass.renderers.Clock.currentTime" class="property">
								<dt class="name"><a href="#libjass.renderers.Clock.currentTime">currentTime</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = clock.currentTime;</code></pre></fieldset></dd>
								<dd class="return type">number</dd>
								<dt class="setter">Setter</dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>clock.currentTime = value;</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">value</dt>
										<dd class="parameter type">number</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
							</dl>

							<dl id="libjass.renderers.Clock.enabled" class="property">
								<dt class="name"><a href="#libjass.renderers.Clock.enabled">enabled</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = clock.enabled;</code></pre></fieldset></dd>
								<dd class="return type">boolean</dd>
								<dt class="setter">Setter</dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>clock.enabled = value;</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">value</dt>
										<dd class="parameter type">boolean</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
							</dl>

							<dl id="libjass.renderers.Clock.paused" class="property">
								<dt class="name"><a href="#libjass.renderers.Clock.paused">paused</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = clock.paused;</code></pre></fieldset></dd>
								<dd class="return type">boolean</dd>
								<dt class="setter">Setter</dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>clock.paused = value;</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">value</dt>
										<dd class="parameter type">boolean</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
							</dl>

							<dl id="libjass.renderers.Clock.rate" class="property">
								<dt class="name"><a href="#libjass.renderers.Clock.rate">rate</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									Gets the rate of the clock - how fast the clock ticks compared to real time.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = clock.rate;</code></pre></fieldset></dd>
								<dd class="return type">number</dd>
								<dt class="setter">Setter</dt>
								<dd class="description">
									Gets the rate of the clock - how fast the clock ticks compared to real time.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>clock.rate = value;</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">value</dt>
										<dd class="parameter type">number</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
							</dl>

							<dl id="libjass.renderers.Clock.addEventListener" class="function">
								<dt class="name"><a href="#libjass.renderers.Clock.addEventListener">addEventListener</a></dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>clock.addEventListener(type, listener);</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">type</dt>
										<dd class="parameter type">number</dd>
										<dd class="parameter description"></dd>
										<dt class="parameter name">listener</dt>
										<dd class="parameter type">!Function</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
							</dl>

							<dl id="libjass.renderers.Clock.disable" class="function">
								<dt class="name"><a href="#libjass.renderers.Clock.disable">disable</a></dt>
								<dd class="description">
									Disable the clock.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = clock.disable();</code></pre></fieldset></dd>
								<dt>Returns</dt>
								<dd class="return type">boolean</dd>
								<dd class="return description">True if the clock is now disabled, false if it was already disabled.</dd>
							</dl>

							<dl id="libjass.renderers.Clock.enable" class="function">
								<dt class="name"><a href="#libjass.renderers.Clock.enable">enable</a></dt>
								<dd class="description">
									Enable the clock.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = clock.enable();</code></pre></fieldset></dd>
								<dt>Returns</dt>
								<dd class="return type">boolean</dd>
								<dd class="return description">True if the clock is now enabled, false if it was already enabled.</dd>
							</dl>

							<dl id="libjass.renderers.Clock.setEnabled" class="function">
								<dt class="name"><a href="#libjass.renderers.Clock.setEnabled">setEnabled</a></dt>
								<dd class="description">
									Enable or disable the clock.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = clock.setEnabled(enabled);</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">enabled</dt>
										<dd class="parameter type">boolean</dd>
										<dd class="parameter description">If true, the clock is enabled, otherwise it's disabled.</dd>
									</dl>
								</dd>
								<dt>Returns</dt>
								<dd class="return type">boolean</dd>
								<dd class="return description">True if the clock is now in the given state, false if it was already in that state.</dd>
							</dl>

							<dl id="libjass.renderers.Clock.toggle" class="function">
								<dt class="name"><a href="#libjass.renderers.Clock.toggle">toggle</a></dt>
								<dd class="description">
									Toggle the clock.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>clock.toggle();</code></pre></fieldset></dd>
							</dl>

						</dd>
					</dl>
				</section>
				<section>
					<h2>Classes</h2>
					<dl id="libjass.renderers.AutoClock" class="clazz">
						<dt class="name">class <a href="#libjass.renderers.AutoClock">AutoClock</a> implements <a href="#libjass.renderers.Clock">Clock</a></dt>
						<dd class="description">
							<p>An implementation of <a href="#libjass.renderers.Clock">libjass.renderers.Clock</a> that automatically ticks and generates <a href="#libjass.renderers.ClockEvent">libjass.renderers.ClockEvent</a>s according to the state of an external driver.</p><p>For example, if you're using libjass to render subtitles on a canvas with your own video controls, these video controls will function as the driver to this AutoClock.
It would call <a href="#libjass.renderers.AutoClock.play">libjass.renderers.AutoClock.play</a>, <a href="#libjass.renderers.AutoClock.pause">libjass.renderers.AutoClock.pause</a>, etc. when the user pressed the corresponding video controls.</p><p>The difference from ManualClock is that AutoClock does not require the driver to call something like <a href="#libjass.renderers.ManualClock.tick">libjass.renderers.ManualClock.tick</a>. Instead it keeps its
own time with a high-resolution requestAnimationFrame-based timer.</p><p>If using libjass with a &lt;video&gt; element, consider using <a href="#libjass.renderers.VideoClock">libjass.renderers.VideoClock</a> that uses the video element as a driver.</p>
						</dd>
						<dd class="usage"><fieldset><legend /><pre><code>var autoClock = new libjass.renderers.AutoClock(getCurrentTime, autoPauseAfter);</code></pre></fieldset></dd>
						<dd class="parameters">
							<dl>
								<dt class="parameter name">getCurrentTime</dt>
								<dd class="parameter type">function():number</dd>
								<dd class="parameter description">A callback that will be invoked to get the current time of the external driver.</dd>
								<dt class="parameter name">autoPauseAfter</dt>
								<dd class="parameter type">number</dd>
								<dd class="parameter description">If two calls to getCurrentTime are more than autoPauseAfter milliseconds apart but return the same time, then the external driver will be
considered to have paused.</dd>
							</dl>
						</dd>
						<dd class="members">
							<dl id="libjass.renderers.AutoClock.currentTime" class="property">
								<dt class="name"><a href="#libjass.renderers.AutoClock.currentTime">currentTime</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = autoClock.currentTime;</code></pre></fieldset></dd>
								<dd class="return type">number</dd>
							</dl>

							<dl id="libjass.renderers.AutoClock.enabled" class="property">
								<dt class="name"><a href="#libjass.renderers.AutoClock.enabled">enabled</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = autoClock.enabled;</code></pre></fieldset></dd>
								<dd class="return type">boolean</dd>
							</dl>

							<dl id="libjass.renderers.AutoClock.paused" class="property">
								<dt class="name"><a href="#libjass.renderers.AutoClock.paused">paused</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = autoClock.paused;</code></pre></fieldset></dd>
								<dd class="return type">boolean</dd>
							</dl>

							<dl id="libjass.renderers.AutoClock.rate" class="property">
								<dt class="name"><a href="#libjass.renderers.AutoClock.rate">rate</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									Gets the rate of the clock - how fast the clock ticks compared to real time.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = autoClock.rate;</code></pre></fieldset></dd>
								<dd class="return type">number</dd>
							</dl>

							<dl id="libjass.renderers.AutoClock.addEventListener" class="function">
								<dt class="name"><a href="#libjass.renderers.AutoClock.addEventListener">addEventListener</a></dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>autoClock.addEventListener(type, listener);</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">type</dt>
										<dd class="parameter type">number</dd>
										<dd class="parameter description"></dd>
										<dt class="parameter name">listener</dt>
										<dd class="parameter type">!Function</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
							</dl>

							<dl id="libjass.renderers.AutoClock.disable" class="function">
								<dt class="name"><a href="#libjass.renderers.AutoClock.disable">disable</a></dt>
								<dd class="description">
									Disable the clock.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = autoClock.disable();</code></pre></fieldset></dd>
								<dt>Returns</dt>
								<dd class="return type">boolean</dd>
								<dd class="return description">True if the clock is now disabled, false if it was already disabled.</dd>
							</dl>

							<dl id="libjass.renderers.AutoClock.enable" class="function">
								<dt class="name"><a href="#libjass.renderers.AutoClock.enable">enable</a></dt>
								<dd class="description">
									Enable the clock.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = autoClock.enable();</code></pre></fieldset></dd>
								<dt>Returns</dt>
								<dd class="return type">boolean</dd>
								<dd class="return description">True if the clock is now enabled, false if it was already enabled.</dd>
							</dl>

							<dl id="libjass.renderers.AutoClock.pause" class="function">
								<dt class="name"><a href="#libjass.renderers.AutoClock.pause">pause</a></dt>
								<dd class="description">
									Tells the clock to pause.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>autoClock.pause();</code></pre></fieldset></dd>
							</dl>

							<dl id="libjass.renderers.AutoClock.play" class="function">
								<dt class="name"><a href="#libjass.renderers.AutoClock.play">play</a></dt>
								<dd class="description">
									Tells the clock to start generating ticks.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>autoClock.play();</code></pre></fieldset></dd>
							</dl>

							<dl id="libjass.renderers.AutoClock.seeking" class="function">
								<dt class="name"><a href="#libjass.renderers.AutoClock.seeking">seeking</a></dt>
								<dd class="description">
									Tells the clock that the external driver is seeking.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>autoClock.seeking();</code></pre></fieldset></dd>
							</dl>

							<dl id="libjass.renderers.AutoClock.setEnabled" class="function">
								<dt class="name"><a href="#libjass.renderers.AutoClock.setEnabled">setEnabled</a></dt>
								<dd class="description">
									Enable or disable the clock.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = autoClock.setEnabled(enabled);</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">enabled</dt>
										<dd class="parameter type">boolean</dd>
										<dd class="parameter description">If true, the clock is enabled, otherwise it's disabled.</dd>
									</dl>
								</dd>
								<dt>Returns</dt>
								<dd class="return type">boolean</dd>
								<dd class="return description">True if the clock is now in the given state, false if it was already in that state.</dd>
							</dl>

							<dl id="libjass.renderers.AutoClock.setRate" class="function">
								<dt class="name"><a href="#libjass.renderers.AutoClock.setRate">setRate</a></dt>
								<dd class="description">
									Sets the rate of the clock - how fast the clock ticks compared to real time.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>autoClock.setRate(rate);</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">rate</dt>
										<dd class="parameter type">number</dd>
										<dd class="parameter description">The new rate of the clock.</dd>
									</dl>
								</dd>
							</dl>

							<dl id="libjass.renderers.AutoClock.toggle" class="function">
								<dt class="name"><a href="#libjass.renderers.AutoClock.toggle">toggle</a></dt>
								<dd class="description">
									Toggle the clock.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>autoClock.toggle();</code></pre></fieldset></dd>
							</dl>

							<dl id="libjass.renderers.AutoClock._onTimerTick" class="function private">
								<dt class="name"><a href="#libjass.renderers.AutoClock._onTimerTick">_onTimerTick</a></dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>autoClock._onTimerTick(timeStamp);</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">timeStamp</dt>
										<dd class="parameter type">number</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
							</dl>

							<dl id="libjass.renderers.AutoClock._startTicking" class="function private">
								<dt class="name"><a href="#libjass.renderers.AutoClock._startTicking">_startTicking</a></dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>autoClock._startTicking();</code></pre></fieldset></dd>
							</dl>

							<dl id="libjass.renderers.AutoClock._stopTicking" class="function private">
								<dt class="name"><a href="#libjass.renderers.AutoClock._stopTicking">_stopTicking</a></dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>autoClock._stopTicking();</code></pre></fieldset></dd>
							</dl>

						</dd>
					</dl>
					<dl id="libjass.renderers.DefaultRenderer" class="clazz">
						<dt class="name">class <a href="#libjass.renderers.DefaultRenderer">DefaultRenderer</a> extends <a href="#libjass.renderers.WebRenderer">WebRenderer</a></dt>
						<dd class="description">
							A default renderer implementation.
						</dd>
						<dd class="usage"><fieldset><legend /><pre><code>var defaultRenderer = new libjass.renderers.DefaultRenderer(video, ass, settings);</code></pre></fieldset></dd>
						<dd class="parameters">
							<dl>
								<dt class="parameter name">video</dt>
								<dd class="parameter type">!HTMLVideoElement</dd>
								<dd class="parameter description"></dd>
								<dt class="parameter name">ass</dt>
								<dd class="parameter type">!libjass.ASS</dd>
								<dd class="parameter description"></dd>
								<dt class="parameter name">settings</dt>
								<dd class="parameter type">libjass.renderers.RendererSettings</dd>
								<dd class="parameter description"></dd>
							</dl>
						</dd>
						<dd class="members">
							<dl id="libjass.renderers.DefaultRenderer.resize" class="function">
								<dt class="name"><a href="#libjass.renderers.DefaultRenderer.resize">resize</a></dt>
								<dd class="description">
									<p>Resize the subtitles to the dimensions of the video element.</p><p>This method accounts for letterboxing if the video element's size is not the same ratio as the video resolution.</p>
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>defaultRenderer.resize();</code></pre></fieldset></dd>
							</dl>

							<dl id="libjass.renderers.DefaultRenderer.resizeVideo" class="function">
								<dt class="name"><a href="#libjass.renderers.DefaultRenderer.resizeVideo">resizeVideo</a></dt>
								<dd class="description">
									@deprecated
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>defaultRenderer.resizeVideo();</code></pre></fieldset></dd>
							</dl>

							<dl id="libjass.renderers.DefaultRenderer._ready" class="function protected">
								<dt class="name"><a href="#libjass.renderers.DefaultRenderer._ready">_ready</a></dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>defaultRenderer._ready();</code></pre></fieldset></dd>
							</dl>

						</dd>
					</dl>
					<dl id="libjass.renderers.EventSource" class="clazz">
						<dt class="name">class <a href="#libjass.renderers.EventSource">EventSource.&lt;T&gt;</a></dt>
						<dd class="description">
							A mixin class that represents an event source.
						</dd>
						<dd class="usage"><fieldset><legend /><pre><code>var eventSource = new libjass.renderers.EventSource();</code></pre></fieldset></dd>
						<dd class="members">
							<dl id="libjass.renderers.EventSource._eventListeners" class="property">
								<dt class="name"><a href="#libjass.renderers.EventSource._eventListeners">_eventListeners</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									A map from event type to an array of all the listeners registered for that event type.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = eventSource._eventListeners;</code></pre></fieldset></dd>
								<dd class="return type">!Map.&lt;T, !Array.&lt;Function&gt;&gt;</dd>
								<dt class="setter">Setter</dt>
								<dd class="description">
									A map from event type to an array of all the listeners registered for that event type.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>eventSource._eventListeners = value;</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">value</dt>
										<dd class="parameter type">!Map.&lt;T, !Array.&lt;Function&gt;&gt;</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
							</dl>

							<dl id="libjass.renderers.EventSource._dispatchEvent" class="function">
								<dt class="name"><a href="#libjass.renderers.EventSource._dispatchEvent">_dispatchEvent</a></dt>
								<dd class="description">
									Calls all listeners registered for the given event type.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>eventSource._dispatchEvent(type, args);</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">type</dt>
										<dd class="parameter type">!T</dd>
										<dd class="parameter description">The type of event to dispatch</dd>
										<dt class="parameter name">args</dt>
										<dd class="parameter type">!Array.&lt;*&gt;</dd>
										<dd class="parameter description">Arguments for the listeners of the event</dd>
									</dl>
								</dd>
							</dl>

							<dl id="libjass.renderers.EventSource.addEventListener" class="function">
								<dt class="name"><a href="#libjass.renderers.EventSource.addEventListener">addEventListener</a></dt>
								<dd class="description">
									Add a listener for the given event.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>eventSource.addEventListener(type, listener);</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">type</dt>
										<dd class="parameter type">!T</dd>
										<dd class="parameter description">The type of event to attach the listener for</dd>
										<dt class="parameter name">listener</dt>
										<dd class="parameter type">!Function</dd>
										<dd class="parameter description">The listener</dd>
									</dl>
								</dd>
							</dl>

						</dd>
					</dl>
					<dl id="libjass.renderers.ManualClock" class="clazz">
						<dt class="name">class <a href="#libjass.renderers.ManualClock">ManualClock</a> implements <a href="#libjass.renderers.Clock">Clock</a>, <a href="#libjass.renderers.EventSource">EventSource.&lt;ClockEvent&gt;</a></dt>
						<dd class="description">
							An implementation of <a href="#libjass.renderers.Clock">libjass.renderers.Clock</a> that allows user script to manually trigger <a href="#libjass.renderers.ClockEvent">libjass.renderers.ClockEvent</a>s.
						</dd>
						<dd class="usage"><fieldset><legend /><pre><code>var manualClock = new libjass.renderers.ManualClock();</code></pre></fieldset></dd>
						<dd class="members">
							<dl id="libjass.renderers.ManualClock._dispatchEvent" class="property">
								<dt class="name"><a href="#libjass.renderers.ManualClock._dispatchEvent">_dispatchEvent</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = manualClock._dispatchEvent;</code></pre></fieldset></dd>
								<dd class="return type">function(number, Array.&lt;*&gt;)</dd>
								<dt class="setter">Setter</dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>manualClock._dispatchEvent = value;</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">value</dt>
										<dd class="parameter type">function(number, Array.&lt;*&gt;)</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
							</dl>

							<dl id="libjass.renderers.ManualClock._eventListeners" class="property">
								<dt class="name"><a href="#libjass.renderers.ManualClock._eventListeners">_eventListeners</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = manualClock._eventListeners;</code></pre></fieldset></dd>
								<dd class="return type">!Map.&lt;T, !Array.&lt;Function&gt;&gt;</dd>
								<dt class="setter">Setter</dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>manualClock._eventListeners = value;</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">value</dt>
										<dd class="parameter type">!Map.&lt;T, !Array.&lt;Function&gt;&gt;</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
							</dl>

							<dl id="libjass.renderers.ManualClock.addEventListener" class="property">
								<dt class="name"><a href="#libjass.renderers.ManualClock.addEventListener">addEventListener</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = manualClock.addEventListener;</code></pre></fieldset></dd>
								<dd class="return type">function(number, !Function)</dd>
								<dt class="setter">Setter</dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>manualClock.addEventListener = value;</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">value</dt>
										<dd class="parameter type">function(number, !Function)</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
							</dl>

							<dl id="libjass.renderers.ManualClock.currentTime" class="property">
								<dt class="name"><a href="#libjass.renderers.ManualClock.currentTime">currentTime</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = manualClock.currentTime;</code></pre></fieldset></dd>
								<dd class="return type">number</dd>
							</dl>

							<dl id="libjass.renderers.ManualClock.enabled" class="property">
								<dt class="name"><a href="#libjass.renderers.ManualClock.enabled">enabled</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = manualClock.enabled;</code></pre></fieldset></dd>
								<dd class="return type">boolean</dd>
							</dl>

							<dl id="libjass.renderers.ManualClock.paused" class="property">
								<dt class="name"><a href="#libjass.renderers.ManualClock.paused">paused</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = manualClock.paused;</code></pre></fieldset></dd>
								<dd class="return type">boolean</dd>
							</dl>

							<dl id="libjass.renderers.ManualClock.rate" class="property">
								<dt class="name"><a href="#libjass.renderers.ManualClock.rate">rate</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									Gets the rate of the clock - how fast the clock ticks compared to real time.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = manualClock.rate;</code></pre></fieldset></dd>
								<dd class="return type">number</dd>
							</dl>

							<dl id="libjass.renderers.ManualClock.disable" class="function">
								<dt class="name"><a href="#libjass.renderers.ManualClock.disable">disable</a></dt>
								<dd class="description">
									Disable the clock.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = manualClock.disable();</code></pre></fieldset></dd>
								<dt>Returns</dt>
								<dd class="return type">boolean</dd>
								<dd class="return description">True if the clock is now disabled, false if it was already disabled.</dd>
							</dl>

							<dl id="libjass.renderers.ManualClock.enable" class="function">
								<dt class="name"><a href="#libjass.renderers.ManualClock.enable">enable</a></dt>
								<dd class="description">
									Enable the clock.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = manualClock.enable();</code></pre></fieldset></dd>
								<dt>Returns</dt>
								<dd class="return type">boolean</dd>
								<dd class="return description">True if the clock is now enabled, false if it was already enabled.</dd>
							</dl>

							<dl id="libjass.renderers.ManualClock.pause" class="function">
								<dt class="name"><a href="#libjass.renderers.ManualClock.pause">pause</a></dt>
								<dd class="description">
									Trigger a <a href="#libjass.renderers.ClockEvent.Pause">libjass.renderers.ClockEvent.Pause</a>
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>manualClock.pause();</code></pre></fieldset></dd>
							</dl>

							<dl id="libjass.renderers.ManualClock.play" class="function">
								<dt class="name"><a href="#libjass.renderers.ManualClock.play">play</a></dt>
								<dd class="description">
									Trigger a <a href="#libjass.renderers.ClockEvent.Play">libjass.renderers.ClockEvent.Play</a>
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>manualClock.play();</code></pre></fieldset></dd>
							</dl>

							<dl id="libjass.renderers.ManualClock.seek" class="function">
								<dt class="name"><a href="#libjass.renderers.ManualClock.seek">seek</a></dt>
								<dd class="description">
									Seek to the given time. Unlike <a href="#libjass.renderers.ManualClock.tick">libjass.renderers.ManualClock.tick</a> this is used to represent a discontinuous jump, such as the user seeking
via the video element's position bar.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>manualClock.seek(time);</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">time</dt>
										<dd class="parameter type">number</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
							</dl>

							<dl id="libjass.renderers.ManualClock.setEnabled" class="function">
								<dt class="name"><a href="#libjass.renderers.ManualClock.setEnabled">setEnabled</a></dt>
								<dd class="description">
									Enable or disable the clock.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = manualClock.setEnabled(enabled);</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">enabled</dt>
										<dd class="parameter type">boolean</dd>
										<dd class="parameter description">If true, the clock is enabled, otherwise it's disabled.</dd>
									</dl>
								</dd>
								<dt>Returns</dt>
								<dd class="return type">boolean</dd>
								<dd class="return description">True if the clock is now in the given state, false if it was already in that state.</dd>
							</dl>

							<dl id="libjass.renderers.ManualClock.setRate" class="function">
								<dt class="name"><a href="#libjass.renderers.ManualClock.setRate">setRate</a></dt>
								<dd class="description">
									Sets the rate of the clock - how fast the clock ticks compared to real time.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>manualClock.setRate(rate);</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">rate</dt>
										<dd class="parameter type">number</dd>
										<dd class="parameter description">The new rate of the clock.</dd>
									</dl>
								</dd>
							</dl>

							<dl id="libjass.renderers.ManualClock.stop" class="function">
								<dt class="name"><a href="#libjass.renderers.ManualClock.stop">stop</a></dt>
								<dd class="description">
									Trigger a <a href="#libjass.renderers.ClockEvent.Stop">libjass.renderers.ClockEvent.Stop</a>
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>manualClock.stop();</code></pre></fieldset></dd>
							</dl>

							<dl id="libjass.renderers.ManualClock.tick" class="function">
								<dt class="name"><a href="#libjass.renderers.ManualClock.tick">tick</a></dt>
								<dd class="description">
									Trigger a <a href="#libjass.renderers.ClockEvent.Tick">libjass.renderers.ClockEvent.Tick</a> with the given time.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>manualClock.tick(currentTime);</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">currentTime</dt>
										<dd class="parameter type">number</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
							</dl>

							<dl id="libjass.renderers.ManualClock.toggle" class="function">
								<dt class="name"><a href="#libjass.renderers.ManualClock.toggle">toggle</a></dt>
								<dd class="description">
									Toggle the clock.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>manualClock.toggle();</code></pre></fieldset></dd>
							</dl>

						</dd>
					</dl>
					<dl id="libjass.renderers.NullRenderer" class="clazz">
						<dt class="name">class <a href="#libjass.renderers.NullRenderer">NullRenderer</a></dt>
						<dd class="description">
							A renderer implementation that doesn't output anything.
						</dd>
						<dd class="usage"><fieldset><legend /><pre><code>var nullRenderer = new libjass.renderers.NullRenderer(ass, clock, settings);</code></pre></fieldset></dd>
						<dd class="parameters">
							<dl>
								<dt class="parameter name">ass</dt>
								<dd class="parameter type">!libjass.ASS</dd>
								<dd class="parameter description"></dd>
								<dt class="parameter name">clock</dt>
								<dd class="parameter type">!libjass.renderers.Clock</dd>
								<dd class="parameter description"></dd>
								<dt class="parameter name">settings</dt>
								<dd class="parameter type">libjass.renderers.RendererSettings</dd>
								<dd class="parameter description"></dd>
							</dl>
						</dd>
						<dd class="members">
							<dl id="libjass.renderers.NullRenderer.ass" class="property">
								<dt class="name"><a href="#libjass.renderers.NullRenderer.ass">ass</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = nullRenderer.ass;</code></pre></fieldset></dd>
								<dd class="return type">!libjass.ASS</dd>
							</dl>

							<dl id="libjass.renderers.NullRenderer.clock" class="property">
								<dt class="name"><a href="#libjass.renderers.NullRenderer.clock">clock</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = nullRenderer.clock;</code></pre></fieldset></dd>
								<dd class="return type">!libjass.renderers.Clock</dd>
							</dl>

							<dl id="libjass.renderers.NullRenderer.enabled" class="property">
								<dt class="name"><a href="#libjass.renderers.NullRenderer.enabled">enabled</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = nullRenderer.enabled;</code></pre></fieldset></dd>
								<dd class="return type">boolean</dd>
							</dl>

							<dl id="libjass.renderers.NullRenderer.id" class="property">
								<dt class="name"><a href="#libjass.renderers.NullRenderer.id">id</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									The unique ID of this renderer. Auto-generated.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = nullRenderer.id;</code></pre></fieldset></dd>
								<dd class="return type">number</dd>
							</dl>

							<dl id="libjass.renderers.NullRenderer.settings" class="property">
								<dt class="name"><a href="#libjass.renderers.NullRenderer.settings">settings</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = nullRenderer.settings;</code></pre></fieldset></dd>
								<dd class="return type">!libjass.renderers.RendererSettings</dd>
							</dl>

							<dl id="libjass.renderers.NullRenderer.disable" class="function">
								<dt class="name"><a href="#libjass.renderers.NullRenderer.disable">disable</a></dt>
								<dd class="description">
									Disable the renderer.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = nullRenderer.disable();</code></pre></fieldset></dd>
								<dt>Returns</dt>
								<dd class="return type">boolean</dd>
								<dd class="return description">True if the renderer is now disabled, false if it was already disabled.</dd>
							</dl>

							<dl id="libjass.renderers.NullRenderer.draw" class="function">
								<dt class="name"><a href="#libjass.renderers.NullRenderer.draw">draw</a></dt>
								<dd class="description">
									Draw a dialogue. This is a no-op for this type.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>nullRenderer.draw(dialogue);</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">dialogue</dt>
										<dd class="parameter type">!libjass.Dialogue</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
							</dl>

							<dl id="libjass.renderers.NullRenderer.enable" class="function">
								<dt class="name"><a href="#libjass.renderers.NullRenderer.enable">enable</a></dt>
								<dd class="description">
									Enable the renderer.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = nullRenderer.enable();</code></pre></fieldset></dd>
								<dt>Returns</dt>
								<dd class="return type">boolean</dd>
								<dd class="return description">True if the renderer is now enabled, false if it was already enabled.</dd>
							</dl>

							<dl id="libjass.renderers.NullRenderer.preRender" class="function">
								<dt class="name"><a href="#libjass.renderers.NullRenderer.preRender">preRender</a></dt>
								<dd class="description">
									Pre-render a dialogue. This is a no-op for this type.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>nullRenderer.preRender(dialogue);</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">dialogue</dt>
										<dd class="parameter type">!libjass.Dialogue</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
							</dl>

							<dl id="libjass.renderers.NullRenderer.setEnabled" class="function">
								<dt class="name"><a href="#libjass.renderers.NullRenderer.setEnabled">setEnabled</a></dt>
								<dd class="description">
									Enable or disable the renderer.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = nullRenderer.setEnabled(enabled);</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">enabled</dt>
										<dd class="parameter type">boolean</dd>
										<dd class="parameter description">If true, the renderer is enabled, otherwise it's disabled.</dd>
									</dl>
								</dd>
								<dt>Returns</dt>
								<dd class="return type">boolean</dd>
								<dd class="return description">True if the renderer is now in the given state, false if it was already in that state.</dd>
							</dl>

							<dl id="libjass.renderers.NullRenderer.toggle" class="function">
								<dt class="name"><a href="#libjass.renderers.NullRenderer.toggle">toggle</a></dt>
								<dd class="description">
									Toggle the renderer.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>nullRenderer.toggle();</code></pre></fieldset></dd>
							</dl>

							<dl id="libjass.renderers.NullRenderer._onClockPause" class="function protected">
								<dt class="name"><a href="#libjass.renderers.NullRenderer._onClockPause">_onClockPause</a></dt>
								<dd class="description">
									Runs when the clock is paused.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>nullRenderer._onClockPause();</code></pre></fieldset></dd>
							</dl>

							<dl id="libjass.renderers.NullRenderer._onClockPlay" class="function protected">
								<dt class="name"><a href="#libjass.renderers.NullRenderer._onClockPlay">_onClockPlay</a></dt>
								<dd class="description">
									Runs when the clock is enabled, or starts playing, or is resumed from pause.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>nullRenderer._onClockPlay();</code></pre></fieldset></dd>
							</dl>

							<dl id="libjass.renderers.NullRenderer._onClockRateChange" class="function protected">
								<dt class="name"><a href="#libjass.renderers.NullRenderer._onClockRateChange">_onClockRateChange</a></dt>
								<dd class="description">
									Runs when the clock changes its rate.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>nullRenderer._onClockRateChange();</code></pre></fieldset></dd>
							</dl>

							<dl id="libjass.renderers.NullRenderer._onClockStop" class="function protected">
								<dt class="name"><a href="#libjass.renderers.NullRenderer._onClockStop">_onClockStop</a></dt>
								<dd class="description">
									Runs when the clock is disabled.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>nullRenderer._onClockStop();</code></pre></fieldset></dd>
							</dl>

							<dl id="libjass.renderers.NullRenderer._onClockTick" class="function protected">
								<dt class="name"><a href="#libjass.renderers.NullRenderer._onClockTick">_onClockTick</a></dt>
								<dd class="description">
									Runs when the clock's current time changed. This might be a result of either regular playback or seeking.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>nullRenderer._onClockTick();</code></pre></fieldset></dd>
							</dl>

						</dd>
					</dl>
					<dl id="libjass.renderers.RendererSettings" class="clazz">
						<dt class="name">class <a href="#libjass.renderers.RendererSettings">RendererSettings</a></dt>
						<dd class="description">
							Settings for the renderer.
						</dd>
						<dd class="usage"><fieldset><legend /><pre><code>var rendererSettings = new libjass.renderers.RendererSettings();</code></pre></fieldset></dd>
						<dd class="members">
							<dl id="libjass.renderers.RendererSettings.enableSvg" class="property">
								<dt class="name"><a href="#libjass.renderers.RendererSettings.enableSvg">enableSvg</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									<p>Outlines and blur are implemented using SVG filters by default. When false, they will be rendered using alternative means.</p><p>IE 11 and below do not support SVG filters on HTML elements so this should be set to false there. See http://caniuse.com/svg-html for details.</p><p>Defaults to true.</p>
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = rendererSettings.enableSvg;</code></pre></fieldset></dd>
								<dd class="return type">boolean</dd>
								<dt class="setter">Setter</dt>
								<dd class="description">
									<p>Outlines and blur are implemented using SVG filters by default. When false, they will be rendered using alternative means.</p><p>IE 11 and below do not support SVG filters on HTML elements so this should be set to false there. See http://caniuse.com/svg-html for details.</p><p>Defaults to true.</p>
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>rendererSettings.enableSvg = value;</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">value</dt>
										<dd class="parameter type">boolean</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
							</dl>

							<dl id="libjass.renderers.RendererSettings.fallbackFonts" class="property">
								<dt class="name"><a href="#libjass.renderers.RendererSettings.fallbackFonts">fallbackFonts</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									<p>Comma-separated list of fonts to be used when font specified in ASS Styles not loaded.</p><p>The value should be a valid CSS font-family property (i.e. comma-separated and individual names in quotes if necessary). Use empty string to disable fallback.</p><p>Defaults to 'Arial, Helvetica, sans-serif, "Segoe UI Symbol"'.</p>
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = rendererSettings.fallbackFonts;</code></pre></fieldset></dd>
								<dd class="return type">string</dd>
								<dt class="setter">Setter</dt>
								<dd class="description">
									<p>Comma-separated list of fonts to be used when font specified in ASS Styles not loaded.</p><p>The value should be a valid CSS font-family property (i.e. comma-separated and individual names in quotes if necessary). Use empty string to disable fallback.</p><p>Defaults to 'Arial, Helvetica, sans-serif, "Segoe UI Symbol"'.</p>
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>rendererSettings.fallbackFonts = value;</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">value</dt>
										<dd class="parameter type">string</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
							</dl>

							<dl id="libjass.renderers.RendererSettings.fontMap" class="property">
								<dt class="name"><a href="#libjass.renderers.RendererSettings.fontMap">fontMap</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									<p>A map of font name to one or more URLs of that font. If provided, the fonts in this map are pre-loaded by the WebRenderer when it's created.</p><p>The key of each entry of the map is the font name used in the ASS script. There are three choices for the value:</p><p>- A single string that you would use for the src attribute of a @font-face rule. Eg: `'url("/fonts.foo.ttf"), url("/fonts/foo-fallback.ttf"), local("Arial.ttf")'`</p><p>- An array of the individual sources that you would use for the src attribute of a @font-face rule. Eg: `['url("/fonts.foo.ttf")', 'url("/fonts/foo-fallback.ttf")', 'local("Arial")']`</p><p>- An array of URLs. Eg: `["/fonts.foo.ttf", "/fonts/foo-fallback.ttf"]`</p><p>Only the first and second forms allow you to use local fonts. The third form only allows you to use remote fonts.</p><p>If you have a &lt;style&gt; or &lt;link&gt; element on the page containing @font-face rules, you can use the <a href="#libjass.renderers.RendererSettings.makeFontMapFromStyleElement">libjass.renderers.RendererSettings.makeFontMapFromStyleElement</a>
convenience method to create a font map.</p><p>Defaults to null.</p>
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = rendererSettings.fontMap;</code></pre></fieldset></dd>
								<dd class="return type">!Map.&lt;string, (string|!Array.&lt;string&gt;)&gt;</dd>
								<dt class="setter">Setter</dt>
								<dd class="description">
									<p>A map of font name to one or more URLs of that font. If provided, the fonts in this map are pre-loaded by the WebRenderer when it's created.</p><p>The key of each entry of the map is the font name used in the ASS script. There are three choices for the value:</p><p>- A single string that you would use for the src attribute of a @font-face rule. Eg: `'url("/fonts.foo.ttf"), url("/fonts/foo-fallback.ttf"), local("Arial.ttf")'`</p><p>- An array of the individual sources that you would use for the src attribute of a @font-face rule. Eg: `['url("/fonts.foo.ttf")', 'url("/fonts/foo-fallback.ttf")', 'local("Arial")']`</p><p>- An array of URLs. Eg: `["/fonts.foo.ttf", "/fonts/foo-fallback.ttf"]`</p><p>Only the first and second forms allow you to use local fonts. The third form only allows you to use remote fonts.</p><p>If you have a &lt;style&gt; or &lt;link&gt; element on the page containing @font-face rules, you can use the <a href="#libjass.renderers.RendererSettings.makeFontMapFromStyleElement">libjass.renderers.RendererSettings.makeFontMapFromStyleElement</a>
convenience method to create a font map.</p><p>Defaults to null.</p>
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>rendererSettings.fontMap = value;</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">value</dt>
										<dd class="parameter type">!Map.&lt;string, (string|!Array.&lt;string&gt;)&gt;</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
							</dl>

							<dl id="libjass.renderers.RendererSettings.preciseOutlines" class="property">
								<dt class="name"><a href="#libjass.renderers.RendererSettings.preciseOutlines">preciseOutlines</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									<p>Subtitle outlines will be rendered in full detail. When false, the value of blur is used to draw less outlines for better performance and (hopefully) similar output.</p><p>Defaults to false.</p>
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = rendererSettings.preciseOutlines;</code></pre></fieldset></dd>
								<dd class="return type">boolean</dd>
								<dt class="setter">Setter</dt>
								<dd class="description">
									<p>Subtitle outlines will be rendered in full detail. When false, the value of blur is used to draw less outlines for better performance and (hopefully) similar output.</p><p>Defaults to false.</p>
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>rendererSettings.preciseOutlines = value;</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">value</dt>
										<dd class="parameter type">boolean</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
							</dl>

							<dl id="libjass.renderers.RendererSettings.preRenderTime" class="property">
								<dt class="name"><a href="#libjass.renderers.RendererSettings.preRenderTime">preRenderTime</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									<p>Subtitles will be pre-rendered for this amount of time (seconds).</p><p>Defaults to 5.</p>
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = rendererSettings.preRenderTime;</code></pre></fieldset></dd>
								<dd class="return type">number</dd>
								<dt class="setter">Setter</dt>
								<dd class="description">
									<p>Subtitles will be pre-rendered for this amount of time (seconds).</p><p>Defaults to 5.</p>
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>rendererSettings.preRenderTime = value;</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">value</dt>
										<dd class="parameter type">number</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
							</dl>

							<dl id="libjass.renderers.RendererSettings.useAttachedFonts" class="property">
								<dt class="name"><a href="#libjass.renderers.RendererSettings.useAttachedFonts">useAttachedFonts</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									<p>If true, attached TTF fonts in the ASS script will be used. The font is loaded as a data: URI. Requires ES6 typed arrays (ArrayBuffer, DataView, Uint8Array, etc).</p><p>The font is naively parsed to extract the strings that will be used as the font family. Do not use this option with untrusted fonts or scripts.</p><p>Defaults to false.</p>
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = rendererSettings.useAttachedFonts;</code></pre></fieldset></dd>
								<dd class="return type">boolean</dd>
								<dt class="setter">Setter</dt>
								<dd class="description">
									<p>If true, attached TTF fonts in the ASS script will be used. The font is loaded as a data: URI. Requires ES6 typed arrays (ArrayBuffer, DataView, Uint8Array, etc).</p><p>The font is naively parsed to extract the strings that will be used as the font family. Do not use this option with untrusted fonts or scripts.</p><p>Defaults to false.</p>
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>rendererSettings.useAttachedFonts = value;</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">value</dt>
										<dd class="parameter type">boolean</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
							</dl>

							<dl id="libjass.renderers.RendererSettings.from" class="function static">
								<dt class="name"><a href="#libjass.renderers.RendererSettings.from">from</a></dt>
								<dd class="description">
									Converts an arbitrary object into a <a href="#libjass.renderers.RendererSettings">libjass.renderers.RendererSettings</a> object.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = libjass.renderers.RendererSettings.from(object);</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">object</dt>
										<dd class="parameter type">*</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
								<dt>Returns</dt>
								<dd class="return type">!libjass.renderers.RendererSettings</dd>
								<dd class="return description"></dd>
							</dl>

							<dl id="libjass.renderers.RendererSettings.makeFontMapFromStyleElement" class="function static">
								<dt class="name"><a href="#libjass.renderers.RendererSettings.makeFontMapFromStyleElement">makeFontMapFromStyleElement</a></dt>
								<dd class="description">
									<p>A convenience method to create a font map from a &lt;style&gt; or &lt;link&gt; element that contains @font-face rules. There should be one @font-face rule for each font name, mapping to a font file URL.</p><p>For example:</p><p><pre class="code"><code>@font-face {
    font-family: "Helvetica";
    src: url("/fonts/helvetica.ttf"), local("Arial");
}
</code></pre></p>
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = libjass.renderers.RendererSettings.makeFontMapFromStyleElement(linkStyle);</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">linkStyle</dt>
										<dd class="parameter type">!LinkStyle</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
								<dt>Returns</dt>
								<dd class="return type">!Map.&lt;string, string&gt;</dd>
								<dd class="return description"></dd>
							</dl>

						</dd>
					</dl>
					<dl id="libjass.renderers.VideoClock" class="clazz">
						<dt class="name">class <a href="#libjass.renderers.VideoClock">VideoClock</a> implements <a href="#libjass.renderers.Clock">Clock</a></dt>
						<dd class="description">
							An implementation of libjass.renderers.Clock that generates <a href="#libjass.renderers.ClockEvent">libjass.renderers.ClockEvent</a>s according to the state of a &lt;video&gt; element.
						</dd>
						<dd class="usage"><fieldset><legend /><pre><code>var videoClock = new libjass.renderers.VideoClock(video);</code></pre></fieldset></dd>
						<dd class="parameters">
							<dl>
								<dt class="parameter name">video</dt>
								<dd class="parameter type">!HTMLVideoElement</dd>
								<dd class="parameter description"></dd>
							</dl>
						</dd>
						<dd class="members">
							<dl id="libjass.renderers.VideoClock.currentTime" class="property">
								<dt class="name"><a href="#libjass.renderers.VideoClock.currentTime">currentTime</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = videoClock.currentTime;</code></pre></fieldset></dd>
								<dd class="return type">number</dd>
							</dl>

							<dl id="libjass.renderers.VideoClock.enabled" class="property">
								<dt class="name"><a href="#libjass.renderers.VideoClock.enabled">enabled</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = videoClock.enabled;</code></pre></fieldset></dd>
								<dd class="return type">boolean</dd>
							</dl>

							<dl id="libjass.renderers.VideoClock.paused" class="property">
								<dt class="name"><a href="#libjass.renderers.VideoClock.paused">paused</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = videoClock.paused;</code></pre></fieldset></dd>
								<dd class="return type">boolean</dd>
							</dl>

							<dl id="libjass.renderers.VideoClock.rate" class="property">
								<dt class="name"><a href="#libjass.renderers.VideoClock.rate">rate</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									Gets the rate of the clock - how fast the clock ticks compared to real time.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = videoClock.rate;</code></pre></fieldset></dd>
								<dd class="return type">number</dd>
							</dl>

							<dl id="libjass.renderers.VideoClock.addEventListener" class="function">
								<dt class="name"><a href="#libjass.renderers.VideoClock.addEventListener">addEventListener</a></dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>videoClock.addEventListener(type, listener);</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">type</dt>
										<dd class="parameter type">number</dd>
										<dd class="parameter description"></dd>
										<dt class="parameter name">listener</dt>
										<dd class="parameter type">!Function</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
							</dl>

							<dl id="libjass.renderers.VideoClock.disable" class="function">
								<dt class="name"><a href="#libjass.renderers.VideoClock.disable">disable</a></dt>
								<dd class="description">
									Disable the clock.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = videoClock.disable();</code></pre></fieldset></dd>
								<dt>Returns</dt>
								<dd class="return type">boolean</dd>
								<dd class="return description">True if the clock is now disabled, false if it was already disabled.</dd>
							</dl>

							<dl id="libjass.renderers.VideoClock.enable" class="function">
								<dt class="name"><a href="#libjass.renderers.VideoClock.enable">enable</a></dt>
								<dd class="description">
									Enable the clock.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = videoClock.enable();</code></pre></fieldset></dd>
								<dt>Returns</dt>
								<dd class="return type">boolean</dd>
								<dd class="return description">True if the clock is now enabled, false if it was already enabled.</dd>
							</dl>

							<dl id="libjass.renderers.VideoClock.setEnabled" class="function">
								<dt class="name"><a href="#libjass.renderers.VideoClock.setEnabled">setEnabled</a></dt>
								<dd class="description">
									Enable or disable the clock.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = videoClock.setEnabled(enabled);</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">enabled</dt>
										<dd class="parameter type">boolean</dd>
										<dd class="parameter description">If true, the clock is enabled, otherwise it's disabled.</dd>
									</dl>
								</dd>
								<dt>Returns</dt>
								<dd class="return type">boolean</dd>
								<dd class="return description">True if the clock is now in the given state, false if it was already in that state.</dd>
							</dl>

							<dl id="libjass.renderers.VideoClock.toggle" class="function">
								<dt class="name"><a href="#libjass.renderers.VideoClock.toggle">toggle</a></dt>
								<dd class="description">
									Toggle the clock.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>videoClock.toggle();</code></pre></fieldset></dd>
							</dl>

						</dd>
					</dl>
					<dl id="libjass.renderers.WebRenderer" class="clazz">
						<dt class="name">class <a href="#libjass.renderers.WebRenderer">WebRenderer</a> extends <a href="#libjass.renderers.NullRenderer">NullRenderer</a> implements <a href="#libjass.renderers.EventSource">EventSource.&lt;string&gt;</a></dt>
						<dd class="description">
							<p>A renderer implementation that draws subtitles to the given &lt;div&gt;</p><p>After the renderer fires its ready event, <a href="#libjass.renderers.WebRenderer.resize">libjass.renderers.WebRenderer.resize</a> must be called to initialize its size before starting the clock.</p>
						</dd>
						<dd class="usage"><fieldset><legend /><pre><code>var webRenderer = new libjass.renderers.WebRenderer(ass, clock, libjassSubsWrapper, settings);</code></pre></fieldset></dd>
						<dd class="parameters">
							<dl>
								<dt class="parameter name">ass</dt>
								<dd class="parameter type">!libjass.ASS</dd>
								<dd class="parameter description"></dd>
								<dt class="parameter name">clock</dt>
								<dd class="parameter type">!libjass.renderers.Clock</dd>
								<dd class="parameter description"></dd>
								<dt class="parameter name">libjassSubsWrapper</dt>
								<dd class="parameter type">!HTMLDivElement</dd>
								<dd class="parameter description">Subtitles will be rendered to this &lt;div&gt;</dd>
								<dt class="parameter name">settings</dt>
								<dd class="parameter type">!libjass.renderers.RendererSettings</dd>
								<dd class="parameter description"></dd>
							</dl>
						</dd>
						<dd class="members">
							<dl id="libjass.renderers.WebRenderer._dispatchEvent" class="property">
								<dt class="name"><a href="#libjass.renderers.WebRenderer._dispatchEvent">_dispatchEvent</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = webRenderer._dispatchEvent;</code></pre></fieldset></dd>
								<dd class="return type">function(number, Array.&lt;*&gt;)</dd>
								<dt class="setter">Setter</dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>webRenderer._dispatchEvent = value;</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">value</dt>
										<dd class="parameter type">function(number, Array.&lt;*&gt;)</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
							</dl>

							<dl id="libjass.renderers.WebRenderer._eventListeners" class="property">
								<dt class="name"><a href="#libjass.renderers.WebRenderer._eventListeners">_eventListeners</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = webRenderer._eventListeners;</code></pre></fieldset></dd>
								<dd class="return type">!Map.&lt;T, !Array.&lt;Function&gt;&gt;</dd>
								<dt class="setter">Setter</dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>webRenderer._eventListeners = value;</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">value</dt>
										<dd class="parameter type">!Map.&lt;T, !Array.&lt;Function&gt;&gt;</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
							</dl>

							<dl id="libjass.renderers.WebRenderer.addEventListener" class="property">
								<dt class="name"><a href="#libjass.renderers.WebRenderer.addEventListener">addEventListener</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = webRenderer.addEventListener;</code></pre></fieldset></dd>
								<dd class="return type">function(number, !Function)</dd>
								<dt class="setter">Setter</dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>webRenderer.addEventListener = value;</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">value</dt>
										<dd class="parameter type">function(number, !Function)</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
							</dl>

							<dl id="libjass.renderers.WebRenderer.libjassSubsWrapper" class="property">
								<dt class="name"><a href="#libjass.renderers.WebRenderer.libjassSubsWrapper">libjassSubsWrapper</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = webRenderer.libjassSubsWrapper;</code></pre></fieldset></dd>
								<dd class="return type">!HTMLDivElement</dd>
							</dl>

							<dl id="libjass.renderers.WebRenderer.draw" class="function">
								<dt class="name"><a href="#libjass.renderers.WebRenderer.draw">draw</a></dt>
								<dd class="description">
									Returns the subtitle div for display. The <a href="#libjass.renderers.Clock.currentTime">libjass.renderers.Clock.currentTime</a> of the <a href="#libjass.renderers.NullRenderer.clock">libjass.renderers.NullRenderer.clock</a> is used to shift the
animations appropriately, so that at the time the div is inserted into the DOM and the animations begin, they are in sync with the clock time.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>webRenderer.draw(dialogue);</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">dialogue</dt>
										<dd class="parameter type">!libjass.Dialogue</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
							</dl>

							<dl id="libjass.renderers.WebRenderer.preRender" class="function">
								<dt class="name"><a href="#libjass.renderers.WebRenderer.preRender">preRender</a></dt>
								<dd class="description">
									The magic happens here. The subtitle div is rendered and stored. Call <a href="#libjass.renderers.WebRenderer.draw">libjass.renderers.WebRenderer.draw</a> to get a clone of the div to display.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = webRenderer.preRender(dialogue);</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">dialogue</dt>
										<dd class="parameter type">!libjass.Dialogue</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
								<dt>Returns</dt>
								<dd class="return type">PreRenderedSub</dd>
								<dd class="return description"></dd>
							</dl>

							<dl id="libjass.renderers.WebRenderer.resize" class="function">
								<dt class="name"><a href="#libjass.renderers.WebRenderer.resize">resize</a></dt>
								<dd class="description">
									Resize the subtitles to the given new dimensions.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>webRenderer.resize(width, height, left, top);</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">width</dt>
										<dd class="parameter type">number</dd>
										<dd class="parameter description"></dd>
										<dt class="parameter name">height</dt>
										<dd class="parameter type">number</dd>
										<dd class="parameter description"></dd>
										<dt class="parameter name">left</dt>
										<dd class="parameter type">number=0</dd>
										<dd class="parameter description"></dd>
										<dt class="parameter name">top</dt>
										<dd class="parameter type">number=0</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
							</dl>

							<dl id="libjass.renderers.WebRenderer._onClockPause" class="function protected">
								<dt class="name"><a href="#libjass.renderers.WebRenderer._onClockPause">_onClockPause</a></dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>webRenderer._onClockPause();</code></pre></fieldset></dd>
							</dl>

							<dl id="libjass.renderers.WebRenderer._onClockPlay" class="function protected">
								<dt class="name"><a href="#libjass.renderers.WebRenderer._onClockPlay">_onClockPlay</a></dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>webRenderer._onClockPlay();</code></pre></fieldset></dd>
							</dl>

							<dl id="libjass.renderers.WebRenderer._onClockRateChange" class="function protected">
								<dt class="name"><a href="#libjass.renderers.WebRenderer._onClockRateChange">_onClockRateChange</a></dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>webRenderer._onClockRateChange();</code></pre></fieldset></dd>
							</dl>

							<dl id="libjass.renderers.WebRenderer._onClockStop" class="function protected">
								<dt class="name"><a href="#libjass.renderers.WebRenderer._onClockStop">_onClockStop</a></dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>webRenderer._onClockStop();</code></pre></fieldset></dd>
							</dl>

							<dl id="libjass.renderers.WebRenderer._onClockTick" class="function protected">
								<dt class="name"><a href="#libjass.renderers.WebRenderer._onClockTick">_onClockTick</a></dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>webRenderer._onClockTick();</code></pre></fieldset></dd>
							</dl>

							<dl id="libjass.renderers.WebRenderer._ready" class="function protected">
								<dt class="name"><a href="#libjass.renderers.WebRenderer._ready">_ready</a></dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>webRenderer._ready();</code></pre></fieldset></dd>
							</dl>

							<dl id="libjass.renderers.WebRenderer._calculateFontMetricsAfterFetch" class="function private">
								<dt class="name"><a href="#libjass.renderers.WebRenderer._calculateFontMetricsAfterFetch">_calculateFontMetricsAfterFetch</a></dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = webRenderer._calculateFontMetricsAfterFetch(fontFamily, fontFetchPromise);</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">fontFamily</dt>
										<dd class="parameter type">string</dd>
										<dd class="parameter description"></dd>
										<dt class="parameter name">fontFetchPromise</dt>
										<dd class="parameter type">!Promise.&lt;*&gt;</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
								<dt>Returns</dt>
								<dd class="return type">!Promise.&lt;[number, number]&gt;</dd>
								<dd class="return description"></dd>
							</dl>

							<dl id="libjass.renderers.WebRenderer._removeAllSubs" class="function private">
								<dt class="name"><a href="#libjass.renderers.WebRenderer._removeAllSubs">_removeAllSubs</a></dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>webRenderer._removeAllSubs();</code></pre></fieldset></dd>
							</dl>

							<dl id="libjass.renderers.WebRenderer._removeSub" class="function private">
								<dt class="name"><a href="#libjass.renderers.WebRenderer._removeSub">_removeSub</a></dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>webRenderer._removeSub(sub);</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">sub</dt>
										<dd class="parameter type">!HTMLDivElement</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
							</dl>

						</dd>
					</dl>
				</section>
				<section>
					<h2>Enums</h2>
					<dl id="libjass.renderers.ClockEvent" class="enum">
						<dt class="name">enum <a href="#libjass.renderers.ClockEvent">ClockEvent</a></dt>
						<dd class="description">
							The type of clock event.
						</dd>
						<dd class="members">
							<dl id="libjass.renderers.ClockEvent.Play" class="member">
								<dt class="name"><a href="#libjass.renderers.ClockEvent.Play">Play</a> = 0</dt>
								<dd class="description">
									
								</dd>
							</dl>
							<dl id="libjass.renderers.ClockEvent.Tick" class="member">
								<dt class="name"><a href="#libjass.renderers.ClockEvent.Tick">Tick</a> = 1</dt>
								<dd class="description">
									
								</dd>
							</dl>
							<dl id="libjass.renderers.ClockEvent.Pause" class="member">
								<dt class="name"><a href="#libjass.renderers.ClockEvent.Pause">Pause</a> = 2</dt>
								<dd class="description">
									
								</dd>
							</dl>
							<dl id="libjass.renderers.ClockEvent.Stop" class="member">
								<dt class="name"><a href="#libjass.renderers.ClockEvent.Stop">Stop</a> = 3</dt>
								<dd class="description">
									
								</dd>
							</dl>
							<dl id="libjass.renderers.ClockEvent.RateChange" class="member">
								<dt class="name"><a href="#libjass.renderers.ClockEvent.RateChange">RateChange</a> = 4</dt>
								<dd class="description">
									
								</dd>
							</dl>
						</dd>
					</dl>
				</section>
			</section>
			<section class="namespace">
				<h1 id="libjass.webworker">Namespace libjass.webworker</h1>
				<section>
					<h2>Properties</h2>
					<dl id="libjass.webworker.supported" class="property">
						<dt class="name"><a href="#libjass.webworker.supported">supported</a></dt>
						<dt class="getter">Getter</dt>
						<dd class="description">
							Indicates whether web workers are supposed in this environment or not.
						</dd>
						<dd class="usage"><fieldset><legend /><pre><code>var result = libjass.webworker.supported;</code></pre></fieldset></dd>
						<dd class="return type">boolean</dd>
						<dt class="setter">Setter</dt>
						<dd class="description">
							Indicates whether web workers are supposed in this environment or not.
						</dd>
						<dd class="usage"><fieldset><legend /><pre><code>libjass.webworker.supported = value;</code></pre></fieldset></dd>
						<dd class="parameters">
							<dl>
								<dt class="parameter name">value</dt>
								<dd class="parameter type">boolean</dd>
								<dd class="parameter description"></dd>
							</dl>
						</dd>
					</dl>
				</section>
				<section>
					<h2>Free functions</h2>
					<dl id="libjass.webworker.createWorker" class="function">
						<dt class="name"><a href="#libjass.webworker.createWorker">createWorker</a></dt>
						<dd class="description">
							Create a new web worker and returns a <a href="#libjass.webworker.WorkerChannel">libjass.webworker.WorkerChannel</a> to it.
						</dd>
						<dd class="usage"><fieldset><legend /><pre><code>var result = libjass.webworker.createWorker(scriptPath);</code></pre></fieldset></dd>
						<dd class="parameters">
							<dl>
								<dt class="parameter name">scriptPath</dt>
								<dd class="parameter type">string=</dd>
								<dd class="parameter description">The path to libjass.js to be loaded in the web worker. If the browser supports document.currentScript, the parameter is optional and, if not provided,
the path will be determined from the src attribute of the &lt;script&gt; element that contains the currently running copy of libjass.js</dd>
							</dl>
						</dd>
						<dt>Returns</dt>
						<dd class="return type">!libjass.webworker.WorkerChannel</dd>
						<dd class="return description">A communication channel to the new web worker.</dd>
					</dl>
				</section>
				<section>
					<h2>Interfaces</h2>
					<dl id="libjass.webworker.WorkerChannel" class="interface">
						<dt class="name">interface <a href="#libjass.webworker.WorkerChannel">WorkerChannel</a></dt>
						<dd class="description">
							Represents a communication channel between the host and the web worker. An instance of this class is created by calling <a href="#libjass.webworker.createWorker">libjass.webworker.createWorker</a>
						</dd>
						<dd class="members">
							<dl id="libjass.webworker.WorkerChannel.request" class="function">
								<dt class="name"><a href="#libjass.webworker.WorkerChannel.request">request</a></dt>
								<dd class="description">
									Sends a request to the other side to execute the given command with the given parameters.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = workerChannel.request(command, parameters);</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">command</dt>
										<dd class="parameter type">number</dd>
										<dd class="parameter description"></dd>
										<dt class="parameter name">parameters</dt>
										<dd class="parameter type">*</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
								<dt>Returns</dt>
								<dd class="return type">!Promise.&lt;*&gt;</dd>
								<dd class="return description">A promise that will get resolved when the other side computes the result</dd>
							</dl>

						</dd>
					</dl>
				</section>
				<section>
					<h2>Enums</h2>
					<dl id="libjass.webworker.WorkerCommands" class="enum">
						<dt class="name">enum <a href="#libjass.webworker.WorkerCommands">WorkerCommands</a></dt>
						<dd class="description">
							The commands that can be sent to or from a web worker.
						</dd>
						<dd class="members">
							<dl id="libjass.webworker.WorkerCommands.Response" class="member">
								<dt class="name"><a href="#libjass.webworker.WorkerCommands.Response">Response</a> = 0</dt>
								<dd class="description">
									
								</dd>
							</dl>
							<dl id="libjass.webworker.WorkerCommands.Parse" class="member">
								<dt class="name"><a href="#libjass.webworker.WorkerCommands.Parse">Parse</a> = 1</dt>
								<dd class="description">
									
								</dd>
							</dl>
							<dl id="libjass.webworker.WorkerCommands.Ping" class="member">
								<dt class="name"><a href="#libjass.webworker.WorkerCommands.Ping">Ping</a> = 2</dt>
								<dd class="description">
									
								</dd>
							</dl>
						</dd>
					</dl>
				</section>
			</section>
			<section class="module">
				<h1 id="./parser/misc">Module ./parser/misc</h1>
				<section>
					<h2>Free functions</h2>
					<dl id="./parser/misc.parseLineIntoProperty" class="function">
						<dt class="name"><a href="#./parser/misc.parseLineIntoProperty">parseLineIntoProperty</a></dt>
						<dd class="description">
							Parses a line into a <a href="#./types/misc.Property">./types/misc.Property</a>.
						</dd>
						<dd class="usage"><fieldset><legend /><pre><code>var result = parseLineIntoProperty(line);</code></pre></fieldset></dd>
						<dd class="parameters">
							<dl>
								<dt class="parameter name">line</dt>
								<dd class="parameter type">string</dd>
								<dd class="parameter description"></dd>
							</dl>
						</dd>
						<dt>Returns</dt>
						<dd class="return type">!Property</dd>
						<dd class="return description"></dd>
					</dl>
					<dl id="./parser/misc.parseLineIntoTypedTemplate" class="function">
						<dt class="name"><a href="#./parser/misc.parseLineIntoTypedTemplate">parseLineIntoTypedTemplate</a></dt>
						<dd class="description">
							Parses a line into a <a href="#./types/misc.TypedTemplate">./types/misc.TypedTemplate</a> according to the given format specifier.
						</dd>
						<dd class="usage"><fieldset><legend /><pre><code>var result = parseLineIntoTypedTemplate(line, formatSpecifier);</code></pre></fieldset></dd>
						<dd class="parameters">
							<dl>
								<dt class="parameter name">line</dt>
								<dd class="parameter type">string</dd>
								<dd class="parameter description"></dd>
								<dt class="parameter name">formatSpecifier</dt>
								<dd class="parameter type">!Array.&lt;string&gt;</dd>
								<dd class="parameter description"></dd>
							</dl>
						</dd>
						<dt>Returns</dt>
						<dd class="return type">!TypedTemplate</dd>
						<dd class="return description"></dd>
					</dl>
				</section>
			</section>
			<section class="module">
				<h1 id="./parser/parse">Module ./parser/parse</h1>
				<section>
					<h2>Free functions</h2>
					<dl id="./parser/parse.makeTagParserFunction" class="function private">
						<dt class="name"><a href="#./parser/parse.makeTagParserFunction">makeTagParserFunction</a></dt>
						<dd class="description">
							Constructs a simple tag parser function and sets it on the prototype of the <a href="#./parser/parse.ParserRun">./parser/parse.ParserRun</a> class.
						</dd>
						<dd class="usage"><fieldset><legend /><pre><code>makeTagParserFunction(tagName, tagConstructor, valueParser, required);</code></pre></fieldset></dd>
						<dd class="parameters">
							<dl>
								<dt class="parameter name">tagName</dt>
								<dd class="parameter type">string</dd>
								<dd class="parameter description">The name of the tag to generate the parser function for</dd>
								<dt class="parameter name">tagConstructor</dt>
								<dd class="parameter type">function(new: !libjass.parts.Part, *)</dd>
								<dd class="parameter description">The type of tag to be returned by the generated parser function</dd>
								<dt class="parameter name">valueParser</dt>
								<dd class="parameter type">function(!ParseNode): ParseNode</dd>
								<dd class="parameter description">The parser for the tag's value</dd>
								<dt class="parameter name">required</dt>
								<dd class="parameter type">boolean</dd>
								<dd class="parameter description">Whether the tag's value is required or optional</dd>
							</dl>
						</dd>
					</dl>
				</section>
				<section>
					<h2>Classes</h2>
					<dl id="./parser/parse.ParseNode" class="clazz private">
						<dt class="name">class <a href="#./parser/parse.ParseNode">ParseNode</a></dt>
						<dd class="description">
							This class represents a single parse node. It has a start and end position, and an optional value object.
						</dd>
						<dd class="usage"><fieldset><legend /><pre><code>var parseNode = new ParseNode(parent, value);</code></pre></fieldset></dd>
						<dd class="parameters">
							<dl>
								<dt class="parameter name">parent</dt>
								<dd class="parameter type">ParseNode</dd>
								<dd class="parameter description">The parent of this parse node.</dd>
								<dt class="parameter name">value</dt>
								<dd class="parameter type">*=null</dd>
								<dd class="parameter description">If provided, it is assigned as the value of the node.</dd>
							</dl>
						</dd>
						<dd class="members">
							<dl id="./parser/parse.ParseNode.children" class="property">
								<dt class="name"><a href="#./parser/parse.ParseNode.children">children</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = parseNode.children;</code></pre></fieldset></dd>
								<dd class="return type">!Array.&lt;!ParseNode&gt;</dd>
							</dl>

							<dl id="./parser/parse.ParseNode.end" class="property">
								<dt class="name"><a href="#./parser/parse.ParseNode.end">end</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									The end position of this parse node.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = parseNode.end;</code></pre></fieldset></dd>
								<dd class="return type">number</dd>
							</dl>

							<dl id="./parser/parse.ParseNode.parent" class="property">
								<dt class="name"><a href="#./parser/parse.ParseNode.parent">parent</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = parseNode.parent;</code></pre></fieldset></dd>
								<dd class="return type">ParseNode</dd>
							</dl>

							<dl id="./parser/parse.ParseNode.start" class="property">
								<dt class="name"><a href="#./parser/parse.ParseNode.start">start</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									The start position of this parse node.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = parseNode.start;</code></pre></fieldset></dd>
								<dd class="return type">number</dd>
							</dl>

							<dl id="./parser/parse.ParseNode.value" class="property">
								<dt class="name"><a href="#./parser/parse.ParseNode.value">value</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									An optional object associated with this parse node.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = parseNode.value;</code></pre></fieldset></dd>
								<dd class="return type">*</dd>
								<dt class="setter">Setter</dt>
								<dd class="description">
									<p>An optional object associated with this parse node.</p><p>If the value is a string, then the end property is updated to be the length of the string.</p>
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>parseNode.value = value;</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">value</dt>
										<dd class="parameter type">*</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
							</dl>

							<dl id="./parser/parse.ParseNode.pop" class="function">
								<dt class="name"><a href="#./parser/parse.ParseNode.pop">pop</a></dt>
								<dd class="description">
									Removes the last child of this node and updates the end position to be end position of the new last child.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>parseNode.pop();</code></pre></fieldset></dd>
							</dl>

							<dl id="./parser/parse.ParseNode._setEnd" class="function private">
								<dt class="name"><a href="#./parser/parse.ParseNode._setEnd">_setEnd</a></dt>
								<dd class="description">
									Updates the end property of this node and its parent recursively to the root node.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>parseNode._setEnd(newEnd);</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">newEnd</dt>
										<dd class="parameter type">number</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
							</dl>

						</dd>
					</dl>
					<dl id="./parser/parse.ParserRun" class="clazz private">
						<dt class="name">class <a href="#./parser/parse.ParserRun">ParserRun</a></dt>
						<dd class="description">
							This class represents a single run of the parser.
						</dd>
						<dd class="usage"><fieldset><legend /><pre><code>var parserRun = new ParserRun(input, rule);</code></pre></fieldset></dd>
						<dd class="parameters">
							<dl>
								<dt class="parameter name">input</dt>
								<dd class="parameter type">string</dd>
								<dd class="parameter description"></dd>
								<dt class="parameter name">rule</dt>
								<dd class="parameter type">string</dd>
								<dd class="parameter description"></dd>
							</dl>
						</dd>
						<dd class="members">
							<dl id="./parser/parse.ParserRun.result" class="property">
								<dt class="name"><a href="#./parser/parse.ParserRun.result">result</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = parserRun.result;</code></pre></fieldset></dd>
								<dd class="return type">ParseNode</dd>
							</dl>

							<dl id="./parser/parse.ParserRun.parse_alpha" class="function">
								<dt class="name"><a href="#./parser/parse.ParserRun.parse_alpha">parse_alpha</a></dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = parserRun.parse_alpha(parent);</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">parent</dt>
										<dd class="parameter type">!ParseNode</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
								<dt>Returns</dt>
								<dd class="return type">ParseNode</dd>
								<dd class="return description"></dd>
							</dl>

							<dl id="./parser/parse.ParserRun.parse_color" class="function">
								<dt class="name"><a href="#./parser/parse.ParserRun.parse_color">parse_color</a></dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = parserRun.parse_color(parent);</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">parent</dt>
										<dd class="parameter type">!ParseNode</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
								<dt>Returns</dt>
								<dd class="return type">ParseNode</dd>
								<dd class="return description"></dd>
							</dl>

							<dl id="./parser/parse.ParserRun.parse_colorWithAlpha" class="function">
								<dt class="name"><a href="#./parser/parse.ParserRun.parse_colorWithAlpha">parse_colorWithAlpha</a></dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = parserRun.parse_colorWithAlpha(parent);</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">parent</dt>
										<dd class="parameter type">!ParseNode</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
								<dt>Returns</dt>
								<dd class="return type">ParseNode</dd>
								<dd class="return description"></dd>
							</dl>

							<dl id="./parser/parse.ParserRun.parse_comment" class="function">
								<dt class="name"><a href="#./parser/parse.ParserRun.parse_comment">parse_comment</a></dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = parserRun.parse_comment(parent);</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">parent</dt>
										<dd class="parameter type">!ParseNode</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
								<dt>Returns</dt>
								<dd class="return type">ParseNode</dd>
								<dd class="return description"></dd>
							</dl>

							<dl id="./parser/parse.ParserRun.parse_decimal" class="function">
								<dt class="name"><a href="#./parser/parse.ParserRun.parse_decimal">parse_decimal</a></dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = parserRun.parse_decimal(parent);</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">parent</dt>
										<dd class="parameter type">!ParseNode</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
								<dt>Returns</dt>
								<dd class="return type">ParseNode</dd>
								<dd class="return description"></dd>
							</dl>

							<dl id="./parser/parse.ParserRun.parse_decimalInt32" class="function">
								<dt class="name"><a href="#./parser/parse.ParserRun.parse_decimalInt32">parse_decimalInt32</a></dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = parserRun.parse_decimalInt32(parent);</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">parent</dt>
										<dd class="parameter type">!ParseNode</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
								<dt>Returns</dt>
								<dd class="return type">ParseNode</dd>
								<dd class="return description"></dd>
							</dl>

							<dl id="./parser/parse.ParserRun.parse_decimalOrHexInt32" class="function">
								<dt class="name"><a href="#./parser/parse.ParserRun.parse_decimalOrHexInt32">parse_decimalOrHexInt32</a></dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = parserRun.parse_decimalOrHexInt32(parent);</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">parent</dt>
										<dd class="parameter type">!ParseNode</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
								<dt>Returns</dt>
								<dd class="return type">ParseNode</dd>
								<dd class="return description"></dd>
							</dl>

							<dl id="./parser/parse.ParserRun.parse_dialogueParts" class="function">
								<dt class="name"><a href="#./parser/parse.ParserRun.parse_dialogueParts">parse_dialogueParts</a></dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = parserRun.parse_dialogueParts(parent);</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">parent</dt>
										<dd class="parameter type">!ParseNode</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
								<dt>Returns</dt>
								<dd class="return type">ParseNode</dd>
								<dd class="return description"></dd>
							</dl>

							<dl id="./parser/parse.ParserRun.parse_drawingInstructions" class="function">
								<dt class="name"><a href="#./parser/parse.ParserRun.parse_drawingInstructions">parse_drawingInstructions</a></dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = parserRun.parse_drawingInstructions(parent);</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">parent</dt>
										<dd class="parameter type">!ParseNode</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
								<dt>Returns</dt>
								<dd class="return type">ParseNode</dd>
								<dd class="return description"></dd>
							</dl>

							<dl id="./parser/parse.ParserRun.parse_enableDisable" class="function">
								<dt class="name"><a href="#./parser/parse.ParserRun.parse_enableDisable">parse_enableDisable</a></dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = parserRun.parse_enableDisable(parent);</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">parent</dt>
										<dd class="parameter type">!ParseNode</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
								<dt>Returns</dt>
								<dd class="return type">ParseNode</dd>
								<dd class="return description"></dd>
							</dl>

							<dl id="./parser/parse.ParserRun.parse_enclosedTags" class="function">
								<dt class="name"><a href="#./parser/parse.ParserRun.parse_enclosedTags">parse_enclosedTags</a></dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = parserRun.parse_enclosedTags(parent);</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">parent</dt>
										<dd class="parameter type">!ParseNode</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
								<dt>Returns</dt>
								<dd class="return type">ParseNode</dd>
								<dd class="return description"></dd>
							</dl>

							<dl id="./parser/parse.ParserRun.parse_hardspace" class="function">
								<dt class="name"><a href="#./parser/parse.ParserRun.parse_hardspace">parse_hardspace</a></dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = parserRun.parse_hardspace(parent);</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">parent</dt>
										<dd class="parameter type">!ParseNode</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
								<dt>Returns</dt>
								<dd class="return type">ParseNode</dd>
								<dd class="return description"></dd>
							</dl>

							<dl id="./parser/parse.ParserRun.parse_hexInt32" class="function">
								<dt class="name"><a href="#./parser/parse.ParserRun.parse_hexInt32">parse_hexInt32</a></dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = parserRun.parse_hexInt32(parent);</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">parent</dt>
										<dd class="parameter type">!ParseNode</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
								<dt>Returns</dt>
								<dd class="return type">ParseNode</dd>
								<dd class="return description"></dd>
							</dl>

							<dl id="./parser/parse.ParserRun.parse_newline" class="function">
								<dt class="name"><a href="#./parser/parse.ParserRun.parse_newline">parse_newline</a></dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = parserRun.parse_newline(parent);</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">parent</dt>
										<dd class="parameter type">!ParseNode</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
								<dt>Returns</dt>
								<dd class="return type">ParseNode</dd>
								<dd class="return description"></dd>
							</dl>

							<dl id="./parser/parse.ParserRun.parse_tag_1a" class="function">
								<dt class="name"><a href="#./parser/parse.ParserRun.parse_tag_1a">parse_tag_1a</a></dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = parserRun.parse_tag_1a(parent);</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">parent</dt>
										<dd class="parameter type">!ParseNode</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
								<dt>Returns</dt>
								<dd class="return type">ParseNode</dd>
								<dd class="return description"></dd>
							</dl>

							<dl id="./parser/parse.ParserRun.parse_tag_1c" class="function">
								<dt class="name"><a href="#./parser/parse.ParserRun.parse_tag_1c">parse_tag_1c</a></dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = parserRun.parse_tag_1c(parent);</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">parent</dt>
										<dd class="parameter type">!ParseNode</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
								<dt>Returns</dt>
								<dd class="return type">ParseNode</dd>
								<dd class="return description"></dd>
							</dl>

							<dl id="./parser/parse.ParserRun.parse_tag_2a" class="function">
								<dt class="name"><a href="#./parser/parse.ParserRun.parse_tag_2a">parse_tag_2a</a></dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = parserRun.parse_tag_2a(parent);</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">parent</dt>
										<dd class="parameter type">!ParseNode</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
								<dt>Returns</dt>
								<dd class="return type">ParseNode</dd>
								<dd class="return description"></dd>
							</dl>

							<dl id="./parser/parse.ParserRun.parse_tag_2c" class="function">
								<dt class="name"><a href="#./parser/parse.ParserRun.parse_tag_2c">parse_tag_2c</a></dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = parserRun.parse_tag_2c(parent);</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">parent</dt>
										<dd class="parameter type">!ParseNode</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
								<dt>Returns</dt>
								<dd class="return type">ParseNode</dd>
								<dd class="return description"></dd>
							</dl>

							<dl id="./parser/parse.ParserRun.parse_tag_3a" class="function">
								<dt class="name"><a href="#./parser/parse.ParserRun.parse_tag_3a">parse_tag_3a</a></dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = parserRun.parse_tag_3a(parent);</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">parent</dt>
										<dd class="parameter type">!ParseNode</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
								<dt>Returns</dt>
								<dd class="return type">ParseNode</dd>
								<dd class="return description"></dd>
							</dl>

							<dl id="./parser/parse.ParserRun.parse_tag_3c" class="function">
								<dt class="name"><a href="#./parser/parse.ParserRun.parse_tag_3c">parse_tag_3c</a></dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = parserRun.parse_tag_3c(parent);</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">parent</dt>
										<dd class="parameter type">!ParseNode</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
								<dt>Returns</dt>
								<dd class="return type">ParseNode</dd>
								<dd class="return description"></dd>
							</dl>

							<dl id="./parser/parse.ParserRun.parse_tag_4a" class="function">
								<dt class="name"><a href="#./parser/parse.ParserRun.parse_tag_4a">parse_tag_4a</a></dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = parserRun.parse_tag_4a(parent);</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">parent</dt>
										<dd class="parameter type">!ParseNode</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
								<dt>Returns</dt>
								<dd class="return type">ParseNode</dd>
								<dd class="return description"></dd>
							</dl>

							<dl id="./parser/parse.ParserRun.parse_tag_4c" class="function">
								<dt class="name"><a href="#./parser/parse.ParserRun.parse_tag_4c">parse_tag_4c</a></dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = parserRun.parse_tag_4c(parent);</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">parent</dt>
										<dd class="parameter type">!ParseNode</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
								<dt>Returns</dt>
								<dd class="return type">ParseNode</dd>
								<dd class="return description"></dd>
							</dl>

							<dl id="./parser/parse.ParserRun.parse_tag_a" class="function">
								<dt class="name"><a href="#./parser/parse.ParserRun.parse_tag_a">parse_tag_a</a></dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = parserRun.parse_tag_a(parent);</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">parent</dt>
										<dd class="parameter type">!ParseNode</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
								<dt>Returns</dt>
								<dd class="return type">ParseNode</dd>
								<dd class="return description"></dd>
							</dl>

							<dl id="./parser/parse.ParserRun.parse_tag_alpha" class="function">
								<dt class="name"><a href="#./parser/parse.ParserRun.parse_tag_alpha">parse_tag_alpha</a></dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = parserRun.parse_tag_alpha(parent);</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">parent</dt>
										<dd class="parameter type">!ParseNode</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
								<dt>Returns</dt>
								<dd class="return type">ParseNode</dd>
								<dd class="return description"></dd>
							</dl>

							<dl id="./parser/parse.ParserRun.parse_tag_an" class="function">
								<dt class="name"><a href="#./parser/parse.ParserRun.parse_tag_an">parse_tag_an</a></dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = parserRun.parse_tag_an(parent);</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">parent</dt>
										<dd class="parameter type">!ParseNode</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
								<dt>Returns</dt>
								<dd class="return type">ParseNode</dd>
								<dd class="return description"></dd>
							</dl>

							<dl id="./parser/parse.ParserRun.parse_tag_b" class="function">
								<dt class="name"><a href="#./parser/parse.ParserRun.parse_tag_b">parse_tag_b</a></dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = parserRun.parse_tag_b(parent);</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">parent</dt>
										<dd class="parameter type">!ParseNode</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
								<dt>Returns</dt>
								<dd class="return type">ParseNode</dd>
								<dd class="return description"></dd>
							</dl>

							<dl id="./parser/parse.ParserRun.parse_tag_be" class="function">
								<dt class="name"><a href="#./parser/parse.ParserRun.parse_tag_be">parse_tag_be</a></dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = parserRun.parse_tag_be(parent);</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">parent</dt>
										<dd class="parameter type">!ParseNode</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
								<dt>Returns</dt>
								<dd class="return type">ParseNode</dd>
								<dd class="return description"></dd>
							</dl>

							<dl id="./parser/parse.ParserRun.parse_tag_blur" class="function">
								<dt class="name"><a href="#./parser/parse.ParserRun.parse_tag_blur">parse_tag_blur</a></dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = parserRun.parse_tag_blur(parent);</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">parent</dt>
										<dd class="parameter type">!ParseNode</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
								<dt>Returns</dt>
								<dd class="return type">ParseNode</dd>
								<dd class="return description"></dd>
							</dl>

							<dl id="./parser/parse.ParserRun.parse_tag_bord" class="function">
								<dt class="name"><a href="#./parser/parse.ParserRun.parse_tag_bord">parse_tag_bord</a></dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = parserRun.parse_tag_bord(parent);</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">parent</dt>
										<dd class="parameter type">!ParseNode</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
								<dt>Returns</dt>
								<dd class="return type">ParseNode</dd>
								<dd class="return description"></dd>
							</dl>

							<dl id="./parser/parse.ParserRun.parse_tag_c" class="function">
								<dt class="name"><a href="#./parser/parse.ParserRun.parse_tag_c">parse_tag_c</a></dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = parserRun.parse_tag_c(parent);</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">parent</dt>
										<dd class="parameter type">!ParseNode</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
								<dt>Returns</dt>
								<dd class="return type">ParseNode</dd>
								<dd class="return description"></dd>
							</dl>

							<dl id="./parser/parse.ParserRun.parse_tag_clip" class="function">
								<dt class="name"><a href="#./parser/parse.ParserRun.parse_tag_clip">parse_tag_clip</a></dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = parserRun.parse_tag_clip(parent);</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">parent</dt>
										<dd class="parameter type">!ParseNode</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
								<dt>Returns</dt>
								<dd class="return type">ParseNode</dd>
								<dd class="return description"></dd>
							</dl>

							<dl id="./parser/parse.ParserRun.parse_tag_fad" class="function">
								<dt class="name"><a href="#./parser/parse.ParserRun.parse_tag_fad">parse_tag_fad</a></dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = parserRun.parse_tag_fad(parent);</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">parent</dt>
										<dd class="parameter type">!ParseNode</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
								<dt>Returns</dt>
								<dd class="return type">ParseNode</dd>
								<dd class="return description"></dd>
							</dl>

							<dl id="./parser/parse.ParserRun.parse_tag_fade" class="function">
								<dt class="name"><a href="#./parser/parse.ParserRun.parse_tag_fade">parse_tag_fade</a></dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = parserRun.parse_tag_fade(parent);</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">parent</dt>
										<dd class="parameter type">!ParseNode</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
								<dt>Returns</dt>
								<dd class="return type">ParseNode</dd>
								<dd class="return description"></dd>
							</dl>

							<dl id="./parser/parse.ParserRun.parse_tag_fax" class="function">
								<dt class="name"><a href="#./parser/parse.ParserRun.parse_tag_fax">parse_tag_fax</a></dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = parserRun.parse_tag_fax(parent);</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">parent</dt>
										<dd class="parameter type">!ParseNode</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
								<dt>Returns</dt>
								<dd class="return type">ParseNode</dd>
								<dd class="return description"></dd>
							</dl>

							<dl id="./parser/parse.ParserRun.parse_tag_fay" class="function">
								<dt class="name"><a href="#./parser/parse.ParserRun.parse_tag_fay">parse_tag_fay</a></dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = parserRun.parse_tag_fay(parent);</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">parent</dt>
										<dd class="parameter type">!ParseNode</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
								<dt>Returns</dt>
								<dd class="return type">ParseNode</dd>
								<dd class="return description"></dd>
							</dl>

							<dl id="./parser/parse.ParserRun.parse_tag_fn" class="function">
								<dt class="name"><a href="#./parser/parse.ParserRun.parse_tag_fn">parse_tag_fn</a></dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = parserRun.parse_tag_fn(parent);</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">parent</dt>
										<dd class="parameter type">!ParseNode</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
								<dt>Returns</dt>
								<dd class="return type">ParseNode</dd>
								<dd class="return description"></dd>
							</dl>

							<dl id="./parser/parse.ParserRun.parse_tag_fr" class="function">
								<dt class="name"><a href="#./parser/parse.ParserRun.parse_tag_fr">parse_tag_fr</a></dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = parserRun.parse_tag_fr(parent);</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">parent</dt>
										<dd class="parameter type">!ParseNode</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
								<dt>Returns</dt>
								<dd class="return type">ParseNode</dd>
								<dd class="return description"></dd>
							</dl>

							<dl id="./parser/parse.ParserRun.parse_tag_frx" class="function">
								<dt class="name"><a href="#./parser/parse.ParserRun.parse_tag_frx">parse_tag_frx</a></dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = parserRun.parse_tag_frx(parent);</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">parent</dt>
										<dd class="parameter type">!ParseNode</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
								<dt>Returns</dt>
								<dd class="return type">ParseNode</dd>
								<dd class="return description"></dd>
							</dl>

							<dl id="./parser/parse.ParserRun.parse_tag_fry" class="function">
								<dt class="name"><a href="#./parser/parse.ParserRun.parse_tag_fry">parse_tag_fry</a></dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = parserRun.parse_tag_fry(parent);</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">parent</dt>
										<dd class="parameter type">!ParseNode</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
								<dt>Returns</dt>
								<dd class="return type">ParseNode</dd>
								<dd class="return description"></dd>
							</dl>

							<dl id="./parser/parse.ParserRun.parse_tag_frz" class="function">
								<dt class="name"><a href="#./parser/parse.ParserRun.parse_tag_frz">parse_tag_frz</a></dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = parserRun.parse_tag_frz(parent);</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">parent</dt>
										<dd class="parameter type">!ParseNode</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
								<dt>Returns</dt>
								<dd class="return type">ParseNode</dd>
								<dd class="return description"></dd>
							</dl>

							<dl id="./parser/parse.ParserRun.parse_tag_fs" class="function">
								<dt class="name"><a href="#./parser/parse.ParserRun.parse_tag_fs">parse_tag_fs</a></dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = parserRun.parse_tag_fs(parent);</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">parent</dt>
										<dd class="parameter type">!ParseNode</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
								<dt>Returns</dt>
								<dd class="return type">ParseNode</dd>
								<dd class="return description"></dd>
							</dl>

							<dl id="./parser/parse.ParserRun.parse_tag_fscx" class="function">
								<dt class="name"><a href="#./parser/parse.ParserRun.parse_tag_fscx">parse_tag_fscx</a></dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = parserRun.parse_tag_fscx(parent);</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">parent</dt>
										<dd class="parameter type">!ParseNode</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
								<dt>Returns</dt>
								<dd class="return type">ParseNode</dd>
								<dd class="return description"></dd>
							</dl>

							<dl id="./parser/parse.ParserRun.parse_tag_fscy" class="function">
								<dt class="name"><a href="#./parser/parse.ParserRun.parse_tag_fscy">parse_tag_fscy</a></dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = parserRun.parse_tag_fscy(parent);</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">parent</dt>
										<dd class="parameter type">!ParseNode</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
								<dt>Returns</dt>
								<dd class="return type">ParseNode</dd>
								<dd class="return description"></dd>
							</dl>

							<dl id="./parser/parse.ParserRun.parse_tag_fsminus" class="function">
								<dt class="name"><a href="#./parser/parse.ParserRun.parse_tag_fsminus">parse_tag_fsminus</a></dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = parserRun.parse_tag_fsminus(parent);</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">parent</dt>
										<dd class="parameter type">!ParseNode</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
								<dt>Returns</dt>
								<dd class="return type">ParseNode</dd>
								<dd class="return description"></dd>
							</dl>

							<dl id="./parser/parse.ParserRun.parse_tag_fsp" class="function">
								<dt class="name"><a href="#./parser/parse.ParserRun.parse_tag_fsp">parse_tag_fsp</a></dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = parserRun.parse_tag_fsp(parent);</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">parent</dt>
										<dd class="parameter type">!ParseNode</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
								<dt>Returns</dt>
								<dd class="return type">ParseNode</dd>
								<dd class="return description"></dd>
							</dl>

							<dl id="./parser/parse.ParserRun.parse_tag_fsplus" class="function">
								<dt class="name"><a href="#./parser/parse.ParserRun.parse_tag_fsplus">parse_tag_fsplus</a></dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = parserRun.parse_tag_fsplus(parent);</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">parent</dt>
										<dd class="parameter type">!ParseNode</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
								<dt>Returns</dt>
								<dd class="return type">ParseNode</dd>
								<dd class="return description"></dd>
							</dl>

							<dl id="./parser/parse.ParserRun.parse_tag_i" class="function">
								<dt class="name"><a href="#./parser/parse.ParserRun.parse_tag_i">parse_tag_i</a></dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = parserRun.parse_tag_i(parent);</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">parent</dt>
										<dd class="parameter type">!ParseNode</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
								<dt>Returns</dt>
								<dd class="return type">ParseNode</dd>
								<dd class="return description"></dd>
							</dl>

							<dl id="./parser/parse.ParserRun.parse_tag_iclip" class="function">
								<dt class="name"><a href="#./parser/parse.ParserRun.parse_tag_iclip">parse_tag_iclip</a></dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = parserRun.parse_tag_iclip(parent);</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">parent</dt>
										<dd class="parameter type">!ParseNode</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
								<dt>Returns</dt>
								<dd class="return type">ParseNode</dd>
								<dd class="return description"></dd>
							</dl>

							<dl id="./parser/parse.ParserRun.parse_tag_k" class="function">
								<dt class="name"><a href="#./parser/parse.ParserRun.parse_tag_k">parse_tag_k</a></dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = parserRun.parse_tag_k(parent);</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">parent</dt>
										<dd class="parameter type">!ParseNode</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
								<dt>Returns</dt>
								<dd class="return type">ParseNode</dd>
								<dd class="return description"></dd>
							</dl>

							<dl id="./parser/parse.ParserRun.parse_tag_K" class="function">
								<dt class="name"><a href="#./parser/parse.ParserRun.parse_tag_K">parse_tag_K</a></dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = parserRun.parse_tag_K(parent);</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">parent</dt>
										<dd class="parameter type">!ParseNode</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
								<dt>Returns</dt>
								<dd class="return type">ParseNode</dd>
								<dd class="return description"></dd>
							</dl>

							<dl id="./parser/parse.ParserRun.parse_tag_kf" class="function">
								<dt class="name"><a href="#./parser/parse.ParserRun.parse_tag_kf">parse_tag_kf</a></dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = parserRun.parse_tag_kf(parent);</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">parent</dt>
										<dd class="parameter type">!ParseNode</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
								<dt>Returns</dt>
								<dd class="return type">ParseNode</dd>
								<dd class="return description"></dd>
							</dl>

							<dl id="./parser/parse.ParserRun.parse_tag_ko" class="function">
								<dt class="name"><a href="#./parser/parse.ParserRun.parse_tag_ko">parse_tag_ko</a></dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = parserRun.parse_tag_ko(parent);</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">parent</dt>
										<dd class="parameter type">!ParseNode</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
								<dt>Returns</dt>
								<dd class="return type">ParseNode</dd>
								<dd class="return description"></dd>
							</dl>

							<dl id="./parser/parse.ParserRun.parse_tag_move" class="function">
								<dt class="name"><a href="#./parser/parse.ParserRun.parse_tag_move">parse_tag_move</a></dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = parserRun.parse_tag_move(parent);</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">parent</dt>
										<dd class="parameter type">!ParseNode</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
								<dt>Returns</dt>
								<dd class="return type">ParseNode</dd>
								<dd class="return description"></dd>
							</dl>

							<dl id="./parser/parse.ParserRun.parse_tag_org" class="function">
								<dt class="name"><a href="#./parser/parse.ParserRun.parse_tag_org">parse_tag_org</a></dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = parserRun.parse_tag_org(parent);</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">parent</dt>
										<dd class="parameter type">!ParseNode</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
								<dt>Returns</dt>
								<dd class="return type">ParseNode</dd>
								<dd class="return description"></dd>
							</dl>

							<dl id="./parser/parse.ParserRun.parse_tag_p" class="function">
								<dt class="name"><a href="#./parser/parse.ParserRun.parse_tag_p">parse_tag_p</a></dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = parserRun.parse_tag_p(parent);</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">parent</dt>
										<dd class="parameter type">!ParseNode</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
								<dt>Returns</dt>
								<dd class="return type">ParseNode</dd>
								<dd class="return description"></dd>
							</dl>

							<dl id="./parser/parse.ParserRun.parse_tag_pbo" class="function">
								<dt class="name"><a href="#./parser/parse.ParserRun.parse_tag_pbo">parse_tag_pbo</a></dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = parserRun.parse_tag_pbo(parent);</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">parent</dt>
										<dd class="parameter type">!ParseNode</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
								<dt>Returns</dt>
								<dd class="return type">ParseNode</dd>
								<dd class="return description"></dd>
							</dl>

							<dl id="./parser/parse.ParserRun.parse_tag_pos" class="function">
								<dt class="name"><a href="#./parser/parse.ParserRun.parse_tag_pos">parse_tag_pos</a></dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = parserRun.parse_tag_pos(parent);</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">parent</dt>
										<dd class="parameter type">!ParseNode</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
								<dt>Returns</dt>
								<dd class="return type">ParseNode</dd>
								<dd class="return description"></dd>
							</dl>

							<dl id="./parser/parse.ParserRun.parse_tag_q" class="function">
								<dt class="name"><a href="#./parser/parse.ParserRun.parse_tag_q">parse_tag_q</a></dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = parserRun.parse_tag_q(parent);</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">parent</dt>
										<dd class="parameter type">!ParseNode</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
								<dt>Returns</dt>
								<dd class="return type">ParseNode</dd>
								<dd class="return description"></dd>
							</dl>

							<dl id="./parser/parse.ParserRun.parse_tag_r" class="function">
								<dt class="name"><a href="#./parser/parse.ParserRun.parse_tag_r">parse_tag_r</a></dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = parserRun.parse_tag_r(parent);</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">parent</dt>
										<dd class="parameter type">!ParseNode</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
								<dt>Returns</dt>
								<dd class="return type">ParseNode</dd>
								<dd class="return description"></dd>
							</dl>

							<dl id="./parser/parse.ParserRun.parse_tag_s" class="function">
								<dt class="name"><a href="#./parser/parse.ParserRun.parse_tag_s">parse_tag_s</a></dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = parserRun.parse_tag_s(parent);</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">parent</dt>
										<dd class="parameter type">!ParseNode</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
								<dt>Returns</dt>
								<dd class="return type">ParseNode</dd>
								<dd class="return description"></dd>
							</dl>

							<dl id="./parser/parse.ParserRun.parse_tag_shad" class="function">
								<dt class="name"><a href="#./parser/parse.ParserRun.parse_tag_shad">parse_tag_shad</a></dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = parserRun.parse_tag_shad(parent);</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">parent</dt>
										<dd class="parameter type">!ParseNode</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
								<dt>Returns</dt>
								<dd class="return type">ParseNode</dd>
								<dd class="return description"></dd>
							</dl>

							<dl id="./parser/parse.ParserRun.parse_tag_t" class="function">
								<dt class="name"><a href="#./parser/parse.ParserRun.parse_tag_t">parse_tag_t</a></dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = parserRun.parse_tag_t(parent);</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">parent</dt>
										<dd class="parameter type">!ParseNode</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
								<dt>Returns</dt>
								<dd class="return type">ParseNode</dd>
								<dd class="return description"></dd>
							</dl>

							<dl id="./parser/parse.ParserRun.parse_tag_u" class="function">
								<dt class="name"><a href="#./parser/parse.ParserRun.parse_tag_u">parse_tag_u</a></dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = parserRun.parse_tag_u(parent);</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">parent</dt>
										<dd class="parameter type">!ParseNode</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
								<dt>Returns</dt>
								<dd class="return type">ParseNode</dd>
								<dd class="return description"></dd>
							</dl>

							<dl id="./parser/parse.ParserRun.parse_tag_xbord" class="function">
								<dt class="name"><a href="#./parser/parse.ParserRun.parse_tag_xbord">parse_tag_xbord</a></dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = parserRun.parse_tag_xbord(parent);</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">parent</dt>
										<dd class="parameter type">!ParseNode</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
								<dt>Returns</dt>
								<dd class="return type">ParseNode</dd>
								<dd class="return description"></dd>
							</dl>

							<dl id="./parser/parse.ParserRun.parse_tag_xshad" class="function">
								<dt class="name"><a href="#./parser/parse.ParserRun.parse_tag_xshad">parse_tag_xshad</a></dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = parserRun.parse_tag_xshad(parent);</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">parent</dt>
										<dd class="parameter type">!ParseNode</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
								<dt>Returns</dt>
								<dd class="return type">ParseNode</dd>
								<dd class="return description"></dd>
							</dl>

							<dl id="./parser/parse.ParserRun.parse_tag_ybord" class="function">
								<dt class="name"><a href="#./parser/parse.ParserRun.parse_tag_ybord">parse_tag_ybord</a></dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = parserRun.parse_tag_ybord(parent);</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">parent</dt>
										<dd class="parameter type">!ParseNode</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
								<dt>Returns</dt>
								<dd class="return type">ParseNode</dd>
								<dd class="return description"></dd>
							</dl>

							<dl id="./parser/parse.ParserRun.parse_tag_yshad" class="function">
								<dt class="name"><a href="#./parser/parse.ParserRun.parse_tag_yshad">parse_tag_yshad</a></dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = parserRun.parse_tag_yshad(parent);</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">parent</dt>
										<dd class="parameter type">!ParseNode</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
								<dt>Returns</dt>
								<dd class="return type">ParseNode</dd>
								<dd class="return description"></dd>
							</dl>

							<dl id="./parser/parse.ParserRun.parse_text" class="function">
								<dt class="name"><a href="#./parser/parse.ParserRun.parse_text">parse_text</a></dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = parserRun.parse_text(parent);</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">parent</dt>
										<dd class="parameter type">!ParseNode</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
								<dt>Returns</dt>
								<dd class="return type">ParseNode</dd>
								<dd class="return description"></dd>
							</dl>

							<dl id="./parser/parse.ParserRun.parse_unsignedDecimal" class="function">
								<dt class="name"><a href="#./parser/parse.ParserRun.parse_unsignedDecimal">parse_unsignedDecimal</a></dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = parserRun.parse_unsignedDecimal(parent);</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">parent</dt>
										<dd class="parameter type">!ParseNode</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
								<dt>Returns</dt>
								<dd class="return type">ParseNode</dd>
								<dd class="return description"></dd>
							</dl>

							<dl id="./parser/parse.ParserRun.read" class="function">
								<dt class="name"><a href="#./parser/parse.ParserRun.read">read</a></dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = parserRun.read(parent, next);</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">parent</dt>
										<dd class="parameter type">!ParseNode</dd>
										<dd class="parameter description"></dd>
										<dt class="parameter name">next</dt>
										<dd class="parameter type">string</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
								<dt>Returns</dt>
								<dd class="return type">ParseNode</dd>
								<dd class="return description"></dd>
							</dl>

							<dl id="./parser/parse.ParserRun._haveMore" class="function private">
								<dt class="name"><a href="#./parser/parse.ParserRun._haveMore">_haveMore</a></dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = parserRun._haveMore();</code></pre></fieldset></dd>
								<dt>Returns</dt>
								<dd class="return type">boolean</dd>
								<dd class="return description"></dd>
							</dl>

							<dl id="./parser/parse.ParserRun._parse_tag_clip_or_iclip" class="function private">
								<dt class="name"><a href="#./parser/parse.ParserRun._parse_tag_clip_or_iclip">_parse_tag_clip_or_iclip</a></dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = parserRun._parse_tag_clip_or_iclip(tagName, parent);</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">tagName</dt>
										<dd class="parameter type">string</dd>
										<dd class="parameter description">One of "clip" and "iclip"</dd>
										<dt class="parameter name">parent</dt>
										<dd class="parameter type">!ParseNode</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
								<dt>Returns</dt>
								<dd class="return type">ParseNode</dd>
								<dd class="return description"></dd>
							</dl>

							<dl id="./parser/parse.ParserRun._peek" class="function private">
								<dt class="name"><a href="#./parser/parse.ParserRun._peek">_peek</a></dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = parserRun._peek(count);</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">count</dt>
										<dd class="parameter type">number=1</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
								<dt>Returns</dt>
								<dd class="return type">string</dd>
								<dd class="return description"></dd>
							</dl>

						</dd>
					</dl>
				</section>
			</section>
			<section class="module">
				<h1 id="./parser/stream-parsers">Module ./parser/stream-parsers</h1>
				<section>
					<h2>Free functions</h2>
					<dl id="./parser/stream-parsers.uuencodedToBase64" class="function private">
						<dt class="name"><a href="#./parser/stream-parsers.uuencodedToBase64">uuencodedToBase64</a></dt>
						<dd class="description">
							Converts a uuencoded string to a base64 string.
						</dd>
						<dd class="usage"><fieldset><legend /><pre><code>var result = uuencodedToBase64(str);</code></pre></fieldset></dd>
						<dd class="parameters">
							<dl>
								<dt class="parameter name">str</dt>
								<dd class="parameter type">string</dd>
								<dd class="parameter description"></dd>
							</dl>
						</dd>
						<dt>Returns</dt>
						<dd class="return type">string</dd>
						<dd class="return description"></dd>
					</dl>
				</section>
				<section>
					<h2>Enums</h2>
					<dl id="./parser/stream-parsers.Section" class="enum private">
						<dt class="name">enum <a href="#./parser/stream-parsers.Section">Section</a></dt>
						<dd class="description">
							
						</dd>
						<dd class="members">
							<dl id="./parser/stream-parsers.Section.ScriptInfo" class="member">
								<dt class="name"><a href="#./parser/stream-parsers.Section.ScriptInfo">ScriptInfo</a> = 0</dt>
								<dd class="description">
									
								</dd>
							</dl>
							<dl id="./parser/stream-parsers.Section.Styles" class="member">
								<dt class="name"><a href="#./parser/stream-parsers.Section.Styles">Styles</a> = 1</dt>
								<dd class="description">
									
								</dd>
							</dl>
							<dl id="./parser/stream-parsers.Section.Events" class="member">
								<dt class="name"><a href="#./parser/stream-parsers.Section.Events">Events</a> = 2</dt>
								<dd class="description">
									
								</dd>
							</dl>
							<dl id="./parser/stream-parsers.Section.Fonts" class="member">
								<dt class="name"><a href="#./parser/stream-parsers.Section.Fonts">Fonts</a> = 3</dt>
								<dd class="description">
									
								</dd>
							</dl>
							<dl id="./parser/stream-parsers.Section.Graphics" class="member">
								<dt class="name"><a href="#./parser/stream-parsers.Section.Graphics">Graphics</a> = 4</dt>
								<dd class="description">
									
								</dd>
							</dl>
							<dl id="./parser/stream-parsers.Section.Other" class="member">
								<dt class="name"><a href="#./parser/stream-parsers.Section.Other">Other</a> = 5</dt>
								<dd class="description">
									
								</dd>
							</dl>
							<dl id="./parser/stream-parsers.Section.EOF" class="member">
								<dt class="name"><a href="#./parser/stream-parsers.Section.EOF">EOF</a> = 6</dt>
								<dd class="description">
									
								</dd>
							</dl>
						</dd>
					</dl>
				</section>
			</section>
			<section class="module">
				<h1 id="./parser/streams">Module ./parser/streams</h1>
				<section>
					<h2>Interfaces</h2>
					<dl id="./parser/streams.ReadableStream" class="interface">
						<dt class="name">interface <a href="#./parser/streams.ReadableStream">ReadableStream</a></dt>
						<dd class="description">
							
						</dd>
						<dd class="members">
							<dl id="./parser/streams.ReadableStream.getReader" class="function">
								<dt class="name"><a href="#./parser/streams.ReadableStream.getReader">getReader</a></dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = readableStream.getReader();</code></pre></fieldset></dd>
								<dt>Returns</dt>
								<dd class="return type">!ReadableStreamReader</dd>
								<dd class="return description"></dd>
							</dl>

						</dd>
					</dl>
					<dl id="./parser/streams.TextDecoder" class="interface">
						<dt class="name">interface <a href="#./parser/streams.TextDecoder">TextDecoder</a></dt>
						<dd class="description">
							
						</dd>
						<dd class="members">
							<dl id="./parser/streams.TextDecoder.decode" class="function">
								<dt class="name"><a href="#./parser/streams.TextDecoder.decode">decode</a></dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = textDecoder.decode(input, options);</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">input</dt>
										<dd class="parameter type">!ArrayBuffer|!ArrayBufferView</dd>
										<dd class="parameter description"></dd>
										<dt class="parameter name">options</dt>
										<dd class="parameter type">{ stream: boolean }</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
								<dt>Returns</dt>
								<dd class="return type">string</dd>
								<dd class="return description"></dd>
							</dl>

						</dd>
					</dl>
					<dl id="./parser/streams.TextDecoderConstructor" class="interface">
						<dt class="name">interface <a href="#./parser/streams.TextDecoderConstructor">TextDecoderConstructor</a></dt>
						<dd class="description">
							
						</dd>
						<dd class="members">
							<dl id="./parser/streams.TextDecoderConstructor.prototype" class="property">
								<dt class="name"><a href="#./parser/streams.TextDecoderConstructor.prototype">prototype</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = textDecoderConstructor.prototype;</code></pre></fieldset></dd>
								<dd class="return type">!TextDecoder</dd>
								<dt class="setter">Setter</dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>textDecoderConstructor.prototype = value;</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">value</dt>
										<dd class="parameter type">!TextDecoder</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
							</dl>

						</dd>
					</dl>
					<dl id="./parser/streams.ReadableStreamReader" class="interface private">
						<dt class="name">interface <a href="#./parser/streams.ReadableStreamReader">ReadableStreamReader</a></dt>
						<dd class="description">
							
						</dd>
						<dd class="members">
							<dl id="./parser/streams.ReadableStreamReader.read" class="function">
								<dt class="name"><a href="#./parser/streams.ReadableStreamReader.read">read</a></dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = readableStreamReader.read();</code></pre></fieldset></dd>
								<dt>Returns</dt>
								<dd class="return type">!Promise.&lt;{ value?: Uint8Array, done: boolean }&gt;</dd>
								<dd class="return description"></dd>
							</dl>

						</dd>
					</dl>
				</section>
			</section>
			<section class="module">
				<h1 id="./parser/ttf">Module ./parser/ttf</h1>
				<section>
					<h2>Free functions</h2>
					<dl id="./parser/ttf.getTtfNames" class="function">
						<dt class="name"><a href="#./parser/ttf.getTtfNames">getTtfNames</a></dt>
						<dd class="description">
							Gets all the font names from the given font attachment.
						</dd>
						<dd class="usage"><fieldset><legend /><pre><code>var result = getTtfNames(attachment);</code></pre></fieldset></dd>
						<dd class="parameters">
							<dl>
								<dt class="parameter name">attachment</dt>
								<dd class="parameter type">!libjass.Attachment</dd>
								<dd class="parameter description"></dd>
							</dl>
						</dd>
						<dt>Returns</dt>
						<dd class="return type">!libjass.Set.&lt;string&gt;</dd>
						<dd class="return description"></dd>
					</dl>
					<dl id="./parser/ttf.field" class="function private">
						<dt class="name"><a href="#./parser/ttf.field">field.&lt;T&gt;</a></dt>
						<dd class="description">
							
						</dd>
						<dd class="usage"><fieldset><legend /><pre><code>var result = field(type);</code></pre></fieldset></dd>
						<dd class="parameters">
							<dl>
								<dt class="parameter name">type</dt>
								<dd class="parameter type">number</dd>
								<dd class="parameter description"></dd>
							</dl>
						</dd>
						<dt>Returns</dt>
						<dd class="return type">function(T, string)</dd>
						<dd class="return description"></dd>
					</dl>
					<dl id="./parser/ttf.struct" class="function private">
						<dt class="name"><a href="#./parser/ttf.struct">struct.&lt;T&gt;</a></dt>
						<dd class="description">
							
						</dd>
						<dd class="usage"><fieldset><legend /><pre><code>var result = struct(clazz);</code></pre></fieldset></dd>
						<dd class="parameters">
							<dl>
								<dt class="parameter name">clazz</dt>
								<dd class="parameter type">!function(new(): T)</dd>
								<dd class="parameter description"></dd>
							</dl>
						</dd>
						<dt>Returns</dt>
						<dd class="return type">!function(new(): T)</dd>
						<dd class="return description"></dd>
					</dl>
				</section>
				<section>
					<h2>Classes</h2>
					<dl id="./parser/ttf.NameRecord" class="clazz private">
						<dt class="name">class <a href="#./parser/ttf.NameRecord">NameRecord</a></dt>
						<dd class="description">
							
						</dd>
						<dd class="usage"><fieldset><legend /><pre><code>var nameRecord = new NameRecord();</code></pre></fieldset></dd>
						<dd class="members">
							<dl id="./parser/ttf.NameRecord.encodingId" class="property">
								<dt class="name"><a href="#./parser/ttf.NameRecord.encodingId">encodingId</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = nameRecord.encodingId;</code></pre></fieldset></dd>
								<dd class="return type">number</dd>
								<dt class="setter">Setter</dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>nameRecord.encodingId = value;</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">value</dt>
										<dd class="parameter type">number</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
							</dl>

							<dl id="./parser/ttf.NameRecord.languageId" class="property">
								<dt class="name"><a href="#./parser/ttf.NameRecord.languageId">languageId</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = nameRecord.languageId;</code></pre></fieldset></dd>
								<dd class="return type">number</dd>
								<dt class="setter">Setter</dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>nameRecord.languageId = value;</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">value</dt>
										<dd class="parameter type">number</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
							</dl>

							<dl id="./parser/ttf.NameRecord.length" class="property">
								<dt class="name"><a href="#./parser/ttf.NameRecord.length">length</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = nameRecord.length;</code></pre></fieldset></dd>
								<dd class="return type">number</dd>
								<dt class="setter">Setter</dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>nameRecord.length = value;</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">value</dt>
										<dd class="parameter type">number</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
							</dl>

							<dl id="./parser/ttf.NameRecord.nameId" class="property">
								<dt class="name"><a href="#./parser/ttf.NameRecord.nameId">nameId</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = nameRecord.nameId;</code></pre></fieldset></dd>
								<dd class="return type">number</dd>
								<dt class="setter">Setter</dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>nameRecord.nameId = value;</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">value</dt>
										<dd class="parameter type">number</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
							</dl>

							<dl id="./parser/ttf.NameRecord.offset" class="property">
								<dt class="name"><a href="#./parser/ttf.NameRecord.offset">offset</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = nameRecord.offset;</code></pre></fieldset></dd>
								<dd class="return type">number</dd>
								<dt class="setter">Setter</dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>nameRecord.offset = value;</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">value</dt>
										<dd class="parameter type">number</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
							</dl>

							<dl id="./parser/ttf.NameRecord.platformId" class="property">
								<dt class="name"><a href="#./parser/ttf.NameRecord.platformId">platformId</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = nameRecord.platformId;</code></pre></fieldset></dd>
								<dd class="return type">number</dd>
								<dt class="setter">Setter</dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>nameRecord.platformId = value;</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">value</dt>
										<dd class="parameter type">number</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
							</dl>

							<dl id="./parser/ttf.NameRecord.read" class="property">
								<dt class="name"><a href="#./parser/ttf.NameRecord.read">read</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = nameRecord.read;</code></pre></fieldset></dd>
								<dd class="return type">function(!{ dataView: DataView, position: number }): NameRecord</dd>
								<dt class="setter">Setter</dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>nameRecord.read = value;</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">value</dt>
										<dd class="parameter type">function(!{ dataView: DataView, position: number }): NameRecord</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
							</dl>

						</dd>
					</dl>
					<dl id="./parser/ttf.NameTableHeader" class="clazz private">
						<dt class="name">class <a href="#./parser/ttf.NameTableHeader">NameTableHeader</a></dt>
						<dd class="description">
							
						</dd>
						<dd class="usage"><fieldset><legend /><pre><code>var nameTableHeader = new NameTableHeader();</code></pre></fieldset></dd>
						<dd class="members">
							<dl id="./parser/ttf.NameTableHeader.count" class="property">
								<dt class="name"><a href="#./parser/ttf.NameTableHeader.count">count</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = nameTableHeader.count;</code></pre></fieldset></dd>
								<dd class="return type">number</dd>
								<dt class="setter">Setter</dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>nameTableHeader.count = value;</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">value</dt>
										<dd class="parameter type">number</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
							</dl>

							<dl id="./parser/ttf.NameTableHeader.formatSelector" class="property">
								<dt class="name"><a href="#./parser/ttf.NameTableHeader.formatSelector">formatSelector</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = nameTableHeader.formatSelector;</code></pre></fieldset></dd>
								<dd class="return type">number</dd>
								<dt class="setter">Setter</dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>nameTableHeader.formatSelector = value;</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">value</dt>
										<dd class="parameter type">number</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
							</dl>

							<dl id="./parser/ttf.NameTableHeader.read" class="property">
								<dt class="name"><a href="#./parser/ttf.NameTableHeader.read">read</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = nameTableHeader.read;</code></pre></fieldset></dd>
								<dd class="return type">function(!{ dataView: DataView, position: number }): NameTableHeader</dd>
								<dt class="setter">Setter</dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>nameTableHeader.read = value;</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">value</dt>
										<dd class="parameter type">function(!{ dataView: DataView, position: number }): NameTableHeader</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
							</dl>

							<dl id="./parser/ttf.NameTableHeader.stringOffset" class="property">
								<dt class="name"><a href="#./parser/ttf.NameTableHeader.stringOffset">stringOffset</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = nameTableHeader.stringOffset;</code></pre></fieldset></dd>
								<dd class="return type">number</dd>
								<dt class="setter">Setter</dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>nameTableHeader.stringOffset = value;</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">value</dt>
										<dd class="parameter type">number</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
							</dl>

						</dd>
					</dl>
					<dl id="./parser/ttf.OffsetTable" class="clazz private">
						<dt class="name">class <a href="#./parser/ttf.OffsetTable">OffsetTable</a></dt>
						<dd class="description">
							
						</dd>
						<dd class="usage"><fieldset><legend /><pre><code>var offsetTable = new OffsetTable();</code></pre></fieldset></dd>
						<dd class="members">
							<dl id="./parser/ttf.OffsetTable.entrySelector" class="property">
								<dt class="name"><a href="#./parser/ttf.OffsetTable.entrySelector">entrySelector</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = offsetTable.entrySelector;</code></pre></fieldset></dd>
								<dd class="return type">number</dd>
								<dt class="setter">Setter</dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>offsetTable.entrySelector = value;</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">value</dt>
										<dd class="parameter type">number</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
							</dl>

							<dl id="./parser/ttf.OffsetTable.majorVersion" class="property">
								<dt class="name"><a href="#./parser/ttf.OffsetTable.majorVersion">majorVersion</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = offsetTable.majorVersion;</code></pre></fieldset></dd>
								<dd class="return type">number</dd>
								<dt class="setter">Setter</dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>offsetTable.majorVersion = value;</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">value</dt>
										<dd class="parameter type">number</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
							</dl>

							<dl id="./parser/ttf.OffsetTable.minorVersion" class="property">
								<dt class="name"><a href="#./parser/ttf.OffsetTable.minorVersion">minorVersion</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = offsetTable.minorVersion;</code></pre></fieldset></dd>
								<dd class="return type">number</dd>
								<dt class="setter">Setter</dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>offsetTable.minorVersion = value;</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">value</dt>
										<dd class="parameter type">number</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
							</dl>

							<dl id="./parser/ttf.OffsetTable.numTables" class="property">
								<dt class="name"><a href="#./parser/ttf.OffsetTable.numTables">numTables</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = offsetTable.numTables;</code></pre></fieldset></dd>
								<dd class="return type">number</dd>
								<dt class="setter">Setter</dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>offsetTable.numTables = value;</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">value</dt>
										<dd class="parameter type">number</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
							</dl>

							<dl id="./parser/ttf.OffsetTable.rangeShift" class="property">
								<dt class="name"><a href="#./parser/ttf.OffsetTable.rangeShift">rangeShift</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = offsetTable.rangeShift;</code></pre></fieldset></dd>
								<dd class="return type">number</dd>
								<dt class="setter">Setter</dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>offsetTable.rangeShift = value;</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">value</dt>
										<dd class="parameter type">number</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
							</dl>

							<dl id="./parser/ttf.OffsetTable.read" class="property">
								<dt class="name"><a href="#./parser/ttf.OffsetTable.read">read</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = offsetTable.read;</code></pre></fieldset></dd>
								<dd class="return type">function(!{ dataView: DataView, position: number }): OffsetTable</dd>
								<dt class="setter">Setter</dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>offsetTable.read = value;</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">value</dt>
										<dd class="parameter type">function(!{ dataView: DataView, position: number }): OffsetTable</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
							</dl>

							<dl id="./parser/ttf.OffsetTable.searchRange" class="property">
								<dt class="name"><a href="#./parser/ttf.OffsetTable.searchRange">searchRange</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = offsetTable.searchRange;</code></pre></fieldset></dd>
								<dd class="return type">number</dd>
								<dt class="setter">Setter</dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>offsetTable.searchRange = value;</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">value</dt>
										<dd class="parameter type">number</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
							</dl>

						</dd>
					</dl>
					<dl id="./parser/ttf.TableRecord" class="clazz private">
						<dt class="name">class <a href="#./parser/ttf.TableRecord">TableRecord</a></dt>
						<dd class="description">
							
						</dd>
						<dd class="usage"><fieldset><legend /><pre><code>var tableRecord = new TableRecord();</code></pre></fieldset></dd>
						<dd class="members">
							<dl id="./parser/ttf.TableRecord.c1" class="property">
								<dt class="name"><a href="#./parser/ttf.TableRecord.c1">c1</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = tableRecord.c1;</code></pre></fieldset></dd>
								<dd class="return type">string</dd>
								<dt class="setter">Setter</dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>tableRecord.c1 = value;</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">value</dt>
										<dd class="parameter type">string</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
							</dl>

							<dl id="./parser/ttf.TableRecord.c2" class="property">
								<dt class="name"><a href="#./parser/ttf.TableRecord.c2">c2</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = tableRecord.c2;</code></pre></fieldset></dd>
								<dd class="return type">string</dd>
								<dt class="setter">Setter</dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>tableRecord.c2 = value;</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">value</dt>
										<dd class="parameter type">string</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
							</dl>

							<dl id="./parser/ttf.TableRecord.c3" class="property">
								<dt class="name"><a href="#./parser/ttf.TableRecord.c3">c3</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = tableRecord.c3;</code></pre></fieldset></dd>
								<dd class="return type">string</dd>
								<dt class="setter">Setter</dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>tableRecord.c3 = value;</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">value</dt>
										<dd class="parameter type">string</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
							</dl>

							<dl id="./parser/ttf.TableRecord.c4" class="property">
								<dt class="name"><a href="#./parser/ttf.TableRecord.c4">c4</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = tableRecord.c4;</code></pre></fieldset></dd>
								<dd class="return type">string</dd>
								<dt class="setter">Setter</dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>tableRecord.c4 = value;</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">value</dt>
										<dd class="parameter type">string</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
							</dl>

							<dl id="./parser/ttf.TableRecord.checksum" class="property">
								<dt class="name"><a href="#./parser/ttf.TableRecord.checksum">checksum</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = tableRecord.checksum;</code></pre></fieldset></dd>
								<dd class="return type">number</dd>
								<dt class="setter">Setter</dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>tableRecord.checksum = value;</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">value</dt>
										<dd class="parameter type">number</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
							</dl>

							<dl id="./parser/ttf.TableRecord.length" class="property">
								<dt class="name"><a href="#./parser/ttf.TableRecord.length">length</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = tableRecord.length;</code></pre></fieldset></dd>
								<dd class="return type">number</dd>
								<dt class="setter">Setter</dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>tableRecord.length = value;</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">value</dt>
										<dd class="parameter type">number</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
							</dl>

							<dl id="./parser/ttf.TableRecord.offset" class="property">
								<dt class="name"><a href="#./parser/ttf.TableRecord.offset">offset</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = tableRecord.offset;</code></pre></fieldset></dd>
								<dd class="return type">number</dd>
								<dt class="setter">Setter</dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>tableRecord.offset = value;</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">value</dt>
										<dd class="parameter type">number</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
							</dl>

							<dl id="./parser/ttf.TableRecord.read" class="property">
								<dt class="name"><a href="#./parser/ttf.TableRecord.read">read</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = tableRecord.read;</code></pre></fieldset></dd>
								<dd class="return type">function(!{ dataView: DataView, position: number }): TableRecord</dd>
								<dt class="setter">Setter</dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>tableRecord.read = value;</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">value</dt>
										<dd class="parameter type">function(!{ dataView: DataView, position: number }): TableRecord</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
							</dl>

						</dd>
					</dl>
				</section>
				<section>
					<h2>Enums</h2>
					<dl id="./parser/ttf.DataType" class="enum private">
						<dt class="name">enum <a href="#./parser/ttf.DataType">DataType</a></dt>
						<dd class="description">
							
						</dd>
						<dd class="members">
							<dl id="./parser/ttf.DataType.Char" class="member">
								<dt class="name"><a href="#./parser/ttf.DataType.Char">Char</a> = 0</dt>
								<dd class="description">
									
								</dd>
							</dl>
							<dl id="./parser/ttf.DataType.Uint16" class="member">
								<dt class="name"><a href="#./parser/ttf.DataType.Uint16">Uint16</a> = 1</dt>
								<dd class="description">
									
								</dd>
							</dl>
							<dl id="./parser/ttf.DataType.Uint32" class="member">
								<dt class="name"><a href="#./parser/ttf.DataType.Uint32">Uint32</a> = 2</dt>
								<dd class="description">
									
								</dd>
							</dl>
						</dd>
					</dl>
				</section>
			</section>
			<section class="module">
				<h1 id="./renderers/settings">Module ./renderers/settings</h1>
				<section>
					<h2>Free functions</h2>
					<dl id="./renderers/settings.isFontFaceRule" class="function private">
						<dt class="name"><a href="#./renderers/settings.isFontFaceRule">isFontFaceRule</a></dt>
						<dd class="description">
							
						</dd>
						<dd class="usage"><fieldset><legend /><pre><code>var result = isFontFaceRule(rule);</code></pre></fieldset></dd>
						<dd class="parameters">
							<dl>
								<dt class="parameter name">rule</dt>
								<dd class="parameter type">!CSSRule</dd>
								<dd class="parameter description"></dd>
							</dl>
						</dd>
						<dt>Returns</dt>
						<dd class="return type">boolean</dd>
						<dd class="return description"></dd>
					</dl>
				</section>
			</section>
			<section class="module">
				<h1 id="./renderers/web/animation-collection">Module ./renderers/web/animation-collection</h1>
				<section>
					<h2>Classes</h2>
					<dl id="./renderers/web/animation-collection.AnimationCollection" class="clazz">
						<dt class="name">class <a href="#./renderers/web/animation-collection.AnimationCollection">AnimationCollection</a></dt>
						<dd class="description">
							This class represents a collection of animations. Each animation contains one or more keyframes.
The collection can then be converted to a CSS3 representation.
						</dd>
						<dd class="usage"><fieldset><legend /><pre><code>var animationCollection = new AnimationCollection(renderer, style);</code></pre></fieldset></dd>
						<dd class="parameters">
							<dl>
								<dt class="parameter name">renderer</dt>
								<dd class="parameter type">!libjass.renderers.NullRenderer</dd>
								<dd class="parameter description">The renderer that this collection is associated with</dd>
								<dt class="parameter name">style</dt>
								<dd class="parameter type">!HTMLStyleElement</dd>
								<dd class="parameter description">A &lt;style&gt; element to insert the animation rules into</dd>
							</dl>
						</dd>
						<dd class="members">
							<dl id="./renderers/web/animation-collection.AnimationCollection.animationDelays" class="property">
								<dt class="name"><a href="#./renderers/web/animation-collection.AnimationCollection.animationDelays">animationDelays</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									This array should be used to set the "animation-delay" CSS property of the target element.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = animationCollection.animationDelays;</code></pre></fieldset></dd>
								<dd class="return type">!Array.&lt;number&gt;</dd>
							</dl>

							<dl id="./renderers/web/animation-collection.AnimationCollection.animationStyle" class="property">
								<dt class="name"><a href="#./renderers/web/animation-collection.AnimationCollection.animationStyle">animationStyle</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									This string should be set as the "animation" CSS property of the target element.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = animationCollection.animationStyle;</code></pre></fieldset></dd>
								<dd class="return type">string</dd>
							</dl>

							<dl id="./renderers/web/animation-collection.AnimationCollection.add" class="function">
								<dt class="name"><a href="#./renderers/web/animation-collection.AnimationCollection.add">add</a></dt>
								<dd class="description">
									Add an animation to this collection. The given keyframes together make one animation.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>animationCollection.add(timingFunction, keyframes);</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">timingFunction</dt>
										<dd class="parameter type">string</dd>
										<dd class="parameter description">One of the acceptable values for the "animation-timing-function" CSS property</dd>
										<dt class="parameter name">keyframes</dt>
										<dd class="parameter type">!Array.&lt;!libjass.renderers.Keyframe&gt;</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
							</dl>

						</dd>
					</dl>
				</section>
			</section>
			<section class="module">
				<h1 id="./renderers/web/drawing-styles">Module ./renderers/web/drawing-styles</h1>
				<section>
					<h2>Classes</h2>
					<dl id="./renderers/web/drawing-styles.DrawingStyles" class="clazz">
						<dt class="name">class <a href="#./renderers/web/drawing-styles.DrawingStyles">DrawingStyles</a></dt>
						<dd class="description">
							This class represents an ASS drawing - a set of drawing instructions between {\p} tags.
						</dd>
						<dd class="usage"><fieldset><legend /><pre><code>var drawingStyles = new DrawingStyles(outputScaleX, outputScaleY);</code></pre></fieldset></dd>
						<dd class="parameters">
							<dl>
								<dt class="parameter name">outputScaleX</dt>
								<dd class="parameter type">number</dd>
								<dd class="parameter description"></dd>
								<dt class="parameter name">outputScaleY</dt>
								<dd class="parameter type">number</dd>
								<dd class="parameter description"></dd>
							</dl>
						</dd>
						<dd class="members">
							<dl id="./renderers/web/drawing-styles.DrawingStyles.baselineOffset" class="property">
								<dt class="name"><a href="#./renderers/web/drawing-styles.DrawingStyles.baselineOffset">baselineOffset</a></dt>
								<dt class="setter">Setter</dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>drawingStyles.baselineOffset = value;</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">value</dt>
										<dd class="parameter type">number</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
							</dl>

							<dl id="./renderers/web/drawing-styles.DrawingStyles.scale" class="property">
								<dt class="name"><a href="#./renderers/web/drawing-styles.DrawingStyles.scale">scale</a></dt>
								<dt class="setter">Setter</dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>drawingStyles.scale = value;</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">value</dt>
										<dd class="parameter type">number</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
							</dl>

							<dl id="./renderers/web/drawing-styles.DrawingStyles.toSVG" class="function">
								<dt class="name"><a href="#./renderers/web/drawing-styles.DrawingStyles.toSVG">toSVG</a></dt>
								<dd class="description">
									Converts this drawing to an &lt;svg&gt; element.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = drawingStyles.toSVG(drawingInstructions, fillColor);</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">drawingInstructions</dt>
										<dd class="parameter type">!libjass.parts.DrawingInstructions</dd>
										<dd class="parameter description"></dd>
										<dt class="parameter name">fillColor</dt>
										<dd class="parameter type">!libjass.parts.Color</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
								<dt>Returns</dt>
								<dd class="return type">!SVGSVGElement</dd>
								<dd class="return description"></dd>
							</dl>

						</dd>
					</dl>
				</section>
			</section>
			<section class="module">
				<h1 id="./renderers/web/font-size">Module ./renderers/web/font-size</h1>
				<section>
					<h2>Free functions</h2>
					<dl id="./renderers/web/font-size.calculateFontMetrics" class="function">
						<dt class="name"><a href="#./renderers/web/font-size.calculateFontMetrics">calculateFontMetrics</a></dt>
						<dd class="description">
							Calculates font metrics for the given font family.
						</dd>
						<dd class="usage"><fieldset><legend /><pre><code>var result = calculateFontMetrics(fontFamily, fallbackFonts, fontSizeElement);</code></pre></fieldset></dd>
						<dd class="parameters">
							<dl>
								<dt class="parameter name">fontFamily</dt>
								<dd class="parameter type">string</dd>
								<dd class="parameter description"></dd>
								<dt class="parameter name">fallbackFonts</dt>
								<dd class="parameter type">string</dd>
								<dd class="parameter description"></dd>
								<dt class="parameter name">fontSizeElement</dt>
								<dd class="parameter type">!HTMLDivElement</dd>
								<dd class="parameter description"></dd>
							</dl>
						</dd>
						<dt>Returns</dt>
						<dd class="return type">!Promise.&lt;number&gt;</dd>
						<dd class="return description"></dd>
					</dl>
					<dl id="./renderers/web/font-size.fontSizeForLineHeight" class="function">
						<dt class="name"><a href="#./renderers/web/font-size.fontSizeForLineHeight">fontSizeForLineHeight</a></dt>
						<dd class="description">
							<p>Uses linear interpolation to calculate the CSS font size that would give the specified line height for the specified font family.</p><p>WARNING: If fontMetricsCache doesn't already contain a cached value for this font family, and it is not a font already installed on the user's device, then this function
may return wrong values. To avoid this, make sure to preload the font using the <a href="#libjass.renderers.RendererSettings.fontMap">libjass.renderers.RendererSettings.fontMap</a> property when constructing the renderer.</p>
						</dd>
						<dd class="usage"><fieldset><legend /><pre><code>var result = fontSizeForLineHeight(fontFamily, lineHeight, fallbackFonts, fontSizeElement, fontMetricsCache);</code></pre></fieldset></dd>
						<dd class="parameters">
							<dl>
								<dt class="parameter name">fontFamily</dt>
								<dd class="parameter type">string</dd>
								<dd class="parameter description"></dd>
								<dt class="parameter name">lineHeight</dt>
								<dd class="parameter type">number</dd>
								<dd class="parameter description"></dd>
								<dt class="parameter name">fallbackFonts</dt>
								<dd class="parameter type">string</dd>
								<dd class="parameter description"></dd>
								<dt class="parameter name">fontSizeElement</dt>
								<dd class="parameter type">!HTMLDivElement</dd>
								<dd class="parameter description"></dd>
								<dt class="parameter name">fontMetricsCache</dt>
								<dd class="parameter type">!Map.&lt;string, [number, number]&gt;</dd>
								<dd class="parameter description"></dd>
							</dl>
						</dd>
						<dt>Returns</dt>
						<dd class="return type">number</dd>
						<dd class="return description"></dd>
					</dl>
					<dl id="./renderers/web/font-size.fontMetricsFromLineHeights" class="function private">
						<dt class="name"><a href="#./renderers/web/font-size.fontMetricsFromLineHeights">fontMetricsFromLineHeights</a></dt>
						<dd class="description">
							
						</dd>
						<dd class="usage"><fieldset><legend /><pre><code>var result = fontMetricsFromLineHeights(lowerLineHeight, upperLineHeight);</code></pre></fieldset></dd>
						<dd class="parameters">
							<dl>
								<dt class="parameter name">lowerLineHeight</dt>
								<dd class="parameter type">number</dd>
								<dd class="parameter description"></dd>
								<dt class="parameter name">upperLineHeight</dt>
								<dd class="parameter type">number</dd>
								<dd class="parameter description"></dd>
							</dl>
						</dd>
						<dt>Returns</dt>
						<dd class="return type">[number, number]</dd>
						<dd class="return description"></dd>
					</dl>
					<dl id="./renderers/web/font-size.fontSizeFromMetrics" class="function private">
						<dt class="name"><a href="#./renderers/web/font-size.fontSizeFromMetrics">fontSizeFromMetrics</a></dt>
						<dd class="description">
							
						</dd>
						<dd class="usage"><fieldset><legend /><pre><code>var result = fontSizeFromMetrics(lineHeight, lowerLineHeight, factor);</code></pre></fieldset></dd>
						<dd class="parameters">
							<dl>
								<dt class="parameter name">lineHeight</dt>
								<dd class="parameter type">number</dd>
								<dd class="parameter description"></dd>
								<dt class="parameter name">lowerLineHeight</dt>
								<dd class="parameter type">number</dd>
								<dd class="parameter description"></dd>
								<dt class="parameter name">factor</dt>
								<dd class="parameter type">number</dd>
								<dd class="parameter description"></dd>
							</dl>
						</dd>
						<dt>Returns</dt>
						<dd class="return type">number</dd>
						<dd class="return description"></dd>
					</dl>
					<dl id="./renderers/web/font-size.lineHeightForFontSize" class="function private">
						<dt class="name"><a href="#./renderers/web/font-size.lineHeightForFontSize">lineHeightForFontSize</a></dt>
						<dd class="description">
							
						</dd>
						<dd class="usage"><fieldset><legend /><pre><code>var result = lineHeightForFontSize(fontFamily, fontSize, fallbackFonts, fontSizeElement);</code></pre></fieldset></dd>
						<dd class="parameters">
							<dl>
								<dt class="parameter name">fontFamily</dt>
								<dd class="parameter type">string</dd>
								<dd class="parameter description"></dd>
								<dt class="parameter name">fontSize</dt>
								<dd class="parameter type">number</dd>
								<dd class="parameter description"></dd>
								<dt class="parameter name">fallbackFonts</dt>
								<dd class="parameter type">string</dd>
								<dd class="parameter description"></dd>
								<dt class="parameter name">fontSizeElement</dt>
								<dd class="parameter type">!HTMLDivElement</dd>
								<dd class="parameter description"></dd>
							</dl>
						</dd>
						<dt>Returns</dt>
						<dd class="return type">!Promise.&lt;number&gt;</dd>
						<dd class="return description"></dd>
					</dl>
					<dl id="./renderers/web/font-size.lineHeightForFontSizeSync" class="function private">
						<dt class="name"><a href="#./renderers/web/font-size.lineHeightForFontSizeSync">lineHeightForFontSizeSync</a></dt>
						<dd class="description">
							
						</dd>
						<dd class="usage"><fieldset><legend /><pre><code>var result = lineHeightForFontSizeSync(fontFamily, fontSize, fallbackFonts, fontSizeElement);</code></pre></fieldset></dd>
						<dd class="parameters">
							<dl>
								<dt class="parameter name">fontFamily</dt>
								<dd class="parameter type">string</dd>
								<dd class="parameter description"></dd>
								<dt class="parameter name">fontSize</dt>
								<dd class="parameter type">number</dd>
								<dd class="parameter description"></dd>
								<dt class="parameter name">fallbackFonts</dt>
								<dd class="parameter type">string</dd>
								<dd class="parameter description"></dd>
								<dt class="parameter name">fontSizeElement</dt>
								<dd class="parameter type">!HTMLDivElement</dd>
								<dd class="parameter description"></dd>
							</dl>
						</dd>
						<dt>Returns</dt>
						<dd class="return type">number</dd>
						<dd class="return description"></dd>
					</dl>
					<dl id="./renderers/web/font-size.prepareFontSizeElement" class="function private">
						<dt class="name"><a href="#./renderers/web/font-size.prepareFontSizeElement">prepareFontSizeElement</a></dt>
						<dd class="description">
							
						</dd>
						<dd class="usage"><fieldset><legend /><pre><code>prepareFontSizeElement(fontFamily, fontSize, fallbackFonts, fontSizeElement);</code></pre></fieldset></dd>
						<dd class="parameters">
							<dl>
								<dt class="parameter name">fontFamily</dt>
								<dd class="parameter type">string</dd>
								<dd class="parameter description"></dd>
								<dt class="parameter name">fontSize</dt>
								<dd class="parameter type">number</dd>
								<dd class="parameter description"></dd>
								<dt class="parameter name">fallbackFonts</dt>
								<dd class="parameter type">string</dd>
								<dd class="parameter description"></dd>
								<dt class="parameter name">fontSizeElement</dt>
								<dd class="parameter type">!HTMLDivElement</dd>
								<dd class="parameter description"></dd>
							</dl>
						</dd>
					</dl>
				</section>
			</section>
			<section class="module">
				<h1 id="./renderers/web/keyframe">Module ./renderers/web/keyframe</h1>
				<section>
					<h2>Classes</h2>
					<dl id="./renderers/web/keyframe.Keyframe" class="clazz">
						<dt class="name">class <a href="#./renderers/web/keyframe.Keyframe">Keyframe</a></dt>
						<dd class="description">
							This class represents a single keyframe. It has a list of CSS properties (names and values) associated with a point in time. Multiple keyframes make up an animation.
						</dd>
						<dd class="usage"><fieldset><legend /><pre><code>var keyframe = new Keyframe(time, properties);</code></pre></fieldset></dd>
						<dd class="parameters">
							<dl>
								<dt class="parameter name">time</dt>
								<dd class="parameter type">number</dd>
								<dd class="parameter description"></dd>
								<dt class="parameter name">properties</dt>
								<dd class="parameter type">!Map.&lt;string, string&gt;</dd>
								<dd class="parameter description"></dd>
							</dl>
						</dd>
						<dd class="members">
							<dl id="./renderers/web/keyframe.Keyframe.properties" class="property">
								<dt class="name"><a href="#./renderers/web/keyframe.Keyframe.properties">properties</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = keyframe.properties;</code></pre></fieldset></dd>
								<dd class="return type">!Map.&lt;string, string&gt;</dd>
							</dl>

							<dl id="./renderers/web/keyframe.Keyframe.time" class="property">
								<dt class="name"><a href="#./renderers/web/keyframe.Keyframe.time">time</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = keyframe.time;</code></pre></fieldset></dd>
								<dd class="return type">number</dd>
							</dl>

						</dd>
					</dl>
				</section>
			</section>
			<section class="module">
				<h1 id="./renderers/web/renderer">Module ./renderers/web/renderer</h1>
				<section>
					<h2>Interfaces</h2>
					<dl id="./renderers/web/renderer.FontFace" class="interface private">
						<dt class="name">interface <a href="#./renderers/web/renderer.FontFace">FontFace</a></dt>
						<dd class="description">
							
						</dd>
						<dd class="members">
							<dl id="./renderers/web/renderer.FontFace.family" class="property">
								<dt class="name"><a href="#./renderers/web/renderer.FontFace.family">family</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = fontFace.family;</code></pre></fieldset></dd>
								<dd class="return type">string</dd>
								<dt class="setter">Setter</dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>fontFace.family = value;</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">value</dt>
										<dd class="parameter type">string</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
							</dl>

							<dl id="./renderers/web/renderer.FontFace.load" class="function">
								<dt class="name"><a href="#./renderers/web/renderer.FontFace.load">load</a></dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = fontFace.load();</code></pre></fieldset></dd>
								<dt>Returns</dt>
								<dd class="return type">!Promise.&lt;!FontFace&gt;</dd>
								<dd class="return description"></dd>
							</dl>

						</dd>
					</dl>
					<dl id="./renderers/web/renderer.FontFaceSet" class="interface private">
						<dt class="name">interface <a href="#./renderers/web/renderer.FontFaceSet">FontFaceSet</a></dt>
						<dd class="description">
							
						</dd>
						<dd class="members">
							<dl id="./renderers/web/renderer.FontFaceSet.add" class="function">
								<dt class="name"><a href="#./renderers/web/renderer.FontFaceSet.add">add</a></dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = fontFaceSet.add(fontFace);</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">fontFace</dt>
										<dd class="parameter type">!FontFace</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
								<dt>Returns</dt>
								<dd class="return type">!FontFaceSet</dd>
								<dd class="return description"></dd>
							</dl>

							<dl id="./renderers/web/renderer.FontFaceSet.forEach" class="function">
								<dt class="name"><a href="#./renderers/web/renderer.FontFaceSet.forEach">forEach</a></dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>fontFaceSet.forEach(callbackfn, thisArg);</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">callbackfn</dt>
										<dd class="parameter type">function(!FontFace, !FontFace, !FontFaceSet)</dd>
										<dd class="parameter description">A function that is called with each value in the set.</dd>
										<dt class="parameter name">thisArg</dt>
										<dd class="parameter type">*</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
							</dl>

						</dd>
					</dl>
					<dl id="./renderers/web/renderer.PreRenderedSub" class="interface private">
						<dt class="name">interface <a href="#./renderers/web/renderer.PreRenderedSub">PreRenderedSub</a></dt>
						<dd class="description">
							
						</dd>
						<dd class="members">
							<dl id="./renderers/web/renderer.PreRenderedSub.animationDelays" class="property">
								<dt class="name"><a href="#./renderers/web/renderer.PreRenderedSub.animationDelays">animationDelays</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = preRenderedSub.animationDelays;</code></pre></fieldset></dd>
								<dd class="return type">!Map.&lt;string, number&gt;</dd>
								<dt class="setter">Setter</dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>preRenderedSub.animationDelays = value;</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">value</dt>
										<dd class="parameter type">!Map.&lt;string, number&gt;</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
							</dl>

							<dl id="./renderers/web/renderer.PreRenderedSub.sub" class="property">
								<dt class="name"><a href="#./renderers/web/renderer.PreRenderedSub.sub">sub</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = preRenderedSub.sub;</code></pre></fieldset></dd>
								<dd class="return type">!HTMLDivElement</dd>
								<dt class="setter">Setter</dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>preRenderedSub.sub = value;</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">value</dt>
										<dd class="parameter type">!HTMLDivElement</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
							</dl>

						</dd>
					</dl>
				</section>
			</section>
			<section class="module">
				<h1 id="./renderers/web/span-styles">Module ./renderers/web/span-styles</h1>
				<section>
					<h2>Classes</h2>
					<dl id="./renderers/web/span-styles.SpanStyles" class="clazz">
						<dt class="name">class <a href="#./renderers/web/span-styles.SpanStyles">SpanStyles</a></dt>
						<dd class="description">
							This class represents the style attribute of a span.
As a Dialogue's div is rendered, individual parts are added to span's, and this class is used to maintain the style attribute of those.
						</dd>
						<dd class="usage"><fieldset><legend /><pre><code>var spanStyles = new SpanStyles(renderer, dialogue, scaleX, scaleY, settings, fontSizeElement, svgDefsElement, fontMetricsCache);</code></pre></fieldset></dd>
						<dd class="parameters">
							<dl>
								<dt class="parameter name">renderer</dt>
								<dd class="parameter type">!libjass.renderers.NullRenderer</dd>
								<dd class="parameter description">The renderer that this set of styles is associated with</dd>
								<dt class="parameter name">dialogue</dt>
								<dd class="parameter type">!libjass.Dialogue</dd>
								<dd class="parameter description">The Dialogue that this set of styles is associated with</dd>
								<dt class="parameter name">scaleX</dt>
								<dd class="parameter type">number</dd>
								<dd class="parameter description">The horizontal scaling of the subtitles</dd>
								<dt class="parameter name">scaleY</dt>
								<dd class="parameter type">number</dd>
								<dd class="parameter description">The vertical scaling of the subtitles</dd>
								<dt class="parameter name">settings</dt>
								<dd class="parameter type">!libjass.renderers.RendererSettings</dd>
								<dd class="parameter description">The renderer settings</dd>
								<dt class="parameter name">fontSizeElement</dt>
								<dd class="parameter type">!HTMLDivElement</dd>
								<dd class="parameter description">A &lt;div&gt; element to measure font sizes with</dd>
								<dt class="parameter name">svgDefsElement</dt>
								<dd class="parameter type">!SVGDefsElement</dd>
								<dd class="parameter description">An SVG &lt;defs&gt; element to append filter definitions to</dd>
								<dt class="parameter name">fontMetricsCache</dt>
								<dd class="parameter type">!Map&lt;string, [number, number]&gt;</dd>
								<dd class="parameter description">Font metrics cache</dd>
							</dl>
						</dd>
						<dd class="members">
							<dl id="./renderers/web/span-styles.SpanStyles.blur" class="property">
								<dt class="name"><a href="#./renderers/web/span-styles.SpanStyles.blur">blur</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									Gets the blur property.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = spanStyles.blur;</code></pre></fieldset></dd>
								<dd class="return type">number</dd>
								<dt class="setter">Setter</dt>
								<dd class="description">
									Sets the blur property. null defaults it to 0.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>spanStyles.blur = value;</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">value</dt>
										<dd class="parameter type">?number</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
							</dl>

							<dl id="./renderers/web/span-styles.SpanStyles.bold" class="property">
								<dt class="name"><a href="#./renderers/web/span-styles.SpanStyles.bold">bold</a></dt>
								<dt class="setter">Setter</dt>
								<dd class="description">
									Sets the bold property. null defaults it to the default style's value.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>spanStyles.bold = value;</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">value</dt>
										<dd class="parameter type">(?number|?boolean)</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
							</dl>

							<dl id="./renderers/web/span-styles.SpanStyles.fontName" class="property">
								<dt class="name"><a href="#./renderers/web/span-styles.SpanStyles.fontName">fontName</a></dt>
								<dt class="setter">Setter</dt>
								<dd class="description">
									Sets the font name property. null defaults it to the default style's value.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>spanStyles.fontName = value;</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">value</dt>
										<dd class="parameter type">?string</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
							</dl>

							<dl id="./renderers/web/span-styles.SpanStyles.fontScaleX" class="property">
								<dt class="name"><a href="#./renderers/web/span-styles.SpanStyles.fontScaleX">fontScaleX</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									Gets the horizontal font scaling property.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = spanStyles.fontScaleX;</code></pre></fieldset></dd>
								<dd class="return type">number</dd>
								<dt class="setter">Setter</dt>
								<dd class="description">
									Sets the horizontal font scaling property. null defaults it to the default style's value.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>spanStyles.fontScaleX = value;</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">value</dt>
										<dd class="parameter type">?number</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
							</dl>

							<dl id="./renderers/web/span-styles.SpanStyles.fontScaleY" class="property">
								<dt class="name"><a href="#./renderers/web/span-styles.SpanStyles.fontScaleY">fontScaleY</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									Gets the vertical font scaling property.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = spanStyles.fontScaleY;</code></pre></fieldset></dd>
								<dd class="return type">number</dd>
								<dt class="setter">Setter</dt>
								<dd class="description">
									Sets the vertical font scaling property. null defaults it to the default style's value.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>spanStyles.fontScaleY = value;</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">value</dt>
										<dd class="parameter type">?number</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
							</dl>

							<dl id="./renderers/web/span-styles.SpanStyles.fontSize" class="property">
								<dt class="name"><a href="#./renderers/web/span-styles.SpanStyles.fontSize">fontSize</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									Gets the font size property.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = spanStyles.fontSize;</code></pre></fieldset></dd>
								<dd class="return type">number</dd>
								<dt class="setter">Setter</dt>
								<dd class="description">
									Sets the font size property. null defaults it to the default style's value.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>spanStyles.fontSize = value;</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">value</dt>
										<dd class="parameter type">?number</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
							</dl>

							<dl id="./renderers/web/span-styles.SpanStyles.gaussianBlur" class="property">
								<dt class="name"><a href="#./renderers/web/span-styles.SpanStyles.gaussianBlur">gaussianBlur</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									Gets the Gaussian blur property.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = spanStyles.gaussianBlur;</code></pre></fieldset></dd>
								<dd class="return type">number</dd>
								<dt class="setter">Setter</dt>
								<dd class="description">
									Sets the Gaussian blur property. null defaults it to 0.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>spanStyles.gaussianBlur = value;</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">value</dt>
										<dd class="parameter type">?number</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
							</dl>

							<dl id="./renderers/web/span-styles.SpanStyles.italic" class="property">
								<dt class="name"><a href="#./renderers/web/span-styles.SpanStyles.italic">italic</a></dt>
								<dt class="setter">Setter</dt>
								<dd class="description">
									Sets the italic property. null defaults it to the default style's value.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>spanStyles.italic = value;</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">value</dt>
										<dd class="parameter type">?boolean</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
							</dl>

							<dl id="./renderers/web/span-styles.SpanStyles.letterSpacing" class="property">
								<dt class="name"><a href="#./renderers/web/span-styles.SpanStyles.letterSpacing">letterSpacing</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									Gets the letter spacing property.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = spanStyles.letterSpacing;</code></pre></fieldset></dd>
								<dd class="return type">number</dd>
								<dt class="setter">Setter</dt>
								<dd class="description">
									Sets the letter spacing property. null defaults it to the default style's value.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>spanStyles.letterSpacing = value;</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">value</dt>
										<dd class="parameter type">?number</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
							</dl>

							<dl id="./renderers/web/span-styles.SpanStyles.outlineAlpha" class="property">
								<dt class="name"><a href="#./renderers/web/span-styles.SpanStyles.outlineAlpha">outlineAlpha</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									Gets the outline alpha property.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = spanStyles.outlineAlpha;</code></pre></fieldset></dd>
								<dd class="return type">number</dd>
								<dt class="setter">Setter</dt>
								<dd class="description">
									Sets the outline alpha property.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>spanStyles.outlineAlpha = value;</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">value</dt>
										<dd class="parameter type">?number</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
							</dl>

							<dl id="./renderers/web/span-styles.SpanStyles.outlineColor" class="property">
								<dt class="name"><a href="#./renderers/web/span-styles.SpanStyles.outlineColor">outlineColor</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									Gets the outline color property.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = spanStyles.outlineColor;</code></pre></fieldset></dd>
								<dd class="return type">!libjass.Color</dd>
								<dt class="setter">Setter</dt>
								<dd class="description">
									Sets the outline color property. null defaults it to the default style's value.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>spanStyles.outlineColor = value;</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">value</dt>
										<dd class="parameter type">libjass.Color</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
							</dl>

							<dl id="./renderers/web/span-styles.SpanStyles.outlineHeight" class="property">
								<dt class="name"><a href="#./renderers/web/span-styles.SpanStyles.outlineHeight">outlineHeight</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									Gets the outline width property.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = spanStyles.outlineHeight;</code></pre></fieldset></dd>
								<dd class="return type">number</dd>
								<dt class="setter">Setter</dt>
								<dd class="description">
									Sets the outline height property. null defaults it to the style's original outline height value.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>spanStyles.outlineHeight = value;</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">value</dt>
										<dd class="parameter type">?number</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
							</dl>

							<dl id="./renderers/web/span-styles.SpanStyles.outlineWidth" class="property">
								<dt class="name"><a href="#./renderers/web/span-styles.SpanStyles.outlineWidth">outlineWidth</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									Gets the outline width property.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = spanStyles.outlineWidth;</code></pre></fieldset></dd>
								<dd class="return type">number</dd>
								<dt class="setter">Setter</dt>
								<dd class="description">
									Sets the outline width property. null defaults it to the style's original outline width value.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>spanStyles.outlineWidth = value;</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">value</dt>
										<dd class="parameter type">?number</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
							</dl>

							<dl id="./renderers/web/span-styles.SpanStyles.primaryAlpha" class="property">
								<dt class="name"><a href="#./renderers/web/span-styles.SpanStyles.primaryAlpha">primaryAlpha</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									Gets the primary alpha property.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = spanStyles.primaryAlpha;</code></pre></fieldset></dd>
								<dd class="return type">number</dd>
								<dt class="setter">Setter</dt>
								<dd class="description">
									Sets the primary alpha property.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>spanStyles.primaryAlpha = value;</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">value</dt>
										<dd class="parameter type">?number</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
							</dl>

							<dl id="./renderers/web/span-styles.SpanStyles.primaryColor" class="property">
								<dt class="name"><a href="#./renderers/web/span-styles.SpanStyles.primaryColor">primaryColor</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									Gets the primary color property.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = spanStyles.primaryColor;</code></pre></fieldset></dd>
								<dd class="return type">!libjass.Color</dd>
								<dt class="setter">Setter</dt>
								<dd class="description">
									Sets the primary color property. null defaults it to the default style's value.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>spanStyles.primaryColor = value;</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">value</dt>
										<dd class="parameter type">libjass.Color</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
							</dl>

							<dl id="./renderers/web/span-styles.SpanStyles.rotationX" class="property">
								<dt class="name"><a href="#./renderers/web/span-styles.SpanStyles.rotationX">rotationX</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									Gets the X-axis rotation property.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = spanStyles.rotationX;</code></pre></fieldset></dd>
								<dd class="return type">?number</dd>
								<dt class="setter">Setter</dt>
								<dd class="description">
									Sets the X-axis rotation property.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>spanStyles.rotationX = value;</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">value</dt>
										<dd class="parameter type">?number</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
							</dl>

							<dl id="./renderers/web/span-styles.SpanStyles.rotationY" class="property">
								<dt class="name"><a href="#./renderers/web/span-styles.SpanStyles.rotationY">rotationY</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									Gets the Y-axis rotation property.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = spanStyles.rotationY;</code></pre></fieldset></dd>
								<dd class="return type">?number</dd>
								<dt class="setter">Setter</dt>
								<dd class="description">
									Sets the Y-axis rotation property.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>spanStyles.rotationY = value;</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">value</dt>
										<dd class="parameter type">?number</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
							</dl>

							<dl id="./renderers/web/span-styles.SpanStyles.rotationZ" class="property">
								<dt class="name"><a href="#./renderers/web/span-styles.SpanStyles.rotationZ">rotationZ</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									Gets the Z-axis rotation property.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = spanStyles.rotationZ;</code></pre></fieldset></dd>
								<dd class="return type">?number</dd>
								<dt class="setter">Setter</dt>
								<dd class="description">
									Sets the Z-axis rotation property.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>spanStyles.rotationZ = value;</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">value</dt>
										<dd class="parameter type">?number</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
							</dl>

							<dl id="./renderers/web/span-styles.SpanStyles.secondaryAlpha" class="property">
								<dt class="name"><a href="#./renderers/web/span-styles.SpanStyles.secondaryAlpha">secondaryAlpha</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									Gets the secondary alpha property.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = spanStyles.secondaryAlpha;</code></pre></fieldset></dd>
								<dd class="return type">number</dd>
								<dt class="setter">Setter</dt>
								<dd class="description">
									Sets the secondary alpha property.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>spanStyles.secondaryAlpha = value;</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">value</dt>
										<dd class="parameter type">?number</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
							</dl>

							<dl id="./renderers/web/span-styles.SpanStyles.secondaryColor" class="property">
								<dt class="name"><a href="#./renderers/web/span-styles.SpanStyles.secondaryColor">secondaryColor</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									Gets the secondary color property.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = spanStyles.secondaryColor;</code></pre></fieldset></dd>
								<dd class="return type">!libjass.Color</dd>
								<dt class="setter">Setter</dt>
								<dd class="description">
									Sets the secondary color property. null defaults it to the default style's value.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>spanStyles.secondaryColor = value;</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">value</dt>
										<dd class="parameter type">libjass.Color</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
							</dl>

							<dl id="./renderers/web/span-styles.SpanStyles.shadowAlpha" class="property">
								<dt class="name"><a href="#./renderers/web/span-styles.SpanStyles.shadowAlpha">shadowAlpha</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									Gets the shadow alpha property.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = spanStyles.shadowAlpha;</code></pre></fieldset></dd>
								<dd class="return type">number</dd>
								<dt class="setter">Setter</dt>
								<dd class="description">
									Sets the shadow alpha property.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>spanStyles.shadowAlpha = value;</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">value</dt>
										<dd class="parameter type">?number</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
							</dl>

							<dl id="./renderers/web/span-styles.SpanStyles.shadowColor" class="property">
								<dt class="name"><a href="#./renderers/web/span-styles.SpanStyles.shadowColor">shadowColor</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									Gets the shadow color property.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = spanStyles.shadowColor;</code></pre></fieldset></dd>
								<dd class="return type">!libjass.Color</dd>
								<dt class="setter">Setter</dt>
								<dd class="description">
									Sets the shadow color property. null defaults it to the default style's value.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>spanStyles.shadowColor = value;</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">value</dt>
										<dd class="parameter type">libjass.Color</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
							</dl>

							<dl id="./renderers/web/span-styles.SpanStyles.shadowDepthX" class="property">
								<dt class="name"><a href="#./renderers/web/span-styles.SpanStyles.shadowDepthX">shadowDepthX</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									Gets the shadow width property.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = spanStyles.shadowDepthX;</code></pre></fieldset></dd>
								<dd class="return type">number</dd>
								<dt class="setter">Setter</dt>
								<dd class="description">
									Sets the shadow width property. null defaults it to the style's original shadow depth value.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>spanStyles.shadowDepthX = value;</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">value</dt>
										<dd class="parameter type">?number</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
							</dl>

							<dl id="./renderers/web/span-styles.SpanStyles.shadowDepthY" class="property">
								<dt class="name"><a href="#./renderers/web/span-styles.SpanStyles.shadowDepthY">shadowDepthY</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									Gets the shadow height property.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = spanStyles.shadowDepthY;</code></pre></fieldset></dd>
								<dd class="return type">number</dd>
								<dt class="setter">Setter</dt>
								<dd class="description">
									Sets the shadow height property. null defaults it to the style's original shadow depth value.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>spanStyles.shadowDepthY = value;</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">value</dt>
										<dd class="parameter type">?number</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
							</dl>

							<dl id="./renderers/web/span-styles.SpanStyles.skewX" class="property">
								<dt class="name"><a href="#./renderers/web/span-styles.SpanStyles.skewX">skewX</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									Gets the X-axis skew property.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = spanStyles.skewX;</code></pre></fieldset></dd>
								<dd class="return type">?number</dd>
								<dt class="setter">Setter</dt>
								<dd class="description">
									Sets the X-axis skew property.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>spanStyles.skewX = value;</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">value</dt>
										<dd class="parameter type">?number</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
							</dl>

							<dl id="./renderers/web/span-styles.SpanStyles.skewY" class="property">
								<dt class="name"><a href="#./renderers/web/span-styles.SpanStyles.skewY">skewY</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									Gets the Y-axis skew property.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = spanStyles.skewY;</code></pre></fieldset></dd>
								<dd class="return type">?number</dd>
								<dt class="setter">Setter</dt>
								<dd class="description">
									Sets the Y-axis skew property.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>spanStyles.skewY = value;</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">value</dt>
										<dd class="parameter type">?number</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
							</dl>

							<dl id="./renderers/web/span-styles.SpanStyles.strikeThrough" class="property">
								<dt class="name"><a href="#./renderers/web/span-styles.SpanStyles.strikeThrough">strikeThrough</a></dt>
								<dt class="setter">Setter</dt>
								<dd class="description">
									Sets the strike-through property. null defaults it to the default style's value.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>spanStyles.strikeThrough = value;</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">value</dt>
										<dd class="parameter type">?boolean</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
							</dl>

							<dl id="./renderers/web/span-styles.SpanStyles.underline" class="property">
								<dt class="name"><a href="#./renderers/web/span-styles.SpanStyles.underline">underline</a></dt>
								<dt class="setter">Setter</dt>
								<dd class="description">
									Sets the underline property. null defaults it to the default style's value.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>spanStyles.underline = value;</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">value</dt>
										<dd class="parameter type">?boolean</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
							</dl>

							<dl id="./renderers/web/span-styles.SpanStyles.makeNewLine" class="function">
								<dt class="name"><a href="#./renderers/web/span-styles.SpanStyles.makeNewLine">makeNewLine</a></dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = spanStyles.makeNewLine();</code></pre></fieldset></dd>
								<dt>Returns</dt>
								<dd class="return type">!HTMLBRElement</dd>
								<dd class="return description"></dd>
							</dl>

							<dl id="./renderers/web/span-styles.SpanStyles.reset" class="function">
								<dt class="name"><a href="#./renderers/web/span-styles.SpanStyles.reset">reset</a></dt>
								<dd class="description">
									Resets the styles to the defaults provided by the argument.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>spanStyles.reset(newStyle);</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">newStyle</dt>
										<dd class="parameter type">libjass.Style</dd>
										<dd class="parameter description">The new defaults to reset the style to. If null, the styles are reset to the default style of the Dialogue.</dd>
									</dl>
								</dd>
							</dl>

							<dl id="./renderers/web/span-styles.SpanStyles.setStylesOnSpan" class="function">
								<dt class="name"><a href="#./renderers/web/span-styles.SpanStyles.setStylesOnSpan">setStylesOnSpan</a></dt>
								<dd class="description">
									Sets the style attribute on the given span element.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = spanStyles.setStylesOnSpan(span, animationCollection);</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">span</dt>
										<dd class="parameter type">!HTMLSpanElement</dd>
										<dd class="parameter description"></dd>
										<dt class="parameter name">animationCollection</dt>
										<dd class="parameter type">!AnimationCollection</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
								<dt>Returns</dt>
								<dd class="return type">!HTMLSpanElement</dd>
								<dd class="return description">The resulting &lt;span&gt; with the CSS styles applied. This may be a wrapper around the input &lt;span&gt; if the styles were applied using SVG filters.</dd>
							</dl>

							<dl id="./renderers/web/span-styles.SpanStyles._setSvgOutlineOnSpan" class="function private">
								<dt class="name"><a href="#./renderers/web/span-styles.SpanStyles._setSvgOutlineOnSpan">_setSvgOutlineOnSpan</a></dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>spanStyles._setSvgOutlineOnSpan(filterWrapperSpan, outlineWidth, outlineHeight, outlineColor, primaryAlpha);</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">filterWrapperSpan</dt>
										<dd class="parameter type">!HTMLSpanElement</dd>
										<dd class="parameter description"></dd>
										<dt class="parameter name">outlineWidth</dt>
										<dd class="parameter type">number</dd>
										<dd class="parameter description"></dd>
										<dt class="parameter name">outlineHeight</dt>
										<dd class="parameter type">number</dd>
										<dd class="parameter description"></dd>
										<dt class="parameter name">outlineColor</dt>
										<dd class="parameter type">!libjass.parts.Color</dd>
										<dd class="parameter description"></dd>
										<dt class="parameter name">primaryAlpha</dt>
										<dd class="parameter type">number</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
							</dl>

							<dl id="./renderers/web/span-styles.SpanStyles._setTextShadowOutlineOnSpan" class="function private">
								<dt class="name"><a href="#./renderers/web/span-styles.SpanStyles._setTextShadowOutlineOnSpan">_setTextShadowOutlineOnSpan</a></dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>spanStyles._setTextShadowOutlineOnSpan(span, outlineWidth, outlineHeight, outlineColor);</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">span</dt>
										<dd class="parameter type">!HTMLSpanElement</dd>
										<dd class="parameter description"></dd>
										<dt class="parameter name">outlineWidth</dt>
										<dd class="parameter type">number</dd>
										<dd class="parameter description"></dd>
										<dt class="parameter name">outlineHeight</dt>
										<dd class="parameter type">number</dd>
										<dd class="parameter description"></dd>
										<dt class="parameter name">outlineColor</dt>
										<dd class="parameter type">!libjass.parts.Color</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
							</dl>

						</dd>
					</dl>
				</section>
			</section>
			<section class="module">
				<h1 id="./settings">Module ./settings</h1>
				<section>
					<h2>Free functions</h2>
					<dl id="./settings.setDebugMode" class="function">
						<dt class="name"><a href="#./settings.setDebugMode">setDebugMode</a></dt>
						<dd class="description">
							Sets the debug mode.
						</dd>
						<dd class="usage"><fieldset><legend /><pre><code>setDebugMode(value);</code></pre></fieldset></dd>
						<dd class="parameters">
							<dl>
								<dt class="parameter name">value</dt>
								<dd class="parameter type">boolean</dd>
								<dd class="parameter description"></dd>
							</dl>
						</dd>
					</dl>
					<dl id="./settings.setVerboseMode" class="function">
						<dt class="name"><a href="#./settings.setVerboseMode">setVerboseMode</a></dt>
						<dd class="description">
							Sets the verbose debug mode.
						</dd>
						<dd class="usage"><fieldset><legend /><pre><code>setVerboseMode(value);</code></pre></fieldset></dd>
						<dd class="parameters">
							<dl>
								<dt class="parameter name">value</dt>
								<dd class="parameter type">boolean</dd>
								<dd class="parameter description"></dd>
							</dl>
						</dd>
					</dl>
				</section>
			</section>
			<section class="module">
				<h1 id="./types/misc">Module ./types/misc</h1>
				<section>
					<h2>Free functions</h2>
					<dl id="./types/misc.valueOrDefault" class="function">
						<dt class="name"><a href="#./types/misc.valueOrDefault">valueOrDefault.&lt;T&gt;</a></dt>
						<dd class="description">
							
						</dd>
						<dd class="usage"><fieldset><legend /><pre><code>var result = valueOrDefault(template, key, converter, validator, defaultValue);</code></pre></fieldset></dd>
						<dd class="parameters">
							<dl>
								<dt class="parameter name">template</dt>
								<dd class="parameter type">!Map.&lt;string, string&gt;</dd>
								<dd class="parameter description"></dd>
								<dt class="parameter name">key</dt>
								<dd class="parameter type">string</dd>
								<dd class="parameter description"></dd>
								<dt class="parameter name">converter</dt>
								<dd class="parameter type">function(string):T</dd>
								<dd class="parameter description"></dd>
								<dt class="parameter name">validator</dt>
								<dd class="parameter type">?function(T):boolean</dd>
								<dd class="parameter description"></dd>
								<dt class="parameter name">defaultValue</dt>
								<dd class="parameter type">T</dd>
								<dd class="parameter description"></dd>
							</dl>
						</dd>
						<dt>Returns</dt>
						<dd class="return type">T</dd>
						<dd class="return description"></dd>
					</dl>
				</section>
				<section>
					<h2>Interfaces</h2>
					<dl id="./types/misc.Property" class="interface">
						<dt class="name">interface <a href="#./types/misc.Property">Property</a></dt>
						<dd class="description">
							A property.
						</dd>
						<dd class="members">
							<dl id="./types/misc.Property.name" class="property">
								<dt class="name"><a href="#./types/misc.Property.name">name</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = property.name;</code></pre></fieldset></dd>
								<dd class="return type">string</dd>
								<dt class="setter">Setter</dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>property.name = value;</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">value</dt>
										<dd class="parameter type">string</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
							</dl>

							<dl id="./types/misc.Property.value" class="property">
								<dt class="name"><a href="#./types/misc.Property.value">value</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = property.value;</code></pre></fieldset></dd>
								<dd class="return type">string</dd>
								<dt class="setter">Setter</dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>property.value = value;</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">value</dt>
										<dd class="parameter type">string</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
							</dl>

						</dd>
					</dl>
					<dl id="./types/misc.TypedTemplate" class="interface">
						<dt class="name">interface <a href="#./types/misc.TypedTemplate">TypedTemplate</a></dt>
						<dd class="description">
							A template object with a particular type.
						</dd>
						<dd class="members">
							<dl id="./types/misc.TypedTemplate.template" class="property">
								<dt class="name"><a href="#./types/misc.TypedTemplate.template">template</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = typedTemplate.template;</code></pre></fieldset></dd>
								<dd class="return type">!Map.&lt;string, string&gt;</dd>
								<dt class="setter">Setter</dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>typedTemplate.template = value;</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">value</dt>
										<dd class="parameter type">!Map.&lt;string, string&gt;</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
							</dl>

							<dl id="./types/misc.TypedTemplate.type" class="property">
								<dt class="name"><a href="#./types/misc.TypedTemplate.type">type</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = typedTemplate.type;</code></pre></fieldset></dd>
								<dd class="return type">string</dd>
								<dt class="setter">Setter</dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>typedTemplate.type = value;</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">value</dt>
										<dd class="parameter type">string</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
							</dl>

						</dd>
					</dl>
				</section>
			</section>
			<section class="module">
				<h1 id="./utility/map">Module ./utility/map</h1>
				<section>
					<h2>Free functions</h2>
					<dl id="./utility/map.setImplementation" class="function">
						<dt class="name"><a href="#./utility/map.setImplementation">setImplementation</a></dt>
						<dd class="description">
							Sets the Map implementation used by libjass to the provided one. If null, <a href="#./utility/map.SimpleMap">./utility/map.SimpleMap</a> is used.
						</dd>
						<dd class="usage"><fieldset><legend /><pre><code>setImplementation(value);</code></pre></fieldset></dd>
						<dd class="parameters">
							<dl>
								<dt class="parameter name">value</dt>
								<dd class="parameter type">?function(new:Map, !Array.&lt;!Array.&lt;*&gt;&gt;=)</dd>
								<dd class="parameter description"></dd>
							</dl>
						</dd>
					</dl>
				</section>
				<section>
					<h2>Classes</h2>
					<dl id="./utility/map.SimpleMap" class="clazz private">
						<dt class="name">class <a href="#./utility/map.SimpleMap">SimpleMap.&lt;K, V&gt;</a></dt>
						<dd class="description">
							<p>Map implementation for browsers that don't support it. Only supports keys which are of Number or String type, or which have a property called "id".</p><p>Keys and values are stored as properties of an object, with property names derived from the key type.</p>
						</dd>
						<dd class="usage"><fieldset><legend /><pre><code>var simpleMap = new SimpleMap(iterable);</code></pre></fieldset></dd>
						<dd class="parameters">
							<dl>
								<dt class="parameter name">iterable</dt>
								<dd class="parameter type">!Array.&lt;!Array.&lt;*&gt;&gt;=</dd>
								<dd class="parameter description">Only an array of elements (where each element is a 2-tuple of key and value) is supported.</dd>
							</dl>
						</dd>
						<dd class="members">
							<dl id="./utility/map.SimpleMap.size" class="property">
								<dt class="name"><a href="#./utility/map.SimpleMap.size">size</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = simpleMap.size;</code></pre></fieldset></dd>
								<dd class="return type">number</dd>
							</dl>

							<dl id="./utility/map.SimpleMap.clear" class="function">
								<dt class="name"><a href="#./utility/map.SimpleMap.clear">clear</a></dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>simpleMap.clear();</code></pre></fieldset></dd>
							</dl>

							<dl id="./utility/map.SimpleMap.delete" class="function">
								<dt class="name"><a href="#./utility/map.SimpleMap.delete">delete</a></dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = simpleMap.delete(key);</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">key</dt>
										<dd class="parameter type">K</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
								<dt>Returns</dt>
								<dd class="return type">boolean</dd>
								<dd class="return description">true if the key was present before being deleted, false otherwise</dd>
							</dl>

							<dl id="./utility/map.SimpleMap.forEach" class="function">
								<dt class="name"><a href="#./utility/map.SimpleMap.forEach">forEach</a></dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>simpleMap.forEach(callbackfn, thisArg);</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">callbackfn</dt>
										<dd class="parameter type">function(V, K, libjass.Map.&lt;K, V&gt;)</dd>
										<dd class="parameter description">A function that is called with each key and value in the map.</dd>
										<dt class="parameter name">thisArg</dt>
										<dd class="parameter type">*</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
							</dl>

							<dl id="./utility/map.SimpleMap.get" class="function">
								<dt class="name"><a href="#./utility/map.SimpleMap.get">get</a></dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = simpleMap.get(key);</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">key</dt>
										<dd class="parameter type">K</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
								<dt>Returns</dt>
								<dd class="return type">V</dd>
								<dd class="return description"></dd>
							</dl>

							<dl id="./utility/map.SimpleMap.has" class="function">
								<dt class="name"><a href="#./utility/map.SimpleMap.has">has</a></dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = simpleMap.has(key);</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">key</dt>
										<dd class="parameter type">K</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
								<dt>Returns</dt>
								<dd class="return type">boolean</dd>
								<dd class="return description"></dd>
							</dl>

							<dl id="./utility/map.SimpleMap.set" class="function">
								<dt class="name"><a href="#./utility/map.SimpleMap.set">set</a></dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = simpleMap.set(key, value);</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">key</dt>
										<dd class="parameter type">K</dd>
										<dd class="parameter description"></dd>
										<dt class="parameter name">value</dt>
										<dd class="parameter type">V</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
								<dt>Returns</dt>
								<dd class="return type">libjass.Map.&lt;K, V&gt;</dd>
								<dd class="return description">This map</dd>
							</dl>

							<dl id="./utility/map.SimpleMap._keyToProperty" class="function private">
								<dt class="name"><a href="#./utility/map.SimpleMap._keyToProperty">_keyToProperty</a></dt>
								<dd class="description">
									Converts the given key into a property name for the internal map.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = simpleMap._keyToProperty(key);</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">key</dt>
										<dd class="parameter type">K</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
								<dt>Returns</dt>
								<dd class="return type">string</dd>
								<dd class="return description"></dd>
							</dl>

						</dd>
					</dl>
				</section>
			</section>
			<section class="module">
				<h1 id="./utility/mixin">Module ./utility/mixin</h1>
				<section>
					<h2>Free functions</h2>
					<dl id="./utility/mixin.mixin" class="function">
						<dt class="name"><a href="#./utility/mixin.mixin">mixin</a></dt>
						<dd class="description">
							Adds properties of the given mixins' prototypes to the given class's prototype.
						</dd>
						<dd class="usage"><fieldset><legend /><pre><code>mixin(clazz, mixins);</code></pre></fieldset></dd>
						<dd class="parameters">
							<dl>
								<dt class="parameter name">clazz</dt>
								<dd class="parameter type">!*</dd>
								<dd class="parameter description"></dd>
								<dt class="parameter name">mixins</dt>
								<dd class="parameter type">!Array.&lt;*&gt;</dd>
								<dd class="parameter description"></dd>
							</dl>
						</dd>
					</dl>
				</section>
			</section>
			<section class="module">
				<h1 id="./utility/promise">Module ./utility/promise</h1>
				<section>
					<h2>Free functions</h2>
					<dl id="./utility/promise.any" class="function">
						<dt class="name"><a href="#./utility/promise.any">any.&lt;T&gt;</a></dt>
						<dd class="description">
							Returns a promise that resolves to the first (in time order) promise that fulfills, and rejects if all the promises reject.
						</dd>
						<dd class="usage"><fieldset><legend /><pre><code>var result = any(promises);</code></pre></fieldset></dd>
						<dd class="parameters">
							<dl>
								<dt class="parameter name">promises</dt>
								<dd class="parameter type">!Array.&lt;!Promise.&lt;T&gt;&gt;</dd>
								<dd class="parameter description"></dd>
							</dl>
						</dd>
						<dt>Returns</dt>
						<dd class="return type">!Promise.&lt;T&gt;</dd>
						<dd class="return description"></dd>
					</dl>
					<dl id="./utility/promise.first" class="function">
						<dt class="name"><a href="#./utility/promise.first">first.&lt;T&gt;</a></dt>
						<dd class="description">
							Returns a promise that resolves to the first (in iteration order) promise that fulfills, and rejects if all the promises reject.
						</dd>
						<dd class="usage"><fieldset><legend /><pre><code>var result = first(promises);</code></pre></fieldset></dd>
						<dd class="parameters">
							<dl>
								<dt class="parameter name">promises</dt>
								<dd class="parameter type">!Array.&lt;!Promise.&lt;T&gt;&gt;</dd>
								<dd class="parameter description"></dd>
							</dl>
						</dd>
						<dt>Returns</dt>
						<dd class="return type">!Promise.&lt;T&gt;</dd>
						<dd class="return description"></dd>
					</dl>
					<dl id="./utility/promise.lastly" class="function">
						<dt class="name"><a href="#./utility/promise.lastly">lastly.&lt;T&gt;</a></dt>
						<dd class="description">
							Returns a promise that runs the given callback when the promise has resolved regardless of whether it fulfilled or rejected.
						</dd>
						<dd class="usage"><fieldset><legend /><pre><code>var result = lastly(promise, body);</code></pre></fieldset></dd>
						<dd class="parameters">
							<dl>
								<dt class="parameter name">promise</dt>
								<dd class="parameter type">!Promise.&lt;T&gt;</dd>
								<dd class="parameter description"></dd>
								<dt class="parameter name">body</dt>
								<dd class="parameter type">function()</dd>
								<dd class="parameter description"></dd>
							</dl>
						</dd>
						<dt>Returns</dt>
						<dd class="return type">!Promise.&lt;T&gt;</dd>
						<dd class="return description"></dd>
					</dl>
					<dl id="./utility/promise.setImplementation" class="function">
						<dt class="name"><a href="#./utility/promise.setImplementation">setImplementation</a></dt>
						<dd class="description">
							Sets the Promise implementation used by libjass to the provided one. If null, <a href="#./utility/promise.SimplePromise">./utility/promise.SimplePromise</a> is used.
						</dd>
						<dd class="usage"><fieldset><legend /><pre><code>setImplementation(value);</code></pre></fieldset></dd>
						<dd class="parameters">
							<dl>
								<dt class="parameter name">value</dt>
								<dd class="parameter type">?function(new:Promise)</dd>
								<dd class="parameter description"></dd>
							</dl>
						</dd>
					</dl>
					<dl id="./utility/promise.first_rec" class="function private">
						<dt class="name"><a href="#./utility/promise.first_rec">first_rec.&lt;T&gt;</a></dt>
						<dd class="description">
							
						</dd>
						<dd class="usage"><fieldset><legend /><pre><code>var result = first_rec(promises, previousRejections);</code></pre></fieldset></dd>
						<dd class="parameters">
							<dl>
								<dt class="parameter name">promises</dt>
								<dd class="parameter type">!Array.&lt;!Promise.&lt;T&gt;&gt;</dd>
								<dd class="parameter description"></dd>
								<dt class="parameter name">previousRejections</dt>
								<dd class="parameter type">!Array.&lt;*&gt;</dd>
								<dd class="parameter description"></dd>
							</dl>
						</dd>
						<dt>Returns</dt>
						<dd class="return type">!Promise.&lt;T&gt;</dd>
						<dd class="return description"></dd>
					</dl>
				</section>
				<section>
					<h2>Interfaces</h2>
					<dl id="./utility/promise.Thenable" class="interface">
						<dt class="name">interface <a href="#./utility/promise.Thenable">Thenable.&lt;T&gt;</a></dt>
						<dd class="description">
							
						</dd>
						<dd class="members">
							<dl id="./utility/promise.Thenable.then" class="property">
								<dt class="name"><a href="#./utility/promise.Thenable.then">then</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = thenable.then;</code></pre></fieldset></dd>
								<dd class="return type">function(this:!Thenable.&lt;T&gt;, function(T|!Thenable.&lt;T&gt;), function(*))</dd>
								<dt class="setter">Setter</dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>thenable.then = value;</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">value</dt>
										<dd class="parameter type">function(this:!Thenable.&lt;T&gt;, function(T|!Thenable.&lt;T&gt;), function(*))</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
							</dl>

						</dd>
					</dl>
					<dl id="./utility/promise.ThenableThen" class="interface">
						<dt class="name">interface <a href="#./utility/promise.ThenableThen">ThenableThen.&lt;T&gt;</a></dt>
						<dd class="description">
							
						</dd>
						<dd class="members">
						</dd>
					</dl>
					<dl id="./utility/promise.FulfilledPromiseReaction" class="interface private">
						<dt class="name">interface <a href="#./utility/promise.FulfilledPromiseReaction">FulfilledPromiseReaction.&lt;T, U&gt;</a></dt>
						<dd class="description">
							
						</dd>
						<dd class="members">
							<dl id="./utility/promise.FulfilledPromiseReaction.capabilities" class="property">
								<dt class="name"><a href="#./utility/promise.FulfilledPromiseReaction.capabilities">capabilities</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = fulfilledPromiseReaction.capabilities;</code></pre></fieldset></dd>
								<dd class="return type">!libjass.DeferredPromise.&lt;U&gt;</dd>
								<dt class="setter">Setter</dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>fulfilledPromiseReaction.capabilities = value;</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">value</dt>
										<dd class="parameter type">!libjass.DeferredPromise.&lt;U&gt;</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
							</dl>

							<dl id="./utility/promise.FulfilledPromiseReaction.handler" class="function">
								<dt class="name"><a href="#./utility/promise.FulfilledPromiseReaction.handler">handler</a></dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = fulfilledPromiseReaction.handler(value);</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">value</dt>
										<dd class="parameter type">T</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
								<dt>Returns</dt>
								<dd class="return type">U|!Thenable.&lt;U&gt;</dd>
								<dd class="return description"></dd>
							</dl>

						</dd>
					</dl>
					<dl id="./utility/promise.RejectedPromiseReaction" class="interface private">
						<dt class="name">interface <a href="#./utility/promise.RejectedPromiseReaction">RejectedPromiseReaction.&lt;U&gt;</a></dt>
						<dd class="description">
							
						</dd>
						<dd class="members">
							<dl id="./utility/promise.RejectedPromiseReaction.capabilities" class="property">
								<dt class="name"><a href="#./utility/promise.RejectedPromiseReaction.capabilities">capabilities</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = rejectedPromiseReaction.capabilities;</code></pre></fieldset></dd>
								<dd class="return type">!libjass.DeferredPromise.&lt;U&gt;</dd>
								<dt class="setter">Setter</dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>rejectedPromiseReaction.capabilities = value;</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">value</dt>
										<dd class="parameter type">!libjass.DeferredPromise.&lt;U&gt;</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
							</dl>

							<dl id="./utility/promise.RejectedPromiseReaction.handler" class="function">
								<dt class="name"><a href="#./utility/promise.RejectedPromiseReaction.handler">handler</a></dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = rejectedPromiseReaction.handler(reason);</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">reason</dt>
										<dd class="parameter type">*</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
								<dt>Returns</dt>
								<dd class="return type">U|!Thenable.&lt;U&gt;</dd>
								<dd class="return description"></dd>
							</dl>

						</dd>
					</dl>
				</section>
				<section>
					<h2>Classes</h2>
					<dl id="./utility/promise.SimplePromise" class="clazz private">
						<dt class="name">class <a href="#./utility/promise.SimplePromise">SimplePromise.&lt;T&gt;</a></dt>
						<dd class="description">
							Promise implementation for browsers that don't support it.
						</dd>
						<dd class="usage"><fieldset><legend /><pre><code>var simplePromise = new SimplePromise(executor);</code></pre></fieldset></dd>
						<dd class="parameters">
							<dl>
								<dt class="parameter name">executor</dt>
								<dd class="parameter type">function(function(T|!Thenable.&lt;T&gt;), function(*))</dd>
								<dd class="parameter description"></dd>
							</dl>
						</dd>
						<dd class="members">
							<dl id="./utility/promise.SimplePromise.all" class="function static">
								<dt class="name"><a href="#./utility/promise.SimplePromise.all">all.&lt;T&gt;</a></dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = SimplePromise.all(values);</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">values</dt>
										<dd class="parameter type">!Array.&lt;T|!Thenable.&lt;T&gt;&gt;</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
								<dt>Returns</dt>
								<dd class="return type">!Promise.&lt;!Array.&lt;T&gt;&gt;</dd>
								<dd class="return description"></dd>
							</dl>

							<dl id="./utility/promise.SimplePromise.catch" class="function">
								<dt class="name"><a href="#./utility/promise.SimplePromise.catch">catch</a></dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = simplePromise.catch(onRejected);</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">onRejected</dt>
										<dd class="parameter type">function(*):(T|!Thenable.&lt;T&gt;)</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
								<dt>Returns</dt>
								<dd class="return type">!Promise.&lt;T&gt;</dd>
								<dd class="return description"></dd>
							</dl>

							<dl id="./utility/promise.SimplePromise.race" class="function static">
								<dt class="name"><a href="#./utility/promise.SimplePromise.race">race.&lt;T&gt;</a></dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = SimplePromise.race(values);</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">values</dt>
										<dd class="parameter type">!Array.&lt;T|!Thenable.&lt;T&gt;&gt;</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
								<dt>Returns</dt>
								<dd class="return type">!Promise.&lt;T&gt;</dd>
								<dd class="return description"></dd>
							</dl>

							<dl id="./utility/promise.SimplePromise.reject" class="function static">
								<dt class="name"><a href="#./utility/promise.SimplePromise.reject">reject.&lt;T&gt;</a></dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = SimplePromise.reject(reason);</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">reason</dt>
										<dd class="parameter type">*</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
								<dt>Returns</dt>
								<dd class="return type">!Promise.&lt;T&gt;</dd>
								<dd class="return description"></dd>
							</dl>

							<dl id="./utility/promise.SimplePromise.resolve" class="function static">
								<dt class="name"><a href="#./utility/promise.SimplePromise.resolve">resolve.&lt;T&gt;</a></dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = SimplePromise.resolve(value);</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">value</dt>
										<dd class="parameter type">T|!Thenable.&lt;T&gt;</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
								<dt>Returns</dt>
								<dd class="return type">!Promise.&lt;T&gt;</dd>
								<dd class="return description"></dd>
							</dl>

							<dl id="./utility/promise.SimplePromise.then" class="function">
								<dt class="name"><a href="#./utility/promise.SimplePromise.then">then.&lt;U&gt;</a></dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = simplePromise.then(onFulfilled, onRejected);</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">onFulfilled</dt>
										<dd class="parameter type">?function(T):(U|!Thenable.&lt;U&gt;)</dd>
										<dd class="parameter description"></dd>
										<dt class="parameter name">onRejected</dt>
										<dd class="parameter type">?function(*):(U|!Thenable.&lt;U&gt;)</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
								<dt>Returns</dt>
								<dd class="return type">!Promise.&lt;U&gt;</dd>
								<dd class="return description"></dd>
							</dl>

							<dl id="./utility/promise.SimplePromise._createResolvingFunctions" class="function private">
								<dt class="name"><a href="#./utility/promise.SimplePromise._createResolvingFunctions">_createResolvingFunctions</a></dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = simplePromise._createResolvingFunctions();</code></pre></fieldset></dd>
								<dt>Returns</dt>
								<dd class="return type">{ resolve(T|!Thenable.&lt;T&gt;), reject(*) }</dd>
								<dd class="return description"></dd>
							</dl>

							<dl id="./utility/promise.SimplePromise._enqueueFulfilledReactionJob" class="function private">
								<dt class="name"><a href="#./utility/promise.SimplePromise._enqueueFulfilledReactionJob">_enqueueFulfilledReactionJob</a></dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>simplePromise._enqueueFulfilledReactionJob(reaction, value);</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">reaction</dt>
										<dd class="parameter type">!FulfilledPromiseReaction.&lt;T, *&gt;</dd>
										<dd class="parameter description"></dd>
										<dt class="parameter name">value</dt>
										<dd class="parameter type">T</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
							</dl>

							<dl id="./utility/promise.SimplePromise._enqueueRejectedReactionJob" class="function private">
								<dt class="name"><a href="#./utility/promise.SimplePromise._enqueueRejectedReactionJob">_enqueueRejectedReactionJob</a></dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>simplePromise._enqueueRejectedReactionJob(reaction, reason);</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">reaction</dt>
										<dd class="parameter type">!RejectedPromiseReaction.&lt;*&gt;</dd>
										<dd class="parameter description"></dd>
										<dt class="parameter name">reason</dt>
										<dd class="parameter type">*</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
							</dl>

							<dl id="./utility/promise.SimplePromise._fulfill" class="function private">
								<dt class="name"><a href="#./utility/promise.SimplePromise._fulfill">_fulfill</a></dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>simplePromise._fulfill(value);</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">value</dt>
										<dd class="parameter type">T</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
							</dl>

							<dl id="./utility/promise.SimplePromise._reject" class="function private">
								<dt class="name"><a href="#./utility/promise.SimplePromise._reject">_reject</a></dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>simplePromise._reject(reason);</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">reason</dt>
										<dd class="parameter type">*</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
							</dl>

							<dl id="./utility/promise.SimplePromise._resolveWithThenable" class="function private">
								<dt class="name"><a href="#./utility/promise.SimplePromise._resolveWithThenable">_resolveWithThenable</a></dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>simplePromise._resolveWithThenable(thenable, then);</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">thenable</dt>
										<dd class="parameter type">!Thenable.&lt;T&gt;</dd>
										<dd class="parameter description"></dd>
										<dt class="parameter name">then</dt>
										<dd class="parameter type">{function(this:!Thenable.&lt;T&gt;, function(T|!Thenable.&lt;T&gt;), function(*))}</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
							</dl>

						</dd>
					</dl>
				</section>
				<section>
					<h2>Enums</h2>
					<dl id="./utility/promise.SimplePromiseState" class="enum private">
						<dt class="name">enum <a href="#./utility/promise.SimplePromiseState">SimplePromiseState</a></dt>
						<dd class="description">
							The state of the <a href="#./utility/promise.SimplePromise">./utility/promise.SimplePromise</a>
						</dd>
						<dd class="members">
							<dl id="./utility/promise.SimplePromiseState.PENDING" class="member">
								<dt class="name"><a href="#./utility/promise.SimplePromiseState.PENDING">PENDING</a> = 0</dt>
								<dd class="description">
									
								</dd>
							</dl>
							<dl id="./utility/promise.SimplePromiseState.FULFILLED" class="member">
								<dt class="name"><a href="#./utility/promise.SimplePromiseState.FULFILLED">FULFILLED</a> = 1</dt>
								<dd class="description">
									
								</dd>
							</dl>
							<dl id="./utility/promise.SimplePromiseState.REJECTED" class="member">
								<dt class="name"><a href="#./utility/promise.SimplePromiseState.REJECTED">REJECTED</a> = 2</dt>
								<dd class="description">
									
								</dd>
							</dl>
						</dd>
					</dl>
				</section>
			</section>
			<section class="module">
				<h1 id="./utility/set">Module ./utility/set</h1>
				<section>
					<h2>Free functions</h2>
					<dl id="./utility/set.setImplementation" class="function">
						<dt class="name"><a href="#./utility/set.setImplementation">setImplementation</a></dt>
						<dd class="description">
							Sets the Set implementation used by libjass to the provided one. If null, <a href="#./utility/set.SimpleSet">./utility/set.SimpleSet</a> is used.
						</dd>
						<dd class="usage"><fieldset><legend /><pre><code>setImplementation(value);</code></pre></fieldset></dd>
						<dd class="parameters">
							<dl>
								<dt class="parameter name">value</dt>
								<dd class="parameter type">?function(new:Set, !Array.&lt;T&gt;=)</dd>
								<dd class="parameter description"></dd>
							</dl>
						</dd>
					</dl>
				</section>
				<section>
					<h2>Classes</h2>
					<dl id="./utility/set.SimpleSet" class="clazz private">
						<dt class="name">class <a href="#./utility/set.SimpleSet">SimpleSet.&lt;T&gt;</a></dt>
						<dd class="description">
							<p>Set implementation for browsers that don't support it. Only supports Number and String elements.</p><p>Elements are stored as properties of an object, with names derived from their type.</p>
						</dd>
						<dd class="usage"><fieldset><legend /><pre><code>var simpleSet = new SimpleSet(iterable);</code></pre></fieldset></dd>
						<dd class="parameters">
							<dl>
								<dt class="parameter name">iterable</dt>
								<dd class="parameter type">!Array.&lt;T&gt;=</dd>
								<dd class="parameter description">Only an array of values is supported.</dd>
							</dl>
						</dd>
						<dd class="members">
							<dl id="./utility/set.SimpleSet.size" class="property">
								<dt class="name"><a href="#./utility/set.SimpleSet.size">size</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = simpleSet.size;</code></pre></fieldset></dd>
								<dd class="return type">number</dd>
							</dl>

							<dl id="./utility/set.SimpleSet.add" class="function">
								<dt class="name"><a href="#./utility/set.SimpleSet.add">add</a></dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = simpleSet.add(value);</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">value</dt>
										<dd class="parameter type">T</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
								<dt>Returns</dt>
								<dd class="return type">libjass.Set.&lt;T&gt;</dd>
								<dd class="return description">This set</dd>
							</dl>

							<dl id="./utility/set.SimpleSet.clear" class="function">
								<dt class="name"><a href="#./utility/set.SimpleSet.clear">clear</a></dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>simpleSet.clear();</code></pre></fieldset></dd>
							</dl>

							<dl id="./utility/set.SimpleSet.forEach" class="function">
								<dt class="name"><a href="#./utility/set.SimpleSet.forEach">forEach</a></dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>simpleSet.forEach(callbackfn, thisArg);</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">callbackfn</dt>
										<dd class="parameter type">function(T, T, libjass.Set.&lt;T&gt;)</dd>
										<dd class="parameter description">A function that is called with each value in the set.</dd>
										<dt class="parameter name">thisArg</dt>
										<dd class="parameter type">*</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
							</dl>

							<dl id="./utility/set.SimpleSet.has" class="function">
								<dt class="name"><a href="#./utility/set.SimpleSet.has">has</a></dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = simpleSet.has(value);</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">value</dt>
										<dd class="parameter type">T</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
								<dt>Returns</dt>
								<dd class="return type">boolean</dd>
								<dd class="return description"></dd>
							</dl>

							<dl id="./utility/set.SimpleSet._toProperty" class="function private">
								<dt class="name"><a href="#./utility/set.SimpleSet._toProperty">_toProperty</a></dt>
								<dd class="description">
									Converts the given value into a property name for the internal map.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = simpleSet._toProperty(value);</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">value</dt>
										<dd class="parameter type">T</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
								<dt>Returns</dt>
								<dd class="return type">string</dd>
								<dd class="return description"></dd>
							</dl>

						</dd>
					</dl>
				</section>
			</section>
			<section class="module">
				<h1 id="./utility/ts-helpers">Module ./utility/ts-helpers</h1>
				<section>
					<h2>Free functions</h2>
					<dl id="./utility/ts-helpers.___decorate" class="function">
						<dt class="name"><a href="#./utility/ts-helpers.___decorate">___decorate</a></dt>
						<dd class="description">
							Decorator shim.
						</dd>
						<dd class="usage"><fieldset><legend /><pre><code>var result = ___decorate(decorators, target, key);</code></pre></fieldset></dd>
						<dd class="parameters">
							<dl>
								<dt class="parameter name">decorators</dt>
								<dd class="parameter type">!Array.&lt;!Function&gt;</dd>
								<dd class="parameter description"></dd>
								<dt class="parameter name">target</dt>
								<dd class="parameter type">!*</dd>
								<dd class="parameter description"></dd>
								<dt class="parameter name">key</dt>
								<dd class="parameter type">string=</dd>
								<dd class="parameter description"></dd>
							</dl>
						</dd>
						<dt>Returns</dt>
						<dd class="return type">*</dd>
						<dd class="return description"></dd>
					</dl>
					<dl id="./utility/ts-helpers.___extends" class="function">
						<dt class="name"><a href="#./utility/ts-helpers.___extends">___extends</a></dt>
						<dd class="description">
							Class inheritance shim.
						</dd>
						<dd class="usage"><fieldset><legend /><pre><code>___extends(derived, base);</code></pre></fieldset></dd>
						<dd class="parameters">
							<dl>
								<dt class="parameter name">derived</dt>
								<dd class="parameter type">!Function</dd>
								<dd class="parameter description"></dd>
								<dt class="parameter name">base</dt>
								<dd class="parameter type">!Function</dd>
								<dd class="parameter description"></dd>
							</dl>
						</dd>
					</dl>
					<dl id="./utility/ts-helpers.decorateClass" class="function private">
						<dt class="name"><a href="#./utility/ts-helpers.decorateClass">decorateClass.&lt;T&gt;</a></dt>
						<dd class="description">
							Class decorator shim.
						</dd>
						<dd class="usage"><fieldset><legend /><pre><code>var result = decorateClass(decorators, clazz);</code></pre></fieldset></dd>
						<dd class="parameters">
							<dl>
								<dt class="parameter name">decorators</dt>
								<dd class="parameter type">!Array.&lt;function(function(new(): T)): function(new(): T)&gt;</dd>
								<dd class="parameter description"></dd>
								<dt class="parameter name">clazz</dt>
								<dd class="parameter type">function(new(): T)</dd>
								<dd class="parameter description"></dd>
							</dl>
						</dd>
						<dt>Returns</dt>
						<dd class="return type">function(new(): T)</dd>
						<dd class="return description"></dd>
					</dl>
					<dl id="./utility/ts-helpers.decorateField" class="function private">
						<dt class="name"><a href="#./utility/ts-helpers.decorateField">decorateField.&lt;T&gt;</a></dt>
						<dd class="description">
							Class member decorator shim.
						</dd>
						<dd class="usage"><fieldset><legend /><pre><code>decorateField(decorators, proto, name);</code></pre></fieldset></dd>
						<dd class="parameters">
							<dl>
								<dt class="parameter name">decorators</dt>
								<dd class="parameter type">!Array.&lt;function(T, string)&gt;</dd>
								<dd class="parameter description"></dd>
								<dt class="parameter name">proto</dt>
								<dd class="parameter type">!T</dd>
								<dd class="parameter description"></dd>
								<dt class="parameter name">name</dt>
								<dd class="parameter type">string</dd>
								<dd class="parameter description"></dd>
							</dl>
						</dd>
					</dl>
				</section>
			</section>
			<section class="module">
				<h1 id="./webworker/channel">Module ./webworker/channel</h1>
				<section>
					<h2>Interfaces</h2>
					<dl id="./webworker/channel.WorkerCommandHandler" class="interface">
						<dt class="name">interface <a href="#./webworker/channel.WorkerCommandHandler">WorkerCommandHandler</a></dt>
						<dd class="description">
							The signature of a handler registered to handle a particular command in <a href="#libjass.webworker.WorkerCommands">libjass.webworker.WorkerCommands</a>
						</dd>
						<dd class="members">
						</dd>
					</dl>
					<dl id="./webworker/channel.WorkerCommunication" class="interface private">
						<dt class="name">interface <a href="#./webworker/channel.WorkerCommunication">WorkerCommunication</a></dt>
						<dd class="description">
							The interface implemented by a communication channel to the other side.
						</dd>
						<dd class="members">
							<dl id="./webworker/channel.WorkerCommunication.addEventListener" class="function">
								<dt class="name"><a href="#./webworker/channel.WorkerCommunication.addEventListener">addEventListener</a></dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>workerCommunication.addEventListener(type, listener, useCapture);</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">type</dt>
										<dd class="parameter type">string</dd>
										<dd class="parameter description"></dd>
										<dt class="parameter name">listener</dt>
										<dd class="parameter type">!EventListener</dd>
										<dd class="parameter description"></dd>
										<dt class="parameter name">useCapture</dt>
										<dd class="parameter type">?boolean</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
							</dl>

							<dl id="./webworker/channel.WorkerCommunication.postMessage" class="function">
								<dt class="name"><a href="#./webworker/channel.WorkerCommunication.postMessage">postMessage</a></dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>workerCommunication.postMessage(message);</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">message</dt>
										<dd class="parameter type">*</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
							</dl>

						</dd>
					</dl>
					<dl id="./webworker/channel.WorkerRequestMessage" class="interface private">
						<dt class="name">interface <a href="#./webworker/channel.WorkerRequestMessage">WorkerRequestMessage</a></dt>
						<dd class="description">
							The interface implemented by a request sent to the other side of the communication channel.
						</dd>
						<dd class="members">
							<dl id="./webworker/channel.WorkerRequestMessage.command" class="property">
								<dt class="name"><a href="#./webworker/channel.WorkerRequestMessage.command">command</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									The command type of this request.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = workerRequestMessage.command;</code></pre></fieldset></dd>
								<dd class="return type">number</dd>
								<dt class="setter">Setter</dt>
								<dd class="description">
									The command type of this request.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>workerRequestMessage.command = value;</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">value</dt>
										<dd class="parameter type">number</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
							</dl>

							<dl id="./webworker/channel.WorkerRequestMessage.parameters" class="property">
								<dt class="name"><a href="#./webworker/channel.WorkerRequestMessage.parameters">parameters</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									Any parameters serialized with this request.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = workerRequestMessage.parameters;</code></pre></fieldset></dd>
								<dd class="return type">*</dd>
								<dt class="setter">Setter</dt>
								<dd class="description">
									Any parameters serialized with this request.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>workerRequestMessage.parameters = value;</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">value</dt>
										<dd class="parameter type">*</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
							</dl>

							<dl id="./webworker/channel.WorkerRequestMessage.requestId" class="property">
								<dt class="name"><a href="#./webworker/channel.WorkerRequestMessage.requestId">requestId</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									An internal identifier for this request. Used to connect responses to their corresponding requests.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = workerRequestMessage.requestId;</code></pre></fieldset></dd>
								<dd class="return type">number</dd>
								<dt class="setter">Setter</dt>
								<dd class="description">
									An internal identifier for this request. Used to connect responses to their corresponding requests.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>workerRequestMessage.requestId = value;</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">value</dt>
										<dd class="parameter type">number</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
							</dl>

						</dd>
					</dl>
					<dl id="./webworker/channel.WorkerResponseMessage" class="interface private">
						<dt class="name">interface <a href="#./webworker/channel.WorkerResponseMessage">WorkerResponseMessage</a></dt>
						<dd class="description">
							The interface implemented by a response received from the other side of the communication channel.
						</dd>
						<dd class="members">
							<dl id="./webworker/channel.WorkerResponseMessage.error" class="property">
								<dt class="name"><a href="#./webworker/channel.WorkerResponseMessage.error">error</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									Set if the computation of this response resulted in an error.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = workerResponseMessage.error;</code></pre></fieldset></dd>
								<dd class="return type">*</dd>
								<dt class="setter">Setter</dt>
								<dd class="description">
									Set if the computation of this response resulted in an error.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>workerResponseMessage.error = value;</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">value</dt>
										<dd class="parameter type">*</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
							</dl>

							<dl id="./webworker/channel.WorkerResponseMessage.requestId" class="property">
								<dt class="name"><a href="#./webworker/channel.WorkerResponseMessage.requestId">requestId</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									An internal identifier for this response. Used to connect responses to their corresponding requests.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = workerResponseMessage.requestId;</code></pre></fieldset></dd>
								<dd class="return type">number</dd>
								<dt class="setter">Setter</dt>
								<dd class="description">
									An internal identifier for this response. Used to connect responses to their corresponding requests.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>workerResponseMessage.requestId = value;</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">value</dt>
										<dd class="parameter type">number</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
							</dl>

							<dl id="./webworker/channel.WorkerResponseMessage.result" class="property">
								<dt class="name"><a href="#./webworker/channel.WorkerResponseMessage.result">result</a></dt>
								<dt class="getter">Getter</dt>
								<dd class="description">
									The result of computing this response.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = workerResponseMessage.result;</code></pre></fieldset></dd>
								<dd class="return type">*</dd>
								<dt class="setter">Setter</dt>
								<dd class="description">
									The result of computing this response.
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>workerResponseMessage.result = value;</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">value</dt>
										<dd class="parameter type">*</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
							</dl>

						</dd>
					</dl>
				</section>
				<section>
					<h2>Classes</h2>
					<dl id="./webworker/channel.WorkerChannelImpl" class="clazz">
						<dt class="name">class <a href="#./webworker/channel.WorkerChannelImpl">WorkerChannelImpl</a> implements <a href="#libjass.webworker.WorkerChannel">WorkerChannel</a></dt>
						<dd class="description">
							Internal implementation of libjass.webworker.WorkerChannel
						</dd>
						<dd class="usage"><fieldset><legend /><pre><code>var workerChannelImpl = new WorkerChannelImpl(comm);</code></pre></fieldset></dd>
						<dd class="parameters">
							<dl>
								<dt class="parameter name">comm</dt>
								<dd class="parameter type">!*</dd>
								<dd class="parameter description">The object used to talk to the other side of the channel. When created by the main thread, this is the Worker object.
When created by the web worker, this is its global object.</dd>
							</dl>
						</dd>
						<dd class="members">
							<dl id="./webworker/channel.WorkerChannelImpl.cancelRequest" class="function">
								<dt class="name"><a href="#./webworker/channel.WorkerChannelImpl.cancelRequest">cancelRequest</a></dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>workerChannelImpl.cancelRequest(requestId);</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">requestId</dt>
										<dd class="parameter type">number</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
							</dl>

							<dl id="./webworker/channel.WorkerChannelImpl.request" class="function">
								<dt class="name"><a href="#./webworker/channel.WorkerChannelImpl.request">request</a></dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>var result = workerChannelImpl.request(command, parameters);</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">command</dt>
										<dd class="parameter type">number</dd>
										<dd class="parameter description"></dd>
										<dt class="parameter name">parameters</dt>
										<dd class="parameter type">*</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
								<dt>Returns</dt>
								<dd class="return type">!Promise.&lt;*&gt;</dd>
								<dd class="return description"></dd>
							</dl>

							<dl id="./webworker/channel.WorkerChannelImpl._onMessage" class="function private">
								<dt class="name"><a href="#./webworker/channel.WorkerChannelImpl._onMessage">_onMessage</a></dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>workerChannelImpl._onMessage(rawMessage);</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">rawMessage</dt>
										<dd class="parameter type">string</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
							</dl>

							<dl id="./webworker/channel.WorkerChannelImpl._respond" class="function private">
								<dt class="name"><a href="#./webworker/channel.WorkerChannelImpl._respond">_respond</a></dt>
								<dd class="description">
									
								</dd>
								<dd class="usage"><fieldset><legend /><pre><code>workerChannelImpl._respond(message);</code></pre></fieldset></dd>
								<dd class="parameters">
									<dl>
										<dt class="parameter name">message</dt>
										<dd class="parameter type">!WorkerResponseMessage</dd>
										<dd class="parameter description"></dd>
									</dl>
								</dd>
							</dl>

						</dd>
					</dl>
				</section>
			</section>
			<section class="module">
				<h1 id="./webworker/misc">Module ./webworker/misc</h1>
				<section>
					<h2>Free functions</h2>
					<dl id="./webworker/misc.deserialize" class="function">
						<dt class="name"><a href="#./webworker/misc.deserialize">deserialize</a></dt>
						<dd class="description">
							
						</dd>
						<dd class="usage"><fieldset><legend /><pre><code>var result = deserialize(str);</code></pre></fieldset></dd>
						<dd class="parameters">
							<dl>
								<dt class="parameter name">str</dt>
								<dd class="parameter type">string</dd>
								<dd class="parameter description"></dd>
							</dl>
						</dd>
						<dt>Returns</dt>
						<dd class="return type">*</dd>
						<dd class="return description"></dd>
					</dl>
					<dl id="./webworker/misc.getWorkerCommandHandler" class="function">
						<dt class="name"><a href="#./webworker/misc.getWorkerCommandHandler">getWorkerCommandHandler</a></dt>
						<dd class="description">
							Gets the handler for the given worker command.
						</dd>
						<dd class="usage"><fieldset><legend /><pre><code>var result = getWorkerCommandHandler(command);</code></pre></fieldset></dd>
						<dd class="parameters">
							<dl>
								<dt class="parameter name">command</dt>
								<dd class="parameter type">number</dd>
								<dd class="parameter description"></dd>
							</dl>
						</dd>
						<dt>Returns</dt>
						<dd class="return type">?function(*, function(*, *))</dd>
						<dd class="return description"></dd>
					</dl>
					<dl id="./webworker/misc.registerClassPrototype" class="function">
						<dt class="name"><a href="#./webworker/misc.registerClassPrototype">registerClassPrototype</a></dt>
						<dd class="description">
							Registers a prototype as a deserializable type.
						</dd>
						<dd class="usage"><fieldset><legend /><pre><code>registerClassPrototype(prototype);</code></pre></fieldset></dd>
						<dd class="parameters">
							<dl>
								<dt class="parameter name">prototype</dt>
								<dd class="parameter type">!*</dd>
								<dd class="parameter description"></dd>
							</dl>
						</dd>
					</dl>
					<dl id="./webworker/misc.registerWorkerCommand" class="function">
						<dt class="name"><a href="#./webworker/misc.registerWorkerCommand">registerWorkerCommand</a></dt>
						<dd class="description">
							Registers a handler for the given worker command.
						</dd>
						<dd class="usage"><fieldset><legend /><pre><code>registerWorkerCommand(command, handler);</code></pre></fieldset></dd>
						<dd class="parameters">
							<dl>
								<dt class="parameter name">command</dt>
								<dd class="parameter type">number</dd>
								<dd class="parameter description">The command that this handler will handle. One of the <a href="#libjass.webworker.WorkerCommands">libjass.webworker.WorkerCommands</a> constants.</dd>
								<dt class="parameter name">handler</dt>
								<dd class="parameter type">function(*, function(*, *))</dd>
								<dd class="parameter description">The handler. A function of the form (parameters: *, response: function(error: *, result: *): void): void</dd>
							</dl>
						</dd>
					</dl>
					<dl id="./webworker/misc.serialize" class="function">
						<dt class="name"><a href="#./webworker/misc.serialize">serialize</a></dt>
						<dd class="description">
							
						</dd>
						<dd class="usage"><fieldset><legend /><pre><code>var result = serialize(obj);</code></pre></fieldset></dd>
						<dd class="parameters">
							<dl>
								<dt class="parameter name">obj</dt>
								<dd class="parameter type">*</dd>
								<dd class="parameter description"></dd>
							</dl>
						</dd>
						<dt>Returns</dt>
						<dd class="return type">string</dd>
						<dd class="return description"></dd>
					</dl>
				</section>
			</section>
		</div>
	</body>
</html>
